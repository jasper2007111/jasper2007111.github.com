<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>重新开始写博客</title>
    <url>/2014/10/30/2014-10-30-my-first-blog/</url>
    <content><![CDATA[<p>以前用过Wordpress搭建过博客，后来也不知道怎么就断了。重新开始写博客，是因为看到网上不少好的独立博客的文章受益不少，也算是另一种回馈吧。</p>
<p>Octopress一年前就搭建过，现在又重新开始写。发现原来参考的搭建博客的博主已经换了引擎，不过我还是更喜欢Octopress吧，所以继续用吧，文章才是重点了。</p>
<p>之前已经搭建好了博客，github上已经有两个分支了，source和master。首先应该把source分支给克隆下来，博客的源文件了；master则是编译后的博客静态文件了。</p>
<p>发布的时候遇到了点问题</p>
<p><code>_deploy</code>这个是发布目录，如果重新拉取git的话，手动创建并把Master分支拉取到这个目录。</p>
<h3 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h3><p>在<code>Source</code>目录下创建<code>CNAME</code>文件，填写自己的域名，当然也需要在域名管理设置DNS。生成文章时会自动把<code>CNAME</code>文件复制到<code>_deploy</code>目录最后同步到Master分支。</p>
<h3 id="启用Https"><a href="#启用Https" class="headerlink" title="启用Https"></a>启用Https</h3><p>启用自定义域名后，Enforce HTTPS单选框一直是灰色的。后来搜索了下是需要在域名管理那块设置CAA，类似这样。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CAA c2lang.com 0 issue &quot;letsencrypt.org&quot;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>iOS开发一些总结</title>
    <url>/2015/11/15/2015-11-15-ios-development-tips/</url>
    <content><![CDATA[<p>首先要是有一个界面开发的经历那最好了，类似桌面界面开发其实是相通的。游戏开发中的界面跟这个略微不同。大部分会用到框架提供的组件，熟练的使用常用的组件是很有必要的。应该尽可能的多去尝试不同组件的使用机会，这样才能扩大组件的使用见识。</p>
<p>应该用面对对象的角度去研究文档，继承关系以及实现了什么样的协议，顺着这样的路走下去就会对框架有个整体的认识。不少人看着也开发了好一段时间，但就是不曾系统的研究过这些东西。遇到问题了，还是停留在百度这样境界。</p>
<p>框架和语言的问题，一开始开发的时候基本上不会对这个进行分类。实际上语言是需要单独学习的，研究的越深刻才能越自由。</p>
<p>设计模式，如果不是项目开发到一定规模很难会有所领悟，而且你是项目负责的，一般新手建议从研究系统框架中使用到的设计模式入手，这样更实际点。</p>
<p>HTTP协议需要单独研究，有本书《HTTP权威指南》非常详尽。Charles这样的抓包工具可以作为辅助研究这个的工具。除此还可以研究下AFNetworking源代码以及原生的请求类。</p>
<p>关系型数据库需要单独找本书看下，不是简单的会使用增删改查就可以了，比如怎么多表联查，怎么排序，SQL语句提供的功能远不只这些。</p>
<p>Core Data应该用，建议学习下Rails这个后台开发的东西，你就会明白多数的框架都不会直接去操作SQL，而是通过包装来简化或者影藏其中的复杂性。问题远远的比想得复杂，原始的刀耕火种的方式会让你累个半死，所以最好用现成的解决方案了。</p>
]]></content>
  </entry>
  <entry>
    <title>还是选择Octopress</title>
    <url>/2019/10/03/2019-10-03-still-using-octopress/</url>
    <content><![CDATA[<p>Octopress 这东西放在5年前那会是多那么的流行，不过后来好像被Hexo超越了。打开大部分的博客都是Hexo的，Octopress的已经很少见了。15年的时候用Github Page建立Octopress的博客，写一篇iOS的文章后就再也没有更新了。虽然也有使用Hexo替换Octopress的想法，不过想想还是算了。</p>
<p>网上吐槽Octopress意思是生成文章比较慢，不过我这种写文章的速度话，也不会有多少文章，所以没有设么好担心的。也许过几年后文章多了，Hexo的也不流行了。</p>
<p>修改Octopress对于我来说也不是什么问题，本身我现在也在做Web开发，所以看看一些文档也能修改。Octopress中因为使用谷歌提供的服务缘故，在国内访问很慢，基本上把jQuery的引用改成国内可以访问的就好，另外屏蔽掉插件中关于推特的项，插件里面还有Google +这样的东西，也都一并屏蔽。Google +都已经被关掉了，这就是长时间不更新的问题，确实会有一些已经老旧的东西。不过这些都是小问题，核心的东西是生成静态的html的网页，所以对于一个懂Web开发的人来说，自己动手改改都不是问题。</p>
<p>Octopress默认的风格比起Hexo的要好看，属于耐看型，我也懒得去折腾主题插件，最主要的能展示文章就好，另外也适配了手机屏幕。</p>
]]></content>
  </entry>
  <entry>
    <title>Macbook Pro 配件</title>
    <url>/2019/10/20/2019-10-20-macbook-pro-accessories/</url>
    <content><![CDATA[<p>使用Macbook Pro已经有6、7年了，总结下用到的一些不错的配件。</p>
<h3 id="键盘"><a href="#键盘" class="headerlink" title="键盘"></a>键盘</h3><p>首推HHKB了，整体设计很复古，键位布局很紧凑，很轻非常适合携带。尤其是新版的本使用虚拟操作栏和蝶式键盘后，基本上写程序都是用的HHKB。键盘没有方向键，一般使用FN组合建。没有大小写按键，可以使用Shift+字母键来代替。价位确实比较高，也不是机械轴，质量当然没得说，几年过去依旧完好，最主要其实就是感觉跟苹果一样都是追求极致的那种，一句话很搭。</p>
<p>另外菲尔可的78键的也不错，我买的是青轴，这个键盘听说是有加钢板，所以敲着声音更清脆。关于机械轴，很多刚开始玩机械需要注意的一定要买青轴，实际上青轴真的也没有传说中的多吵，而这个也是最能体现机械件轴的地方，所以推荐买青轴了。这个键盘比较重，不合适携带。</p>
<h3 id="鼠标"><a href="#鼠标" class="headerlink" title="鼠标"></a>鼠标</h3><p>原装的鼠标当然好，不过也是真贵。推荐一款淘宝上只需不到20元的ACTME的蓝牙充电鼠标。虽然廉价但鼠标移动很顺畅，从来没有卡顿过。比一些大牌的好，至少在mac系统下。</p>
<h3 id="扩展坞"><a href="#扩展坞" class="headerlink" title="扩展坞"></a>扩展坞</h3><p>新版的Macbook Pro确实轻了不少，换来的是一堆的Type-C的接口。扩展坞这种东西也成必须要买的配件，目前用的是绿联的，除了有些发烫外，其他的转接功能都正常使用，不过用扩展坞给手机充电确实不快，应该用慢来形容。</p>
<h3 id="键盘膜"><a href="#键盘膜" class="headerlink" title="键盘膜"></a>键盘膜</h3><p>之前的本和现在的都用的Moshi的这个牌子，主要是做工好，跟键盘的贴合度都没有问题。虽然有点小贵，上个本的依旧完好无缺，一个可以把本淘汰掉，依旧完好的膜，也算值得。</p>
]]></content>
  </entry>
  <entry>
    <title>Octopress使用指南</title>
    <url>/2020/07/22/2020-07-22-octopress-users-guide/</url>
    <content><![CDATA[<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rake <span class="string">&#x27;new_post[&quot;title&quot;]&#x27;</span> <span class="comment"># 创建文章</span></span><br><span class="line">rake generate <span class="comment"># 生成文章</span></span><br><span class="line">rake preview <span class="comment"># 本地预览博客</span></span><br><span class="line">rake deploy <span class="comment"># 发布博客</span></span><br></pre></td></tr></table></figure>

<p>修改文章创建的日期格式，我比较喜欢类似<code>2020-01-01 00:00:00</code>这样的格式，修改<code>_config.yml</code>。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">date_format:</span> <span class="string">&quot;%Y-%m-%d&quot;</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">&quot;%H:%M:%S&quot;</span> <span class="comment"># 这个新增的，默认配置文件没有的</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>用Common Lisp写一个双色球程序</title>
    <url>/2020/07/22/2020-07-22-write-a-lottery-program-with-common-lisp/</url>
    <content><![CDATA[<p>断断续续的看了些Common Lisp的东西，主要是田春冰河翻译的那本《实用Common Lisp编程》，另外网上有人翻译了《ANSI Common Lisp》也有看，另一本《Common Lisp： A Gentle Introduction to Symbolic Computation》。总得写点东西，于是就写了这个双色球的小程序。</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">(<span class="name">defconstant</span> total-red-ball <span class="number">33</span>)</span><br><span class="line">(<span class="name">defconstant</span> total-blue-ball <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">(<span class="name">defun</span> select-red-ball (<span class="name">red-balls</span> double-balls)</span><br><span class="line">  (<span class="name">let</span> (<span class="name">x</span>)</span><br><span class="line">    (<span class="name">setq</span> x (<span class="name">elt</span> red-balls (<span class="name">random</span> (<span class="name">length</span> red-balls))))</span><br><span class="line">    (<span class="name">vector-push</span> x double-balls)</span><br><span class="line">    (<span class="name">delete</span> x red-balls)))</span><br><span class="line"></span><br><span class="line">(<span class="name">defun</span> create-double-balls()</span><br><span class="line">  (<span class="name">let</span> ((<span class="name">red-balls</span> (<span class="name">make-array</span> total-red-ball <span class="symbol">:fill-pointer</span> <span class="number">0</span>))</span><br><span class="line">	(<span class="name">blue-balls</span> (<span class="name">make-array</span> total-blue-ball <span class="symbol">:fill-pointer</span> <span class="number">0</span>))</span><br><span class="line">	(<span class="name">double-balls</span> (<span class="name">make-array</span> <span class="number">7</span> <span class="symbol">:fill-pointer</span> <span class="number">0</span>)))</span><br><span class="line">    (<span class="name">loop</span> for i from <span class="number">1</span> to total-red-ball do (<span class="name">vector-push</span> i red-balls))</span><br><span class="line">    (<span class="name">loop</span> for i from <span class="number">1</span> to total-blue-ball do (<span class="name">vector-push</span> i blue-balls))</span><br><span class="line">    (<span class="name">dotimes</span> (<span class="name">n</span> <span class="number">6</span>)</span><br><span class="line">      (<span class="name">select-red-ball</span> red-balls double-balls))</span><br><span class="line">    (<span class="name">setq</span> double-balls (<span class="name">sort</span> double-balls #&#x27;&lt;))</span><br><span class="line">    (<span class="name">vector-push</span> (<span class="name">elt</span> blue-balls (<span class="name">random</span> <span class="number">16</span>)) double-balls)</span><br><span class="line">    (<span class="name">print</span> double-balls)))</span><br><span class="line">    </span><br><span class="line">(<span class="name">defun</span> gen(<span class="name">n</span>)</span><br><span class="line">  (<span class="name">dotimes</span> (<span class="name">i</span> n)</span><br><span class="line">    (<span class="name">create-double-balls</span>)))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Lisp特殊的语法风格确实与C体系的语言有很大不同，不过如果有编程经验的话，还是比较容易上手，比如函数的传参，传个数组的话，实际上传指针了。定义局部变量的方式比如用<code>LET</code>。</p>
]]></content>
  </entry>
  <entry>
    <title>MySQL 笔记</title>
    <url>/2020/07/22/2020-07-22-mysql-notes/</url>
    <content><![CDATA[<p>持续记录在工作中一些MySQL使用心得。</p>
<h3 id="二进制日志"><a href="#二进制日志" class="headerlink" title="二进制日志"></a>二进制日志</h3><p>二进制日志文件默认会存放在<code> /var/lib/mysql</code>目录下，配合<code>mysqlbinlog</code>可以查看数据的变更，<code>--base64-output=decode-rows -v</code>加上这个可以使日志可读。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysqlbinlog --start-datetime=<span class="string">&quot;2020-07-14 10:00:00&quot;</span> --stop-datetime=<span class="string">&quot;2020-07-14 10:05:00&quot;</span> binlog.000001 --base64-output=decode-rows -v</span><br></pre></td></tr></table></figure>

<h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>访问远程数据库时，创建相应的用户。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">create user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;本机IP&#x27;</span> identified by <span class="string">&#x27;数据库密码&#x27;</span>;</span><br><span class="line">grant all privileges on *.* to <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;本机IP&#x27;</span> with grant option;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>匿名函数和闭包</title>
    <url>/2020/07/26/2020-07-26-anonymous-functions-and-closures/</url>
    <content><![CDATA[<p>匿名函数和闭包似乎成了现代语言必备的，因为自己接触的语言也多，所以特意做了下目前自己接触的这些语言不同。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	sum := <span class="number">0</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		sum += x</span><br><span class="line">		<span class="keyword">return</span> sum</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	pos, neg := adder(), adder()</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		fmt.Println(</span><br><span class="line">			pos(i),</span><br><span class="line">			neg(<span class="number">-2</span>*i),</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是Go语言的原始版本，例子来源于<a href="https://tour.golang.org/moretypes/25">tour.golang.org</a>，后面会用其他的语言来写相同的例子。</p>
<p>JavaScript的版本</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">adder</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">        sum += x</span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pos = <span class="title function_">adder</span>(), neg = <span class="title function_">adder</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">pos</span>(i) + <span class="string">&quot; &quot;</span> + <span class="title function_">neg</span>(-<span class="number">2</span> * i))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Swift 版本</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">adder</span>()-&gt;(<span class="type">Int</span>)-&gt;<span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> sum<span class="operator">=</span><span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> &#123;(x: <span class="type">Int</span>)-&gt;<span class="type">Int</span> <span class="keyword">in</span></span><br><span class="line">        sum <span class="operator">+=</span> x;</span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pos <span class="operator">=</span> adder(), neg<span class="operator">=</span>adder();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span><span class="operator">...</span><span class="number">9</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(pos(i))</span>&quot;</span> <span class="operator">+</span> <span class="string">&quot; &quot;</span> <span class="operator">+</span> <span class="string">&quot;<span class="subst">\(neg(<span class="operator">-</span><span class="number">2</span><span class="operator">*</span>i))</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>谈谈断食</title>
    <url>/2020/09/13/2020-09-13-talk-about-fasting/</url>
    <content><![CDATA[<p><em><strong>提前声明下这只是一个比较个人的体验，并不代表普遍适用，仅供参考。</strong></em></p>
<p>关于断食，也有称作辟谷的，大体都是跟节食或者不吃饭有关系。我本人亲自尝试过的断食属于21天不吃饭只喝清水的这种，前一次大概是七年前，这一次也是9月13日才结束的，写这篇一方面是刚刚结束断食，想把最真实的感受记录下来。另外这是第二次21天清水断食，也会做个对比。</p>
<h4 id="体重"><a href="#体重" class="headerlink" title="体重"></a>体重</h4><p>21天下来，体重从155斤下降到130斤，大概瘦了25斤，从减肥的角度来看效果还是不错的。第一周减的比较多，大概是15斤左右，这一周喝水很多。第二周和第三周总共减了10斤左右，个人觉得后面2周是真的减脂的阶段，水其实喝的也并没有那么多。第二周会有点难熬，但是第三周反而能好点。</p>
<h4 id="活动"><a href="#活动" class="headerlink" title="活动"></a>活动</h4><p>不吃饭体力肯定是个问题，但也不能躺在床上，我本人是上着班进行的断食，不过因为去单位基本上也是写写代码，正常的走动。来回坐2个小时的地铁，好在都是从终点坐的都有位置。但是如果你爬个楼梯这样的运动，最好还是不要做。这种感受跟我当年在珠峰大本营底下爬一个20、30米高的土堆，那种因为缺氧导致很累的感觉一样。综上断食期间要适量的活动，但是尽量避免大一点的体力活动，尤其到后期，保持体力还是比较重要。</p>
<h4 id="毅力"><a href="#毅力" class="headerlink" title="毅力"></a>毅力</h4><p>一旦你下定决心的话，意味你要在21天放弃一些东西，包括各种应酬，我刚好成功的在工作中躲过了各种的应酬。因为是第二次，我心里大概有个数，虽然在外人看来一天不吃饭都无法忍受，何况21天呢？选择21天这个数字也是从前人的经验中得来的，比如弘一大师。断食似乎是宗教领袖都曾试过的方式，又比如甘地，他曾多次断食。不过作为现代人，经历了2次断食，个人觉得不要对断食抱有太多的幻想，其实不会有什么特殊的感受了，身体的变化是最大。第二次断食我一直坚持早上冥想，这是与上次不一样的。身体瘦下去后，确实有利于双盘，这是真的。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>21天断食并不神秘，身体瘦下去，总还是要回到一个正常的体重的。重要的是一种意志力的锻炼，从思想层面当你不在乎吃饭这件事时，或许对于人生有新的思考。</p>
]]></content>
  </entry>
  <entry>
    <title>《创新者的窘境》读后感</title>
    <url>/2020/08/08/2020-08-08-the-innovators-dilemma/</url>
    <content><![CDATA[<p>这本书比较老，要不是因为跟乔布斯读过有关系，很少会引起大家的注意，另外书里的例子是90年代的东西，有些东西涉及硬盘之类的案例，更重要的是这本书面向的是企业管理者和想内部创新的相关人，个人觉得对于很多人不会有共鸣感。因为在一家传统行业的公司从事信息化建设的相关工作，也才开始体会书中的东西。</p>
<h3 id="盈利"><a href="#盈利" class="headerlink" title="盈利"></a>盈利</h3><p>创新性业务与旧的业务的比较，大家都比较在意是否盈利，这就面临一个问题要不要盈利？不盈利，那么公司是否愿意投入一定时间的可能亏损的资金投入。但是要求盈利的话，那么这个项目很有可能会变味，因为按照书中描述的创新性项目一般盈利性差，短期内实际还是亏损。个人觉得没有丰腴资金流的公司很难做这样的内部创新。</p>
<h3 id="独立"><a href="#独立" class="headerlink" title="独立"></a>独立</h3><p>实际中我们可能会借助于传统来开展创新性的工作，所以会把二者一起考虑，但事实证明最好还是独立一个跟旧的业务分离开的部门。这样的好处是，避免传统与创新部门的比较，包括薪资、文化等，创新性的很大程度与旧的之间存在不一样的部分，所以最好能独立开来。</p>
<h3 id="创新"><a href="#创新" class="headerlink" title="创新"></a>创新</h3><p>这个也是书中讨论的，其实跟是不是公司内部创新没有太大的关系，其实更具有普遍性。创新的产品可能在当下没有优势，但是随着时间的发展会在某个点突破性能的点，从而替代旧的技术，这点非常值得创业者思考自己的项目是否属于这类，但也有个问题，比如书中提到的电动车，那是90年，即使到现在这个依旧是比较小众的，所以也许看准了，但是如果在初期的话，也很有可能因为过早的介入而夭折。</p>
<h3 id="内卷"><a href="#内卷" class="headerlink" title="内卷"></a>内卷</h3><p>内部创新最大的敌人就是内卷，尤其在已经很成熟的行业。我想到了曾经的手机霸主诺基亚，理论上来看最好的手机应该由他们产生，但是颠覆行业的却都不是这些企业。</p>
]]></content>
  </entry>
  <entry>
    <title>Mac上安装Nginx</title>
    <url>/2020/07/27/2020-07-27-installing-nginx-on-mac/</url>
    <content><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew install nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装成功后</span></span><br><span class="line">Docroot is: /usr/local/var/www</span><br><span class="line"></span><br><span class="line">The default port has been <span class="built_in">set</span> <span class="keyword">in</span> /usr/local/etc/nginx/nginx.conf to 8080 so that</span><br><span class="line">nginx can run without sudo.</span><br><span class="line"></span><br><span class="line">nginx will load all files <span class="keyword">in</span> /usr/local/etc/nginx/servers/.</span><br><span class="line"></span><br><span class="line">To have launchd start nginx now and restart at login:</span><br><span class="line">  brew services start nginx</span><br><span class="line">Or, <span class="keyword">if</span> you don<span class="string">&#x27;t want/need a background service you can just run:</span></span><br><span class="line"><span class="string">  nginx</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>默认根目录<code>/usr/local/var/www</code>，可以在配置文件<code>/usr/local/etc/nginx/nginx.conf</code>中修改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"> server &#123;</span><br><span class="line">        listen       8080; # 端口可以自己修改</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   index # 自定义路径</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>图片服务器，需要配置images目录，在<em><strong>conf</strong></em>文件中增加如下，然后重启。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /images &#123;</span><br><span class="line">	root /xxxx/xxxx; # 图片存放的目录</span><br><span class="line">	autoindex on; # 开启目录游览</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h4><p>使用<code>brew</code>来管理服务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew services start nginx <span class="comment"># 启动Nginx后台服务</span></span><br><span class="line">brew services restart nginx <span class="comment"># 重启Nginx后台服务</span></span><br><span class="line">brew services stop nginx <span class="comment"># 停止Nginx服务</span></span><br></pre></td></tr></table></figure>

<h4 id="诊断"><a href="#诊断" class="headerlink" title="诊断"></a>诊断</h4><p>Nginx诊断，有遇到过Nginx已经启动，但是无法访问，可以使用<code>nginx -t</code>来诊断具体的错误。</p>
]]></content>
  </entry>
  <entry>
    <title>CentOS 使用指南</title>
    <url>/2020/09/30/2020-09-30-centos-users-guide/</url>
    <content><![CDATA[<p>服务器一直使用的是CentOS，所以特做一下使用备注。基于的版本是<code>CentOS 8.0</code></p>
<h3 id="AppStream下载元数据失败"><a href="#AppStream下载元数据失败" class="headerlink" title="AppStream下载元数据失败"></a>AppStream下载元数据失败</h3><p>主要参考阿里云的<a href="https://developer.aliyun.com/mirror/centos?spm=a2c6h.13651102.0.0.521f1b115QnBld&accounttraceid=c111d6bbda4248d09e149ccc2637ff58pajx">CentOS 镜像</a>，设置完成后还会提示<code>AppStream下载元数据失败</code>的问题，需要把整个<code>/etc/yum.repos.d </code>整个目录备份，重新创建一个，再执行就好了。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d /etc/yum.repos.d.backup</span><br><span class="line"><span class="built_in">mkdir</span> /etc/yum.repos.d</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="VirtualBox安装"><a href="#VirtualBox安装" class="headerlink" title="VirtualBox安装"></a>VirtualBox安装</h3><p>使用VirtualBox安装会存在兼容问题，6.1的版本无法运行<code>CentOS-8.1.1911</code>，主要这个版本移除VBoxVGA的支持，所以只能使用6.0版本。</p>
<h3 id="查看-CentOS-版本"><a href="#查看-CentOS-版本" class="headerlink" title="查看 CentOS 版本"></a>查看 CentOS 版本</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/centos-release</span><br><span class="line">CentOS Linux release 8.1.1911 (Core) </span><br></pre></td></tr></table></figure>

<h3 id="查看网络配置"><a href="#查看网络配置" class="headerlink" title="查看网络配置"></a>查看网络配置</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure>

<h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><p>CentOS 8 使用firewall管理防火墙</p>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl start firewalld <span class="comment"># 启动</span></span><br><span class="line">systemctl stop firewalld  <span class="comment"># 关闭</span></span><br><span class="line">systemctl status firewalld <span class="comment"># 查看状态</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld <span class="comment"># 开机禁用</span></span><br><span class="line">systemctl <span class="built_in">enable</span> firewalld <span class="comment"># 开机启用</span></span><br></pre></td></tr></table></figure>

<h4 id="配置firewalld-cmd"><a href="#配置firewalld-cmd" class="headerlink" title="配置firewalld-cmd"></a>配置firewalld-cmd</h4><p>查看版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">firewall-cmd --version</span><br></pre></td></tr></table></figure>

<p>查看运行状态 </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure>

<p>添加端口</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure>

<p>重新载入设置（添加端口后一定要重载设置）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<p>查看所有端口</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure>

<p>删除某一端口</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone= public --remove-port=80/tcp --permanent</span><br></pre></td></tr></table></figure>



<h3 id="安装Mysql-8-0"><a href="#安装Mysql-8-0" class="headerlink" title="安装Mysql 8.0"></a>安装Mysql 8.0</h3><p>试了几种安装方式只有如下的可以安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install @mysql:8.0 -y</span><br></pre></td></tr></table></figure>

<p>启动服务以及开机启动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld</span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br></pre></td></tr></table></figure>

<p>密码设置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>

<p>远程访问，8.0跟旧版不太一样。</p>
<p>创建用户</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">create user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;172.16.10.203&#x27;</span> identified by  <span class="string">&#x27;password&#x27;</span></span><br></pre></td></tr></table></figure>

<p>赋予权限，with grant option这个选项表示该用户可以将自己拥有的权限授权给别人</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">grant all privileges on *.* to <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;172.16.10.203&#x27;</span> with grant option</span><br></pre></td></tr></table></figure>

<p>改密码&amp;授权超用户，flush privileges 命令本质上的作用是将当前user和privilige表中的用户信息&#x2F;权限设置从mysql库(MySQL数据库的内置库)中提取到内存里</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<p>创建账户::create user ‘用户名’@‘访问主机’ identified by ‘密码’;<br>赋予权限:grant 权限列表 on 数据库 to ‘用户名’@‘访问主机’ ;<br>with grant option这个选项表示该用户可以将自己拥有的权限授权给别人</p>
<h4 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h4><p>提示密码设置简单错误</p>
<p>1 查看当前安全变量值</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE <span class="string">&#x27;validate_password%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>2 修改变量</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> global validate_password.policy=0;</span><br><span class="line">mysql&gt; <span class="built_in">set</span> global validate_password.length=4;</span><br></pre></td></tr></table></figure>

<p>3 然后退出后再执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>

<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://www.jeepxie.net/article/590454.html">mysql版本:’for the right syntax to use near ‘identified by ‘password’ with grant option’</a></p>
<p><a href="https://www.mf8.biz/rhel8-centos8-install-mysql-8-0/">RHEL8 CentOS8 下安装 MySQL 8.0</a></p>
<p><a href="https://www.jianshu.com/p/b437566ccf98">mysql8.0 设置简单密码报错ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</a></p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lsof -i: 端口号 <span class="comment"># 查看某个端口的进程</span></span><br></pre></td></tr></table></figure>

<h3 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h3><p>主要记录虚拟机桥接模式无法连接外网的问题，主要是CentOS 8使用nmcli来管理网卡。</p>
<ol>
<li>编辑文件<code>vim /etc/sysconfig/network-scripts/ifcfg-ens33</code></li>
<li>使用<code>nmcli d connect ens33</code>激活</li>
<li>最后使用<code>nmcli c reload</code>重启网卡服务，稍等片刻，就可以Ping通网络了。</li>
</ol>
<h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>目前使用Let’s Encrypt SSL的证书，这个是免费的，唯一的缺点是只有三个月期限，到期后重新申请就可以。 </p>
<h4 id="certbot"><a href="#certbot" class="headerlink" title="certbot"></a>certbot</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install certbot</span><br></pre></td></tr></table></figure>

<p>申请通配符域名的证书，这个涉及域名验证，需要在DNS解析增加<code>_acme-challenge</code>的<code>TXT</code>记录。<font color='red'>需要注意的事通配符域名外还要加上完整域名</font>，之前的没有注意，结果直接访问完整域名时提示证书不安全。参考<a href="https://sspai.com/post/66008">手动申请 Let’s Encrypt 通配符证书</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/bin/certbot certonly  -d xxxx.com,*.xxxx.com --manual --preferred-challenges dns --server https://acme-v02.api.letsencrypt.org/directory</span><br></pre></td></tr></table></figure>

<p><font color='red'>注意的是两个域名之间的逗号后面不要跟空格</font></p>
<p>到期后的，需要删除原有证书<code>certbot delete</code>，重启Ngnix服务<code>sudo systemctl restart nginx</code>。不删除的话，会生成新的证书目录，这样的话还需要修改Ngnix的配置文件。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">certbot certificates <span class="comment"># 查看所有证书，主要是看证书是否快要过期</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>天童寺游记</title>
    <url>/2020/10/06/2020-10-06-travelogue-of-tiantong-temple/</url>
    <content><![CDATA[<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>今年十一长假因为跟中秋重叠，放八天假，趁着时间长决定去一趟宁波的天童寺去看一下。天童寺位于浙江省宁波市鄞州区太白山麓，为什么要去这座寺庙呢？说到这里要追述到《乔布斯传》这本书，大都数人因为这本书也会知道另一本书《禅者的初心》，作者是铃木俊隆，当然再深挖一点，就会知道一位与乔布斯关系密切的禅师乙川弘文。铃木俊隆与乙川弘文都是日本曹洞宗的僧侣。说到日本曹洞宗，不得不提他的开山祖师道元禅师，时间大概可以追述到南宋时期，道元禅师跨海来寻觅佛法，最后在天童寺遇到了如净禅师，得到如净禅师的认可后，回到日本后创建了日本曹洞宗。</p>
<p>关于天童寺的记载文献还是很多的，而关于如净禅师的记载则比较少，很多都是从道元禅师的记述中得知。这点类似李小龙跟叶问一样，因为道元禅师在日本的成功以及后世日本曹洞宗僧侣在海外弘法的成功，使得如净禅师逐渐为人们所知。不少关于乔布斯跟禅的文中没有切中要点，往往泛泛而谈，说是禅宗。准确的说乔布斯接触的是禅宗曹洞宗一脉的教法，更准确的是日本曹洞宗，但往上追述一点则到了南宋时期如净禅师传承的曹洞宗的一脉。</p>
<p>如净禅师，浙江宁波人，十九岁时出家，拜在雪窦智鉴禅师的门下，晚年入住天童寺，圆寂后葬在了西湖边的净慈禅寺，净慈禅寺曾经也是禅师入住过的道场。所以本次行程一条线就是围绕着如净禅师来走的，宁波奉化的雪窦山、天童寺、杭州西湖旁的净慈禅寺，这三个地方大略勾勒出了禅师的一生。</p>
<p>另一条线是围绕着道元禅师来走的，主要是天童寺、阿育王寺。二者在天童寺相会，另外我也带着道元禅师《正法眼藏》中文翻译版一书，在我看来一个人能留下来的无非是他的思想，而带着他的著作犹如带着这位禅师，在700多年后重走这条路。道元禅师在归国后第二年如净禅师圆寂，从此师徒再无相见的可能，所以带着道元的《正法眼藏》专程去杭州净慈禅寺拜祭如净禅师的塔墓，也算另一种相见吧。</p>
<h3 id="行程"><a href="#行程" class="headerlink" title="行程"></a>行程</h3><h4 id="天童寺"><a href="#天童寺" class="headerlink" title="天童寺"></a>天童寺</h4><p>确定好行程后，十一一大早就坐高铁去了宁波，大概在下午的五点半左右到了宁波。宁波确实跟西安这样的北方城市不一样，矮山、多水洼地。第二天一大早，乘坐地铁一号线直接到达宝幢站，下站后再乘坐育王站的162公交，终点站是公交天童站。不知道是跟疫情有关系还是其他，总之没有门票。穿过一段松柏的路，逐渐看到了天童寺，放生池，旁边山头的塔，再往里面走，隔着一个池子，东南佛国的照壁映入眼帘。照壁后面就是天王殿，穿过天王殿就是佛殿，寺院最上面有罗汉堂。基本的寺院结构跟大多数的寺庙差不多，但建筑上有着天童寺独有的特点。寺里的师父都非常友好，尤其跟寺图书馆的一位师父相谈甚欢，得知寺图书馆没有道元的《正法眼藏》这本书时，当即在原来购买书的那个商家那里下了10本的订单给禅寺，算尽点薄力。禅寺非常好的一点是提供15块一份的素餐，像我这种每次去寺庙不知道如何解决午餐的问题的人来说提供一种方便。天童寺历代都是出高僧的地方，近代有八指头陀、圆瑛法师（中国佛教协会第一任会长），有幸请到一本《八指头陀诗文集》，也算此行的一种意收获。寺里有不少处都有立牌，主要是关于道元禅师的，其中有个殿专门立有《日本道元禅师得法灵迹碑》，可见天童寺与日本曹洞宗的渊源，更被日本曹洞宗尊为祖庭。寺里的师父对于道元禅师也不陌生，都还充满敬意。当天刚好赶上面向在家人的禅七活动即将要开始，因为来的匆忙，不然真想去参加下。天童寺可能是国内仅有的几处仍在传承曹洞宗禅法的寺院，所以对于我们这些修行上更倾向于曹洞宗的人来说，弥足珍贵。</p>
<h4 id="阿育王寺"><a href="#阿育王寺" class="headerlink" title="阿育王寺"></a>阿育王寺</h4><p>阿育王寺有两座，一座叫阿育王寺，在公路旁边，另一座叫阿育王古寺，在山上。来之前只知道阿育王寺，不知道还有古寺一说。查了下大概阿育王寺有东塔院、西塔院，东塔院即阿育王古寺，也是最初建寺的地方，当年开山祖师惠达（俗名刘萨诃）在这里发现了佛舍利，因此而建寺。唐先天二年时，修建了西塔寺，即现在的阿育王寺，东塔寺的香火逐渐衰落，后来被毁逐渐废弃，现在的阿育王古寺是在原来的遗址上盖了一座崭新的寺庙。古寺因为在山上，知道的人不多，去的人也不多。在大略逛完阿育王寺后，我就打车前往了古寺那边看了下，那边虽然有公交但是发车间隔太长，只好打车了。顺便说下曹操专车，这个在西安也有，与传统的出租相比价格透明，因为我当时有问过一个出租车司机，结果报价明显比我后来坐曹操专车贵不少。古寺山后有阿育王寺开山祖师的塔墓，另外发现佛舍利的地方正在盖舍利大殿，寺里现在好像传承的是天台宗。</p>
<p>阿育王寺总体更加的古朴一点，也可能是一直没有断过的缘故。古寺虽然历史悠久，但因为是新建的，那份与古代的链接需要脑补。阿育王寺也是当年鉴真大师东渡日本失败时入住过的寺庙，里面也供奉着鉴真大师的像。</p>
<h4 id="雪窦山、雪窦寺、弥勒道场"><a href="#雪窦山、雪窦寺、弥勒道场" class="headerlink" title="雪窦山、雪窦寺、弥勒道场"></a>雪窦山、雪窦寺、弥勒道场</h4><p>单说雪窦山，其实也算是一座风景秀丽的名山，再加上雪窦寺以及弥勒道场，使之更加有名。不过这里似乎商业味有点过浓，另外说到雪窦山就不得不说老蒋，因为山下就是老蒋故居，我买的是联票210，包括蒋氏故居和雪窦山风景区。</p>
<p>要到雪窦寺确实比较难，风景区的专用车顺着蜿蜒的道路，过了许久才到达雪窦寺。雪窦寺位于一个山顶的洼地，依山而建。整个寺庙几乎都是新建的，最引人关注的就是寺庙半山腰上巨大的弥勒菩萨像，如果你要登临菩萨像的上面需要门票20元。站在菩萨像的上方俯瞰整个寺庙，一览无余。寺庙因为是弥勒道场的缘故，整个寺庙分为两部分，一部分是围绕巨大弥勒像的主轴线相关建筑，包括大殿供奉的也是弥勒菩萨的像。另一部分则是老寺部分，就是传统大雄宝殿的建筑群。里面有些旧的东西，比如有张学良被幽静时手植的树，不过大部分建筑还是新建的。</p>
<p>提到雪窦山，总会想到雪窦禅师，当然我此行的目的是因为当年如净禅师学道于雪窦智鉴禅师。不过我们并没有找到相关的东西，浓郁的弥勒道场道场味，几乎将禅宗寺院的本来面目都冲淡，虽然也号称曹洞宗的祖庭之一，但实无其名。甚至连太虚大师，这位当年极力倡导雪窦山为佛教五大名山，弥勒道场的发起人的塔院都隐匿在一个不起眼的山坳里。除此以外就是跟张学良幽静有关的景点，雪窦山更多像是老蒋的私人景区一般。山依旧是那个山，只是一切变了。</p>
<h4 id="净慈禅寺"><a href="#净慈禅寺" class="headerlink" title="净慈禅寺"></a>净慈禅寺</h4><p>本以为去天童寺也就顺便把如净禅师的塔给拜一下，不过网上一查发现如净禅师圆寂后并没有葬在天童寺，而是葬在了他曾经主持过的杭州西湖边的净慈禅寺。于是行程的最后一站有了杭州这一站，不过也许都是因缘，实际上如果葬在天童寺的话，我去的这会也看不了，因为那边现在正在建设维修中，并不对外开放。</p>
<p>前两日的天气都不错，不过当我要去杭州的时候，天气预报显示那边下雨，而宁波这边也是有雨，为此我专门改签了去杭州的车次，推后了一点，主要害怕过去下雨，行程不便了。不过也许是上天的某种眷顾吧，从宁波出发的时候，天气显示下雨，但实际不下雨。经过一个小时到杭州后，发现天气虽阴，但也没有下雨。花了点时间终于坐上了数字旅游2号线，在净寺站下，靠西湖的一边是雷峰塔，雷峰塔隔着公路的对面则是净慈禅寺，与雷峰塔的游客蜂拥而至相比，净慈禅寺禅寺显得比较清净。如果不是如净禅师的塔墓在这里，我好像也只知道灵隐寺了，禅寺的门票是10块钱，也算是一种象征性的收费，也合理。我也不免俗的去敲了一下南屏晚钟，一次10元。</p>
<p>一心想要去塔墓拜祭，老居士说在后山，中途遇到一位师父，给我说那边不开放，心里瞬间有点凉。不过我依旧往释迦殿的方向走，发现殿的一侧有个亭子，跟网上看到塔墓照片差不多了，本想直接沿着山坡往上爬，发现释迦殿上去后可以直接到塔墓那边。果然是对的，穿过一个亭子，旁边有济公像一尊，塔墓这边没有人，还好并没有像那位师父说的不开放，也不知道他出于什么样心里。塔墓被后建的石亭笼罩，旁边还立有如净禅师简介的石碑。在塔墓旁待了许久后，下山把整个寺庙大概转了下，净慈禅寺另一个出名的地方是这里是济公修行的地方，不过济公似乎如同神话人物一般，也没有留下塔墓之类的。大雄宝殿主供的是毗卢遮那佛，跟一般寺庙好像不太一样，但又跟原来看过日本曹洞宗的一些书里有提到毗卢遮那佛，这块不是很懂。</p>
<p>寺庙也是正在重建中，我也尽了点微薄之力。不过寺里的师父看似并不友好，倒是居士们很友好。身处西湖景区，能这样已经不错了，后来发现禅寺也有开展面对普通人的禅修，愿他们能珍惜这个道场。</p>
<h3 id="归途"><a href="#归途" class="headerlink" title="归途"></a>归途</h3><p>原来还打算去灵隐寺去看下，不过发现时间不够，沿着西湖略转了下。就朝火车站走了，骑着共享单车走了一段，离火车站不远的地方逐渐下起了下雨，而我也要开始返程了。</p>
<p>这次行程总体上非常的圆满，作为去年就想前往的地方，今年终于得以成行。打坐七年时间，曹洞宗似乎离自己有点远，只是在书里，在日本，而这次行程，终于让这一切变的真实起来。其实他并遥远，如果想去总能去的。行程结束了，我也把道元禅师的《正法眼藏》的书籍认真的看了一部分，此时这书才似乎能够看的进去，一切有点特别但又没有什么特别，唯一能想到的就是苏轼的那首《庐山烟雨浙江潮》</p>
<blockquote>
<p>庐山烟雨浙江潮，<br>未至千般恨不消。<br>到得还来别无事，<br>庐山烟雨浙江潮。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>iPhone 12 pro试用感受</title>
    <url>/2020/11/12/2020-11-12-try-iphone-12-pro/</url>
    <content><![CDATA[<p>iPhone 6s已经用5年了，待电确实比较差，外出的话离不开充电宝。iPhone 12出来后，我就下单iPhone 12 pro了。这次的iPhone 吸引我的是新外观以及对5G的支持，当然pro系列有激光雷达的功能。外观回归到iPhone 4时的设计，因为宽度比原来宽，所以拿着还是有点割手，套上外壳能好点。大小上来说，对于我这种小手还是觉得iPhone 6s的尺寸刚好，iPhone 12 pro的单手操作还是有担心机子摔在地上的风险。自从iPhone出了刘海屏后，我一直比较难以接受这样的设计，更钟情于iPhone 6s 这样的设计，其实在我看来苹果可以把手机的上下部分变短，比刘海这样的设计好。iPhone 12 pro的相机确实牛，这点是值得升级的，另外拍立得这个功能也非常不错。</p>
<p>谈谈我最后为什么退货呢，作为一个曾经的iOS开发者，对这几年的iPhone已经失去了升级的想法，一方面新iPhone价位比以前贵，功能其实没有太大的突破，从生产力角度来看，我更愿意在macbook pro上投资，而不是iPhone。另外iPhone 6s本身不怎么卡，只是电池不行了，这个完全可以换一个就可以了。升级最大的动力是支持5G，但是目前运营商的5G有点贵，而且5G设施也还在陆续建设中，另外平时用的更多是Wi-Fi，移动网络下也很少看视频之类的，所以并没有高速网络的需求。目前iPhone 12是支持5G的初代产品，所以有提升的空间。最后一点，刘海设计依旧是心里吐槽的对象，如果他出一个iPhone 6s的设计，但支持5G的手机，我可能更愿意接受。</p>
<h4 id="退货流程"><a href="#退货流程" class="headerlink" title="退货流程"></a>退货流程</h4><p>这是头一次退货，在订单中确认退货，会显示取货。取货的时间都没有问题，来了一个邮政的人员把机子简单的验证后，然后就把机子拿走了，没有留下快递单号。因为是头一次，取货后的第二天我看来下订单状态，依旧显示取货中，过了两天我发现还是这个状态。心里有点嘀咕，不会被骗吧，一般的寄送快递，当天晚上基本上状态都改变了。后来我直接给苹果客服打电话确认了，说一切都正常，机子也确实被取走了，因为会寄送到工厂，工厂收到后还要验货后才会更新订单的状态。大概是一周后，订单状态终于变了，钱也退了。</p>
]]></content>
  </entry>
  <entry>
    <title>如何写一个操作系统</title>
    <url>/2021/02/04/2021-02-04-how-to-write-an-os/</url>
    <content><![CDATA[<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>如何写一个操作系统，大概刚开始写程序一年多，我就思考这个问题，其实那些年很多想法都不错，至少感想，可惜能力跟不上想法。当时也不知道什么渠道看到的，2010年末的时候从亚马逊中国买了一本《Orange’S 一个操作系统实现》，那会主要应该是汇编语言的问题，没有跨过第三章，为此买了本王爽的《汇编语言·第三版》，依旧记得去乾陵一日游大巴上，我努力的读着，可惜作为一个刚接触脚本语言的人来说，汇编语言太难了，中间需要跨越的东西太多了。后来工作瞎忙之类，也就没有再继续，也不知道什么时候，我居然把这两本书都给卖了。</p>
<p>今年突然间又想，我应该尝试写一个简单的操作系统，多年的工作以及自学，使得我对编程有了一个相对完整的认识（后来证实实际我根本不懂真的如何用汇编编程，只是文字上的一知半解），这个想法似乎不像当年那么不靠谱。但该如何下手呢？刚开始我只想能跑一个<code>Hello wrold</code>的例子也可以，网上找了下最多的居然是我当年卖掉的那本《Orange’S 一个操作系统实现》书中的例子，书已经绝版了，于是就从孔夫子旧书网上买了一本，又买了王爽的《汇编语言》，现在已经升级到第四版了。</p>
<h3 id="最简单的OS"><a href="#最简单的OS" class="headerlink" title="最简单的OS"></a>最简单的OS</h3><p>来自《Orange’S 一个操作系统实现》一书。</p>
<p>运行环境：Ubuntu 20.04.2 LTS</p>
<p><code>boot.asm</code>代码</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">	org <span class="token number">07c00h</span>			<span class="token comment">; 告诉编译器程序加载到7c00处</span>
	mov <span class="token register variable">ax</span>, <span class="token register variable">cs</span>
	mov <span class="token register variable">ds</span>, <span class="token register variable">ax</span>
	mov <span class="token register variable">es</span>, <span class="token register variable">ax</span>
	call DispStr			<span class="token comment">; 调用显示字符串例程</span>
	jmp <span class="token operator">$</span>			<span class="token comment">; 无限循环</span>
<span class="token label function">DispStr:</span>
	mov <span class="token register variable">ax</span>, BootMessage
	mov <span class="token register variable">bp</span>, <span class="token register variable">ax</span>			<span class="token comment">; ES:BP = 串地址</span>
	mov <span class="token register variable">cx</span>, <span class="token number">16</span>			<span class="token comment">; CX = 串长度</span>
	mov <span class="token register variable">ax</span>, <span class="token number">01301h</span>		<span class="token comment">; AH = 13,  AL = 01h</span>
	mov <span class="token register variable">bx</span>, <span class="token number">000ch</span>		<span class="token comment">; 页号为0(BH = 0) 黑底红字(BL = 0Ch,高亮)</span>
	mov <span class="token register variable">dl</span>, <span class="token number">0</span>
	int <span class="token number">10h</span>			<span class="token comment">; 10h 号中断</span>
	ret
<span class="token label function">BootMessage:</span>		db	<span class="token string">"Hello, OS world!"</span>
times 	<span class="token number">510</span><span class="token operator">-</span>(<span class="token operator">$</span><span class="token operator">-</span><span class="token operator">$</span><span class="token operator">$</span>)	db	<span class="token number">0</span>	<span class="token comment">; 填充剩下的空间，使生成的二进制代码恰好为512字节</span>
dw 	<span class="token number">0xaa55</span>				<span class="token comment">; 结束标志</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>《Orange’S 一个操作系统实现》一书使用NASM汇编，王爽老师的《汇编语言》是MASM，但二者差别不大。专门讲NASM，有一本2003年中国铁道出版社出版的《汇编语言程序设计》，作者是林邦杰、陈明，此书是引进的台湾版，不过因为时间久远，已经买不到纸质书籍了，网上电子版，但找不到光盘内容，书中有些作者封装的调用都在光盘里面，所以不是很推荐。</p>
<p>NSAM版本：2.14.02</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">nasm boot.asm -o boot.bin # 编译<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>编译完成后，我们需要将<code>boot.bin</code>拷贝到软盘里面。书中使用的<code>bximage</code>来创建软盘。</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">bximage # 执行完成后会生成一个a.img的文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>拷贝文件到软盘</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">dd if&#x3D;boot.bin of&#x3D;a.img bs&#x3D;512 count&#x3D;1 conv&#x3D;notrunc
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>书中使用Bochs模拟器，需要在当前目录下创建<code>bochsrc</code>文本文件，内容如下：</p>
<pre class="line-numbers language-none"><code class="language-none">megs:32

romimage:file&#x3D;$BXSHARE&#x2F;BIOS-bochs-latest
vgaromimage:file&#x3D;$BXSHARE&#x2F;VGABIOS-lgpl-latest

floppya: 1_44&#x3D;a.img, status&#x3D;inserted


boot:floppy

log:bochsout.txt

mouse:enabled&#x3D;0

#keyboard: keymap&#x3D;$BXSHARE&#x2F;keymaps&#x2F;x11-pc-de.map

display_library:sdl2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>网上书中光盘里面的bochsrc配置文件运行有问题，我这个是修改过的，启动Bochs</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">bochs -f bochsrc # 或者bochs，会直接在当前目录下寻找配置<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这里需要注意的是启动后，需要按<code>c</code>后才在屏幕上显示<code>Hello, OS world!</code>的界面。 关于<code>Bochs</code>本身确实有很多需要学习的地方。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">times 	<span class="token number">510</span><span class="token operator">-</span>(<span class="token operator">$</span><span class="token operator">-</span><span class="token operator">$</span><span class="token operator">$</span>)	db	<span class="token number">0</span>	<span class="token comment">; 填充剩下的空间，使生成的二进制代码恰好为512字节</span>
dw 	<span class="token number">0xaa55</span>				<span class="token comment">; 结束标志</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>特意说下这段代码，代码结尾必须为<code>aa55</code>，这个是结束标志。另外代码必须小于512kb的大小，后来我因为代码的问题，填充剩余空间出现了问题，导致大小超过了512，Bochs运行时提示<code>Message: No bootable device. bochs</code>，因为只会在第一扇区寻找数据，而结束标志实际上已经不在第一扇区了。</p>
<h3 id="汇编和CPU"><a href="#汇编和CPU" class="headerlink" title="汇编和CPU"></a>汇编和CPU</h3><p>似乎可以继续一路向前了，可惜看了头三章后，我发现了些问题。首先我对NASM汇编的东西几乎是一片空白，书的前几章几乎离不开汇编语言了，而看的非常吃力。另一个是我对PC的体系缺乏细节的了解，虽然之前也有了解但实操的过程中遇到的问题更具体。</p>
<p>NASM的书籍不多，《汇编语言.基于Linux环境.第三版》是一本从体系的角度来讲解NASM的书籍，一方面学习了NASM，也让我重新思考从8086到80386的一些变化，好几个点很有启发。王爽老师的《汇编语言》，也是一本非常不错的参考书，汇编语言在形式上与高级语言还是有着巨大差异，一开始我把心思放在那些寄存器之类上了，而忽略了一个编程语言应该是能够写点东西出来这事上。《汇编语言》这书很好的带我进入如何写点东西的正轨上。</p>
<p>8086方面的书籍，8086总设计师莫尔斯写的《8086初阶-体系结构、系统设计和程序设计入门》。王爽老师《汇编语言》也主要是讲8086的汇编的。80386的书籍不多，80386的设计师写的《Programing the 80386》一书，非常不错。中文版是93年出版的《保护方式下80386及其编程》一书，虽然没有备注是翻译，但我跟英文版对照后，确认就是翻译自《Programing the 80386》，主要是学习保护模式。</p>
<p>这里需要注意的是实模式与保护模式的差别，很多时候一开始如果研究的是8086的，往往需要转换下思维，最好的书籍依旧是《保护方式下80386及其编程》一书，于渊的《Orange’S 一个操作系统实现》细节上还是有点模糊。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最终操作系统并没有完整的实验下去，主要是因为最难的部分也是最容易忽略的如何在特定架构上如何开始，把这一步迈过去后，基本上跟大多操作系统讲的差不多了，主要部分就是使用C语言来实现。</p>
<p>虽然实验已经过去了几个月了，最近一直在看Java并发的东西，发现实际写过点操作系统还是很有帮助的，比如更能从CPU的角度来思考。</p>
]]></content>
  </entry>
  <entry>
    <title>《保护方式下的80386及其编程》笔记</title>
    <url>/2021/03/11/2021-03-11-programming-the-80386-notes/</url>
    <content><![CDATA[<p>《保护方式下的80386及其编程》即《Programming the 80386》的中文翻译版，不过当年并没有标注翻译出处。这本书对于写一个基于x86操作系统非常有用，另外对于研究早期的Linux内核也很有参考，因为林纳斯当年也是参考《Programming the 80386》这本书的，包括386BSD的作者也是参考这本书了。</p>
<p>这本书是了解80386的保护模式最好的书籍，关于8086的书籍和汇编语言资料不少，但是关于80386的保护模式书籍很少，很多后来的书籍的知识都是转来转去的，有些只是讲个大概，没有把细节说明清楚，往往是一知半解了。不同的是此书可以说是讲解非常细致，概念很清晰，主要是此书的作者是80386的总设计师，所以这本书如果讲不明白，那还有其他书籍吗。</p>
]]></content>
  </entry>
  <entry>
    <title>NASM 笔记</title>
    <url>/2021/03/22/2021-03-22-nasm-notes/</url>
    <content><![CDATA[<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>目前使用的是64位的Ubuntu环境，默认会编译成64位的，编译成32位的在参数上有些差异。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nasm -f elf32 foo.asm -o foo.o <span class="comment"># NASM编译成ELF32位目标文件</span></span><br><span class="line">gcc -m32 -g -c bar.c -o bar.o <span class="comment"># GCC编译成32的目标文件</span></span><br><span class="line">ld -m elf_i386 foo.o bar.o -o foobar <span class="comment"># 链接目标文件，生成执行文件</span></span><br></pre></td></tr></table></figure>

<h3 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h3><p>一些常用的GDB调试的命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> disassembly-flavor intel <span class="comment"># 默认AT&amp;T格式，可以设置为Intel格式</span></span><br><span class="line">disassemble _start <span class="comment"># 反汇编，这一步主要是为了后续设置断点用</span></span><br><span class="line"><span class="built_in">break</span> * _start + 10 <span class="comment"># 设置断点，此处是_start开始的第10行代码处</span></span><br><span class="line">run <span class="comment"># 执行程序，设置断点后会停在断点处</span></span><br><span class="line">step <span class="comment"># 单步调试，可以简写为s</span></span><br><span class="line">info registers <span class="comment"># 显示寄存器</span></span><br><span class="line">layout reg <span class="comment"># 一般我会使用这个</span></span><br><span class="line">q <span class="comment"># 退出程序</span></span><br><span class="line">x 0xffffd070 <span class="comment"># 查看0xffffd070地址处的内存</span></span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://samsclass.info/127/proj/ASM110.htm">ASM 110: Gdb (30 pts)</a><br><a href="https://deepzz.com/post/gdb-debug.html">GDB命令基础，让你的程序bug无处躲藏</a></p>
]]></content>
  </entry>
  <entry>
    <title>在CentOS 8上Mysql 8.0的主从配置实践</title>
    <url>/2021/01/05/2021-01-05-how-to-configure-mysql-8-master-slave-replication-on-centos-8/</url>
    <content><![CDATA[<p>主要试了下基于二进制日志文件的方法</p>
<h4 id="主库设置"><a href="#主库设置" class="headerlink" title="主库设置"></a>主库设置</h4><p>主要的坑，一般教程上写的是编辑<code>/etc/my.cnf</code>。安装的Mysql 8的配置略微有些问题，<code>my.cnf</code>文件导入的是另一配置<code>!includedir /etc/my.cnf.d</code>，所以以下配置我是写在了<code>/etc/my.cnf.d/mysql-server.cnf</code>里面。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">###主从数据库配置核心部分</span></span><br><span class="line"><span class="comment"># 设置同步的binary log二进制日志文件名前缀，默认为binlog</span></span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"><span class="comment"># 服务器唯一id，默认为1  主数据库和从数据库的server-id不能重复</span></span><br><span class="line">server-id=1          </span><br><span class="line"></span><br><span class="line"><span class="comment">###可选配置</span></span><br><span class="line"><span class="comment"># 需要主从复制的数据库</span></span><br><span class="line">binlog-do-db=<span class="built_in">test</span></span><br><span class="line"><span class="comment"># 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span></span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line"><span class="comment"># 为每个session分配的内存，在事务过程中用来存储二进制日志的缓存</span></span><br><span class="line">binlog_cache_size=1M</span><br><span class="line"><span class="comment"># 主从复制的格式（mixed,statement,row，默认格式是statement。建议是设置为row，主从复制时数据更加能够统一）</span></span><br><span class="line">binlog_format=row</span><br><span class="line"><span class="comment"># 设置二进制日志自动删除/过期的天数，避免占用磁盘空间。默认值为0，表示不自动删除。</span></span><br><span class="line">expire_logs_days=7</span><br><span class="line"><span class="comment"># 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></span><br><span class="line"><span class="comment"># 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span><br><span class="line">slave_skip_errors=1062</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>《Orange&#39;S:一个操作系统的实现》笔记</title>
    <url>/2021/03/24/2021-03-24-notes-on-oranges-an-operating-system-implementation/</url>
    <content><![CDATA[<h4 id="磁盘镜像"><a href="#磁盘镜像" class="headerlink" title="磁盘镜像"></a>磁盘镜像</h4><p>主要使用<code>bximage</code>这个工具。</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">bximage # 选择1，其次fd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>使用<code>dd</code>工具将讲<code>boot.bin</code>写入到软盘的第一个扇区，作为引导用。</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">dd if&#x3D;boot.bin of&#x3D;a.img bs&#x3D;512 count&#x3D;1 conv&#x3D;notrunc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>将数据拷贝到镜像的方法</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo mount -o loop xxx.img &#x2F;mnt&#x2F;floppy # 挂载，挂在失败的话在mnt目录下创建floppy文件夹
sudo cp xxx.com &#x2F;mnt&#x2F;floppy&#x2F;  -v # 拷贝文件
sudo umount &#x2F;mnt&#x2F;floppy # 卸载<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>我是在<code>Ubuntu 20.04.2 LTS</code>环境下编译</p>
<p>64位的问题</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">nasm -f elf32 foo.asm -o foo.o # NASM编译成ELF32位目标文件
gcc -m32 -g -c bar.c -o bar.o # GCC编译成32的目标文件
ld -m elf_i386 foo.o bar.o -o foobar # 链接目标文件，生成执行文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>编译C问题：<code>undefined reference to &#39;__stack_chk_fail&#39;</code>，需要在编译时加上参数<code>-fno-stack-protector</code>。</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">gcc -m32 -g -c -fno-stack-protector bar.c -o bar.o # 例子<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>编译第5章代码时，出现<code>disp_str</code>第二遍调用后报错的问题，网上找到的可以正常的代码。</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm"><span class="token comment">; ========================================================================</span>
<span class="token comment">;                  void disp_str(char * info);</span>
<span class="token comment">; ========================================================================</span>
<span class="token label function">disp_str:</span>
	push <span class="token register variable">ebp</span>
	push <span class="token register variable">esi</span>
	push <span class="token register variable">edi</span>
	push <span class="token register variable">eax</span>
	push <span class="token register variable">ebx</span>
	mov	<span class="token register variable">ebp</span>, <span class="token register variable">esp</span>

	mov	<span class="token register variable">esi</span>, <span class="token operator">[</span><span class="token register variable">ebp</span> <span class="token operator">+</span> <span class="token number">24</span><span class="token operator">]</span>	<span class="token comment">; pszInfo</span>
	mov	<span class="token register variable">edi</span>, <span class="token operator">[</span>disp_pos<span class="token operator">]</span>
	mov	<span class="token register variable">ah</span>, <span class="token number">0Fh</span>
<span class="token label function">.1:</span>
	lodsb
	test	<span class="token register variable">al</span>, <span class="token register variable">al</span>
	jz	.<span class="token number">2</span>
	cmp	<span class="token register variable">al</span>, <span class="token number">0Ah</span>	<span class="token comment">; 是回车吗?</span>
	jnz	.<span class="token number">3</span>
	push	<span class="token register variable">eax</span>
	mov	<span class="token register variable">eax</span>, <span class="token register variable">edi</span>
	mov	<span class="token register variable">bl</span>, <span class="token number">160</span>
	div	<span class="token register variable">bl</span>
	and	<span class="token register variable">eax</span>, <span class="token number">0FFh</span>
	inc	<span class="token register variable">eax</span>
	mov	<span class="token register variable">bl</span>, <span class="token number">160</span>
	mul	<span class="token register variable">bl</span>
	mov	<span class="token register variable">edi</span>, <span class="token register variable">eax</span>
	pop	<span class="token register variable">eax</span>
	jmp	.<span class="token number">1</span>
<span class="token label function">.3:</span>
	mov	<span class="token operator">[</span><span class="token register variable">gs</span>:<span class="token register variable">edi</span><span class="token operator">]</span>, <span class="token register variable">ax</span>
	add	<span class="token register variable">edi</span>, <span class="token number">2</span>
	jmp	.<span class="token number">1</span>

<span class="token label function">.2:</span>
	mov	<span class="token operator">[</span>disp_pos<span class="token operator">]</span>, <span class="token register variable">edi</span>

	pop <span class="token register variable">ebx</span>
	pop <span class="token register variable">eax</span>
	pop <span class="token register variable">edi</span>
	pop <span class="token register variable">esi</span>
	pop <span class="token register variable">ebp</span>
	ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h4 id="使用FreeDOS运行COM"><a href="#使用FreeDOS运行COM" class="headerlink" title="使用FreeDOS运行COM"></a>使用FreeDOS运行COM</h4><p>FreeDOS运行COM文件记录，主要是拷贝软盘里面，然后执行。</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo mount -o loop xxx.img &#x2F;mnt&#x2F;floppy # 挂载，挂在失败的话在mnt目录下创建floppy文件夹
sudo cp xxx.com &#x2F;mnt&#x2F;floppy&#x2F; # 拷贝文件
sudo umount &#x2F;mnt&#x2F;floppy # 卸载<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>网上书中的源码中的<code>freedos.img</code>并不包含<code>debug</code>这样的工具，不过<code>debug</code>并不能调试保护模式的代码。</p>
<p>在<code>bochsrc</code>配置文件中添加</p>
<pre class="line-numbers language-none"><code class="language-none">magic_break: enabled &#x3D; 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>最后在汇编代码需要断点的地方添加</p>
<pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">xchg <span class="token register variable">bx</span>, <span class="token register variable">bx</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在FreeDOS执行COM文件后，就会进入到bochs调试。</p>
<h3 id="Bochs"><a href="#Bochs" class="headerlink" title="Bochs"></a>Bochs</h3><p>需要注意的是执行<code>bochs</code>命令后，需要输入<code>c</code>，我第一次执行完毕后发现为什么没有画面呢？</p>
<p>调试命令</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sreg # 显示段寄存器的内容
info gdt  # 显示GDTR寄存器的内容
creg # 显示CR0寄存器的内容
print-stack # 查看栈的内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Mac-OS问题"><a href="#Mac-OS问题" class="headerlink" title="Mac OS问题"></a>Mac OS问题</h3><h4 id="编译-1"><a href="#编译-1" class="headerlink" title="编译"></a>编译</h4><p>当使用<code>make</code>编译代码时会报<code>ld: unknown option: -Ttext</code>的错误，查了下Mac下的ld没有这个功能选项，一种是在虚拟机下编译，另一种是使用brew安装<code>i386-elf-toolchain</code></p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">brew tap nativeos&#x2F;i386-elf-toolchain 
brew install i386-elf-binutils i386-elf-gcc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>安装完后需要讲Makefile文件中对应gcc以及ld都添加<code>i386-elf-</code>前缀。</p>
<h4 id="软盘操作问题"><a href="#软盘操作问题" class="headerlink" title="软盘操作问题"></a>软盘操作问题</h4><p>无法使用<code>mount</code>或<code>umount</code>之类的命令，好在可以使用Mac自带的磁盘工具打开软盘，将文件拷贝进去。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://techlog.cn/article/list/10183462">如何调试操作系统</a><br><a href="https://stackoverflow.com/questions/25634708/gnu-linker-equivalent-command-in-os-x">GNU Linker equivalent command in OS X</a></p>
]]></content>
  </entry>
  <entry>
    <title>Go学习笔记</title>
    <url>/2021/03/29/2021-03-29-go-notes/</url>
    <content><![CDATA[<p>开始用Go应该是17年底的时候，那会做游戏，后台是用Go写的，虽然我主要负责Unity客户端方面的工作，不过也是经常帮忙给后端的Go小伙解决一些问题，自己也写一些Go的小东西。</p>
<p>后来又做物流系统，重写系统时有考虑用Go，不过因为大部分的外部接口对接都是Java的，为了省事就使用了Java。不过如果是自己的项目的话，还是愿意用Go，毕竟Java还是有点重。</p>
<h4 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h4><p>原来有用过GoLand，为了轻量点，先用VS Code，众所周知的原因安装插件老失败，最后设置Go的代理就可以了。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">go <span class="built_in">env</span> -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure>

<h4 id="C程序员的礼物"><a href="#C程序员的礼物" class="headerlink" title="C程序员的礼物"></a>C程序员的礼物</h4><p>直接试着写个搜索二叉树，其实除了语法上跟C的一些类型定义次序上有点不习惯外，其他方面对于C程序员来说，还是熟悉的用法，比如指针的指针这样的概念，毕竟Go是原来C的那帮人搞的，兼顾C的同时也结合不少Python这样的现代语言的特性。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span> &#123;</span><br><span class="line">	data      <span class="type">int</span></span><br><span class="line">	leftNode  *Node</span><br><span class="line">	rightNode *Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">(tree **Node, value <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> *tree == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">var</span> tempNode Node</span><br><span class="line">		tempNode.data = value</span><br><span class="line">		*tree = &amp;tempNode</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (*tree).data &gt; value &#123;</span><br><span class="line">		insert(&amp;(*tree).leftNode, value)</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (*tree).data &lt; value &#123;</span><br><span class="line">		insert(&amp;(*tree).rightNode, value)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">perOrder</span><span class="params">(tree *Node)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> tree != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;data: %d\n&quot;</span>, tree.data)</span><br><span class="line">		perOrder(tree.leftNode)</span><br><span class="line">		perOrder(tree.rightNode)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> tree *Node</span><br><span class="line"></span><br><span class="line">	insert(&amp;tree, <span class="number">9</span>)</span><br><span class="line">	insert(&amp;tree, <span class="number">4</span>)</span><br><span class="line">	insert(&amp;tree, <span class="number">15</span>)</span><br><span class="line">	insert(&amp;tree, <span class="number">6</span>)</span><br><span class="line">	insert(&amp;tree, <span class="number">12</span>)</span><br><span class="line">	insert(&amp;tree, <span class="number">17</span>)</span><br><span class="line">	insert(&amp;tree, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">	perOrder(tree)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>一次语言间的性能对比</title>
    <url>/2021/04/02/2021-04-02-performance-comparison-between-programming-languages/</url>
    <content><![CDATA[<p>最近突然间想对比下几个语言间的性能，日常使用的是Java，但平时也会用Python，JavaScript，C，Go之类的语言。Java写项目真的也没有什么问题，成熟的生态圈，遇到问题很容易解决。不过写点小东西的时候，还是觉得Python比较好用，不过就是速度慢了点，很早之前写过一个游戏的移植，脚本语言重构真的是个大问题。Go在上家公司的时候也使用过，不过也都是小的测试了，并没有拿来写过完整点的项目。不过语言的简洁性和C的这种传承，还是很有好感，不过在当时重写公司系统时，最后还是用了Java，主要是大部分的对接都有Java的实现。C一直是我研究的语言，虽然实际写东西不多，但是却看了很多相关的书籍，另外最近研究操作系统和学习汇编语言后，对C的认识又有了新的认识，C的厉害地方就是简洁的设计，性能强大，他的诞生就是为写Unix，缺点是实用性不强，另外内存管理，实际上成熟的项目在内存管理上都有自己的框架，所以对于C&#x2F;C++之类的语言光学习了语言其实并不能做什么，离应用的距离还很远。</p>
<p>回到正题，我实际上想把Go作为业务研究的语言了，虽然脑海中一直印象他的性能不错，但具体表现怎样能，好像我也并不清楚。最后选择对比的语言是Java、Go、C、Rust四个语言，程序都是运行100000000循环，循环内执行冒泡排序。</p>
<h4 id="Java-代码"><a href="#Java-代码" class="headerlink" title="Java 代码"></a>Java 代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// 记录开始时间</span></span><br><span class="line">		<span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">		<span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">100000000</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">			<span class="type">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">			bubbleSort(arr);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 打印耗时时间</span></span><br><span class="line">		System.out.println(System.nanoTime() - start);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 排序</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; length - i; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (arr[j] &lt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">					<span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">					arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">					arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行时间</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">3052757121</span><br></pre></td></tr></table></figure>

<h4 id="Go-代码"><a href="#Go-代码" class="headerlink" title="Go 代码"></a>Go 代码</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	start := time.Now().UnixNano()</span><br><span class="line">	<span class="keyword">const</span> NUM <span class="type">int</span> = <span class="number">100000000</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; NUM; i++ &#123;</span><br><span class="line">		arr := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">		bubbleSort(arr)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 打印消耗时间</span></span><br><span class="line">	fmt.Println(time.Now().UnixNano() - start)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bubbleSort</span><span class="params">(arr []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="built_in">len</span>(arr)<span class="number">-1</span>; j++ &#123;</span><br><span class="line">		<span class="keyword">for</span> k := <span class="number">0</span>; k &lt; <span class="built_in">len</span>(arr)<span class="number">-1</span>-j; k++ &#123;</span><br><span class="line">			<span class="keyword">if</span> arr[k] &lt; arr[k+<span class="number">1</span>] &#123;</span><br><span class="line">				arr[k], arr[k+<span class="number">1</span>] = arr[k+<span class="number">1</span>], arr[k]</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行时间</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">3804215000 <span class="comment"># 纳秒</span></span><br></pre></td></tr></table></figure>


<h4 id="C-代码"><a href="#C-代码" class="headerlink" title="C 代码"></a>C 代码</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>* <span class="built_in">array</span>, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length <span class="number">-1</span> ; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j &lt; length <span class="number">-1</span> -i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">array</span>[j] &lt; <span class="built_in">array</span>[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> temp = <span class="built_in">array</span>[j];</span><br><span class="line">                <span class="built_in">array</span>[j] = <span class="built_in">array</span>[j + <span class="number">1</span>];</span><br><span class="line">                <span class="built_in">array</span>[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">t_val</span>;</span></span><br><span class="line">    gettimeofday(&amp;t_val, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;start, now, sec=%ld m_sec=%d \n&quot;</span>, t_val.tv_sec, t_val.tv_usec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000000</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="built_in">array</span>[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        <span class="type">int</span> length = <span class="keyword">sizeof</span>(<span class="built_in">array</span>)/<span class="keyword">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">        bubbleSort(<span class="built_in">array</span>, length);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">t_val_end</span>;</span></span><br><span class="line">    gettimeofday(&amp;t_val_end, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">t_result</span>;</span></span><br><span class="line">    timersub(&amp;t_val_end, &amp;t_val, &amp;t_result);</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> consume = t_result.tv_sec + (<span class="number">1.0</span> * t_result.tv_usec)/<span class="number">1000000</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;end.elapsed time= %fs \n&quot;</span>, consume);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行时间</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">start, now, sec=1617327646 m_sec=57219 </span><br><span class="line">end.elapsed time= 1.746955s </span><br></pre></td></tr></table></figure>

<h4 id="Rust代码"><a href="#Rust代码" class="headerlink" title="Rust代码"></a>Rust代码</h4><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::time::Instant;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">bubble_sort</span>&lt;T: <span class="built_in">Ord</span>&gt;(arr: &amp;<span class="keyword">mut</span> [T]) &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..arr.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">j</span> <span class="keyword">in</span> <span class="number">0</span>..arr.<span class="title function_ invoke__">len</span>() - <span class="number">1</span> - i &#123;</span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt; arr[j + <span class="number">1</span>] &#123;</span><br><span class="line">                arr.<span class="title function_ invoke__">swap</span>(j, j + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">start</span> = Instant::<span class="title function_ invoke__">now</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">_i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">100000000</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">numbers</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line">        <span class="title function_ invoke__">bubble_sort</span>(&amp;<span class="keyword">mut</span> numbers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;time cost: &#123;:?&#125; ms&quot;</span>, start.<span class="title function_ invoke__">elapsed</span>().<span class="title function_ invoke__">as_millis</span>()); <span class="comment">// ms</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;time cost: &#123;:?&#125; us&quot;</span>, start.<span class="title function_ invoke__">elapsed</span>().<span class="title function_ invoke__">as_micros</span>()); <span class="comment">// us</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;time cost: &#123;:?&#125; ns&quot;</span>, start.<span class="title function_ invoke__">elapsed</span>().<span class="title function_ invoke__">as_nanos</span>()); <span class="comment">// us</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行时间</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">time cost: 1763 ms</span><br><span class="line">time cost: 1763298 us</span><br><span class="line">time cost: 1763300912 ns</span><br></pre></td></tr></table></figure>

<h4 id="Swift-代码"><a href="#Swift-代码" class="headerlink" title="Swift 代码"></a>Swift 代码</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">bubbleSort</span>&lt;<span class="type">T</span>: <span class="type">Comparable</span>&gt;(<span class="params">with</span> <span class="params">array</span>: <span class="keyword">inout</span> [<span class="type">T</span>]) -&gt; [<span class="type">T</span>] &#123;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">..&lt;</span>array.count &#123;</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>array.count<span class="operator">-</span>i <span class="keyword">where</span> array[j] <span class="operator">&lt;</span> array[j<span class="operator">+</span><span class="number">1</span>] &#123;</span><br><span class="line">            array.swapAt(j, j<span class="operator">+</span><span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> start <span class="operator">=</span> <span class="type">DispatchTime</span>.now()</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">10000000</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> intArray <span class="operator">=</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">    bubbleSort(with: <span class="operator">&amp;</span>intArray)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> end <span class="operator">=</span> <span class="type">DispatchTime</span>.now()</span><br><span class="line"><span class="keyword">let</span> nanoTime <span class="operator">=</span> end.uptimeNanoseconds <span class="operator">-</span> start.uptimeNanoseconds</span><br><span class="line"><span class="keyword">let</span> timeInterval <span class="operator">=</span> <span class="type">Double</span>(nanoTime) <span class="operator">/</span> <span class="number">1_000_000_000</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Time: <span class="subst">\(timeInterval)</span> seconds&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>运行时间</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Time: 2.391004642 seconds</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>最早我对比的是Java和C，因为C是在Debug模式下跑的，反而比Java的慢，这个让我无法接受，不应该啊，后来让朋友跑了下，说应该用Release模式，这才反应过来，Release + O3优化后速度一下子就上来了，明显比Java快。Rust和C基本上都有Debug和Release的区分，现在看来Rust和C是一个级别，Java和Go是另一个档次上的同一级别。现在的Java运行默认是解释和编译的混合模式，所以速度上自然也不错，和Java对标的Go数据上来看略微差点，不过考虑到Java的运行时开销，Go其实还是很有诱惑的，后续有可能赶超Java。</p>
<p>企业开发的话用Java依旧最好的选择，个人创业项目的话用Go其实不错。对于Rust和C，不好选择C语法上比较简洁，很多语言特性跟底层更靠近，需要一定底层知识，写操作系统的话，C依旧是首选。Rust呢？个人觉得语法上比较复杂，混杂的语言特性过于多了，既想兼容底层有想高级别的抽象上靠近现代语言，不过这样的情况下依然保持高性能，还是很令人惊讶的。这个不好选，但Rust更充满诱惑，但复杂的语法让人畏惧。</p>
<p>Go语言虽然有C的传承，不过在类型定义上使用后缀的形式跟C语言正好相反，有时还是比较抵触的，另外因为GC的缘故，性能毕竟还是处于应用语言的级别。Rust太复杂，Swift没有用GC是引用计数，速度上比Rust差些，语法上其实跟Rust也差不多，不过作为一个曾经的iOS开发者，虽然Swift在一段时间大家都非常看好，不过最近几年过去了，其实Swift更多还是Oc的一种替代品，并没有突破苹果的范围，服务端也没有掀起什么风浪，Swift终究是Oc的替代品，也正因为此，他也跟苹果生态深度的绑定，成了某种无法脱颖而出的枷锁。</p>
<p>我心中语言其实就是C语言的改良版，内存管理上希望在语言层面上解决，比如用引用计数。语法上不要太加很多的特性，有Go的那样就可以了，但不是Go。不过目前来看是没有的，要不就是自己写一个，也不是没有可能。但实在要是也没有的Go和Rust总还是不错的选择。</p>
]]></content>
  </entry>
  <entry>
    <title>Eclipse笔记</title>
    <url>/2021/04/14/2021-04-14-eclipse-notes/</url>
    <content><![CDATA[<h4 id="为什么是Eclispe"><a href="#为什么是Eclispe" class="headerlink" title="为什么是Eclispe"></a>为什么是Eclispe</h4><p>最早接触Eclispe主要是用来开发Android应用，早期Android开发没有Android Studio，只能通过安装插件来开发。后来开发iOS后，Eclispe就用的少了，偶尔用来跑些简单的例子。后来做Java web，Eclispe又开始用了起来。</p>
<p>虽然很多人推荐IntelliJ IDEA，下载的试用了下，某些功能确实比Eclispe强大，但是Eclispe+Spring Tools，对目前的开发来说确实已经够用了，另外还是有点用不习惯，也没有Spring tools 这样的插件，所以干嘛花钱买个自己用不惯的东西呢？</p>
<h4 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h4><p>默认出现点号时才会出现自动补全的提示，不过可以设置，这里以Mac环境为例。</p>
<p>选择菜单<code>Perferences-&gt;Java-&gt;Content Assist-&gt;Auto activation triggers for Java</code>，默认为***.***，使用<code>.abcdefghijklmnopqrstuvwsyzABCDEFGHIJKLMNOPQRSTUVWSYZ_</code>替换，点击Ok。</p>
<h4 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h4><p><strong>EasyShell</strong>，这个工具主要是可以快速在当前目录打开Shell以及打开当前的文件夹。</p>
<h4 id="Maven-配置文件报错"><a href="#Maven-配置文件报错" class="headerlink" title="Maven 配置文件报错"></a>Maven 配置文件报错</h4><p>Maven使用本地Jar包后pom.xml显示错误，实际上本地Jar包是可以加载的，但总是提示错误。</p>
<blockquote>
<p>dependencies.dependency.systemPath’ for com.test:test:jar must specify an absolute path but is ${pom.basedir}&#x2F;libs&#x2F;test.jar</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;pom.basedir&#125;/libs/test.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个问题虽然不影响使用，但是老显示红叉，总感觉像去掉的。我原来使用Eclispe版本是2020-03 (4.15.0)，没有这个问题。但是使用最新的Eclipse版本2021-03 (4.19.0)有这个问题，包括Spring ToolSuite 4也有这个问题，我把4.15.0到4.19.0版本下载几个对比后，终于发现4.16.0开始都有问题，最后发现4.16.0版本Preferences多了一个XMl（Wide Web Developer）项，把子项Validation &amp; Resolution，Enable validation 禁用就没有了。</p>
<h4 id="升级与不升级"><a href="#升级与不升级" class="headerlink" title="升级与不升级"></a>升级与不升级</h4><p>如果现有环境稳定，那就最好不要升级。Eclispe好处是可以支持多个语言的开发，可以装一堆插件支持，但感觉只把它当作Java IDE就可以了，现在VS Code完全可以做其他语言的IDE。</p>
<p>之前的Eclispe很稳定，但一次插件的安装后，弹出需要更高版本的Eclispe，然后就无法启动了。一气之下，直接删除Eclispe，重新安装那些插件，结果发现2020-03 (4.15.0)下载的Spring Tools插件不能使用，发现Spring Tools 4已经出了，但是我当前这个版本无法使用。最后下载了Spring Tools官方出品的Eclispe整合版本Spring ToolSuite 4，就结果就出现了上面提到的Maven配置报错的问题，虽然问题解决了，但是还是提示插件安装也是要谨慎，可能升级不对就的折腾半天了。</p>
]]></content>
  </entry>
  <entry>
    <title>《孙正义传》读后感</title>
    <url>/2021/03/28/2021-03-28-thoughts-after-reading-the-biography-of-masayoshi-son/</url>
    <content><![CDATA[<p>对于孙正义和软银我还是蛮好奇的，首先我不太清楚这是个什么样的公司，“孙正义”三个字听着好像不像日本人。带着疑惑我迫不及待的购买了这本由彬本贵司撰写的《孙正义传》，大概用一天的时间很快的读完了，以下是一些总结。</p>
<p>孙正义是爷爷辈来到日本谋生的，到他这是第三代，日本姓是“安本”。作为归化的日本人，已经在文化上深深的日本化了，比如他对明治维新时代的倒幕派人士坂本龙马就很崇拜。因为早年在美国学习的经历让孙正义很有国际视野，无论是从技术还是经营上。</p>
<p>孙正义在美国有学习计算机，但总的来说他不属于技术牛人那种，属于有技术背景的商人。从他当年跟大学的教授合作开发翻译机，获得了夏普的资金，赚了笔钱，接着创办软银，开始做软件代理业务，看到这我才发现软银原来是这个意思。</p>
<p>软银这家公司感觉好像并没有创造什么，主要的业务在日本，包括软件流通、宽带、手机运营商，日本雅虎等。感触最深的就是他不停的收购公司，资金调度这块还是很牛了。另外孙正义也很有投资眼光，对雅虎和阿里巴巴这些企业的投资着实赚了不少。</p>
<p>总体来看就是要做朝阳产业，提前布局，而且布的都是大局，大资金的事。这点还是值得去学习，花点时间好好研究下未来的走向也许更重要。</p>
]]></content>
  </entry>
  <entry>
    <title>Brew实践</title>
    <url>/2021/04/16/2021-04-16-brew-practices/</url>
    <content><![CDATA[<p>Mac上安装软件基本上都在使用Brew，做一些记录。</p>
<p>###常用命令</p>
<p>brew info 有些软件长时间不用了，记不起来命令的使用，用这个可以查到如何使用。</p>
<p>###常见问题</p>
<h4 id="更新慢"><a href="#更新慢" class="headerlink" title="更新慢"></a>更新慢</h4><p>执行<code>brew update</code>时很慢的问题，主要是是Github访问慢的缘故，设置从镜像拉取，基本上可以解决这个问题。用了中科大的源，亲测速度感刚的。</p>
<h5 id="替换brew-git"><a href="#替换brew-git" class="headerlink" title="替换brew.git"></a>替换<code>brew.git</code></h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span></span><br><span class="line">git remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br></pre></td></tr></table></figure>

<h5 id="替换homebrew-core-git"><a href="#替换homebrew-core-git" class="headerlink" title="替换homebrew-core.git"></a>替换<code>homebrew-core.git</code></h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span>/Library/Taps/homebrew/homebrew-core</span><br><span class="line">git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br></pre></td></tr></table></figure>

<h5 id="替换homebrew-cask-git"><a href="#替换homebrew-cask-git" class="headerlink" title="替换homebrew-cask.git"></a>替换<code>homebrew-cask.git</code></h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span>/Library/Taps/homebrew/homebrew-cask</span><br><span class="line">git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br></pre></td></tr></table></figure>

<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://zhuanlan.zhihu.com/p/351199589">brew update 更新时 shallow clone</a><br><a href="https://www.jianshu.com/p/62f1b963baa6">mac使用brew update无反应,更新慢解决办法</a></p>
]]></content>
  </entry>
  <entry>
    <title>学习Docker使用</title>
    <url>/2021/04/16/2021-04-16-learn-docker/</url>
    <content><![CDATA[<p>去年年底的时候，当时有简单的研究下Docker，不过只是下载了一些类似MongoDB的镜像运行了下，感觉Docker非常适合安装这些软件。最近开始看Kubernetes，Docker的研究难免，那么如何把现有项目打包成一个Docker镜像以及运行，去年好像有简单的试下，不过有点遗忘，再次运行发现一些问题。</p>
<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>这里运行Flask的一个简单例子，只为演示。创建一个文件flask_test的文件夹，</p>
<p>目录文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">app.py</span><br><span class="line">requirements.txt</span><br><span class="line">Dockerfile</span><br></pre></td></tr></table></figure>

<p><em><strong>app.py</strong></em>，默认host是127.0.0.1，这里有个问题就是打包成镜像，无法访问端口。在mac和linux都一样，具体可以参考这篇文章<a href="https://pythonspeed.com/articles/docker-connection-refused/">《Connection refused? Docker networking and how it impacts your image》</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure>

<p><em><strong>requirements.txt</strong></em>，这个主要是放置python依赖库，目前只有flask一项。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flask</span><br></pre></td></tr></table></figure>

<p><em><strong>Dockerfile</strong></em>，这个是Build Docker的配置文件，<code>EXPOSE 5000</code>这个是指定容器内部的端口的，在Mac使用Docker客户端启动镜像时会有出现在设置里面。在Linux上构建镜像时出现下载python依赖https的错误<code>SSL: CERTIFICATE_VERIFY_FAILED</code>，需要去掉验证，<code>RUN pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org -r requirements.txt</code>，下面这个是在Mac上可以运行的配置。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">FROM python:3.9</span><br><span class="line">WORKDIR /code</span><br><span class="line">EXPOSE 5000</span><br><span class="line"></span><br><span class="line">COPY requirements.txt ./</span><br><span class="line">RUN pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line">COPY . .</span><br><span class="line"></span><br><span class="line">CMD [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;app.py&quot;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h4><p>构建Docker镜像，在当前目录运行该命令，记得不要忽略这个<code>.</code>，另外镜像的名字不能出现大写，我一直开始写成<code>testFlask</code>，结果构建失败。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo docker build -t <span class="string">&#x27;testflask&#x27;</span> .</span><br></pre></td></tr></table></figure>

<p>####运行<br>下面这个是以后台形式运行容器，<code>8000</code>是外部的访问端口，<code>5000</code>是容器内的端口。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -p 8000:5000 -d testflask</span><br></pre></td></tr></table></figure>

<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p>Mac上我会用Docker Desktop，不过Linux上还是命令行是王道。主要记几个常用的命令。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker ps <span class="comment"># 列出运行的容器</span></span><br><span class="line">docker images <span class="comment"># 列出当前的所有镜像</span></span><br><span class="line">docker <span class="built_in">rm</span> 容器ID <span class="comment"># 删除指定的容器</span></span><br><span class="line">docker rmi 镜像ID <span class="comment"># 删除指定的镜像</span></span><br></pre></td></tr></table></figure>

<h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>目前打包出的镜像居然有900多M，只有一个python和flask的依赖，觉得可能还是研究的不够。通过这个例子，发现还是得找本Docker的书籍系统的研究下，问题解决了，但是缺乏理论依据。</p>
<h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p>因为初次接触docker，后来发现可以使用基础版本，修改Dockerfile文件<code>FROM python:3.9-alpine</code>，最后打包后50M。</p>
]]></content>
  </entry>
  <entry>
    <title>学习Kubernetes</title>
    <url>/2021/04/18/2021-04-18-learn-kubernetes/</url>
    <content><![CDATA[<p>学习Docker后，发现还是得学习下k8s，目前使用Spring Cloud，引入k8s后原来现有的架构确实会有些变化，比如k8s的服务与Spring Eureka实际上有些功能相似的地方。最早我打算使用微服务的时候也是看中可以使用其他语言，但实际上使用了Eureka后，发现用其他语言还是有困难的，Java依旧是服务的首选。引入k8s后这似乎成为了一些可能，不过目前还没有使用来着。</p>
<h4 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h4><p>关于k8s的书籍目前只买了《Kubernetes实战》，之前也是选了几本，但这本当时一看就觉得干货很多，不过在解决细节问题时还是依赖网路了，不过这次可能错了，关于k8s的资料网上的还是太少，解决细节的问题最后还是依靠这本书。这本书在理论和细节方面结合的很好。</p>
<h4 id="使用本地镜像"><a href="#使用本地镜像" class="headerlink" title="使用本地镜像"></a>使用本地镜像</h4><p>我用的<code>minikube</code>，本地构建的doker镜像，我并没有推送到docker的镜像服务器，打出的docker镜像，其实还是蛮大的，Python和Flask，只是个简单的Hello World的例子，有800多M。再将这个推送到docker镜像服务器太慢了，实际我根本就没有成功，但拉取镜像速度还不错。</p>
<p>一开始我使用<code>kubectrl run</code>创建Pods。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectrl run testflask --image=testflask --port=5000 --generator=run/v1</span><br></pre></td></tr></table></figure>

<p>上面这种方式还是有局限，网上说要把<code>imagePullPolicy</code>设置成<code>IfNotPresent</code>或者<code>Never</code>。但是怎么设置？网上的博文根本不说，最后还是从《Kubernetes实战》这书找到答案，使用配置文件来创建，创建一个<code>flasktest.yaml</code>的配置文件。这里需要注意的是配置文件中一定要使用空格缩进而不是Tab，貌似我用的vs code和textmate都是使用Tab缩进。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flasktest</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">testflask</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">flasktest-container</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span> <span class="comment"># 拉取的策略</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">5000</span> <span class="comment"># 容器的端口</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure>

<p>通过配置文件来创建pods</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl create -f flasktest.yaml <span class="comment"># 通过配置文件创建pods</span></span><br></pre></td></tr></table></figure>

<p>最后发现还是有问题，这个镜像始终还是无法拉下来，网上搜索半天也没有找到个解决方案，最后打算直接使用<code>docker</code>的公共镜像<code>docker/getting-started</code>，估计是网络的问题，始终没有拉取下来。我一直把<code>minikube</code>的当成本地的了，<code>docker</code>也是共用一个，实际上犯了个严重的认知错误，<code>minikube</code>在VirtualBox创建了一个<code>minikube</code>虚拟机在运行，<code>docker</code>肯定与我本地的不是一个，《Kubernetes实战》书中提供了一种把本地的docker复制到<code>minikube</code>虚拟机中<code>docker</code>镜像库的方法。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker save testflask | (<span class="built_in">eval</span> $(minikube docker-env) &amp;&amp; docker load)</span><br></pre></td></tr></table></figure>

<p>可以使用<code>minikube ssh</code>登录到<code>minikube</code>虚拟机中，查看<code>docker</code>镜像是否已经复制过去了。最后顺利启动了，不过怎么访问服务呢？</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl expose rc flasktest --<span class="built_in">type</span>=LoadBalancer --name flasktest-http</span><br></pre></td></tr></table></figure>

<p>不过这里也个问题，提示<code>replicationcontrollers &quot;flasktest&quot; not found</code>。其实命令<code>kubectrl run testflask --image=testflask --port=5000 --generator=run/v1</code>中，<code>--generator=run/v1</code>是创建<code>replicationcontroller</code>的，但我使用的是配置文件创建，问题不大，修改下配置文件。如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicationController</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">flasktest</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">flasktest</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">flasktest</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">        <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">testflask</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">flasktest-container</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">5000</span></span><br><span class="line">            <span class="attr">protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure>

<p>重新创建，再启动服务，服务时启动了，不过还是有问题，使用<code>minikube</code>没有外部的ip的访问，需要使用如下命令。不过这个端口是随机的，跟原来用docker的那个不太一样。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">minikube service flasktest-http</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>网络的问题使本来简单的入门变得复杂，另外k8s的资料目前确实不是很多，一些细节网上的很少有人总结出来。不过感觉方案虽好，但是镜像大，以及可能要自己部署私有的镜像，再到其他的，其实投入还是蛮多的。</p>
]]></content>
  </entry>
  <entry>
    <title>学习Docker使用二</title>
    <url>/2021/04/19/2021-04-19-learn-docker-2/</url>
    <content><![CDATA[<p>打包现有Java工程的Jar到Docker镜像，也是遇到了问题。</p>
<h4 id="不熟悉Dockerfile"><a href="#不熟悉Dockerfile" class="headerlink" title="不熟悉Dockerfile"></a>不熟悉Dockerfile</h4><h6 id="COPY-源-目标"><a href="#COPY-源-目标" class="headerlink" title="COPY 源 目标"></a>COPY 源 目标</h6><p>一开始把源和目标的顺序给弄反了，但是还在镜像中有那个文件，结果执行<code>java -jar xxx.jar</code>老提示<code>Error: Unable to access jarfile xxx.jar</code>。最后登录到容器内部发现jar的文件大小不对，最后才反应过来把顺序弄反了。</p>
<h4 id="登入容器内部"><a href="#登入容器内部" class="headerlink" title="登入容器内部"></a>登入容器内部</h4><p>一开始为了诊断Java运行Jar文件不成功的问题，我就想看看容器内的文件是否已经在。最后用如下命令，登入容器，这个还是比较有用，不过应该去掉镜像的<code>CMD</code>命令。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -t -i xxx_container /bin/bash</span><br></pre></td></tr></table></figure>

<h4 id="镜像大小"><a href="#镜像大小" class="headerlink" title="镜像大小"></a>镜像大小</h4><p>一开始用的<code>FROM openjdk:8</code>，打出的镜像有800多M，后来使用<code>FROM openjdk:8-jdk-alpine</code>，大小150多M，我的Jar包实际只有不到50M的样子，所以还是比较大了。</p>
]]></content>
  </entry>
  <entry>
    <title>Spring Boot使用ELK</title>
    <url>/2021/04/23/2021-04-23-springboot-elk/</url>
    <content><![CDATA[<p>是在Mac环境下跑的例子。</p>
<h4 id="安装ELK相关软件"><a href="#安装ELK相关软件" class="headerlink" title="安装ELK相关软件"></a>安装ELK相关软件</h4><p>ELK主要指Elasticsearch、Logstash、Kibana，使用<code>elastic.co</code>提供的安装指南，使用Brew安装。</p>
<p>切换Tab</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew tap elastic/tap</span><br></pre></td></tr></table></figure>

<p>安装软件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew install elastic/tap/elasticsearch-full  <span class="comment"># 安装Elasticsearch</span></span><br><span class="line">brew install elastic/tap/logstash-full <span class="comment"># Logstash</span></span><br><span class="line">brew install elastic/tap/kibana-full <span class="comment"># Kibana</span></span><br></pre></td></tr></table></figure>

<p>可以在前台或者后台启动软件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew services start elastic/tap/elasticsearch-full <span class="comment"># 后台启动</span></span><br><span class="line">elasticsearch <span class="comment"># 前台启动</span></span><br><span class="line"></span><br><span class="line">brew services start elastic/tap/logstash-full</span><br><span class="line">logstash</span><br><span class="line"></span><br><span class="line">brew services start elastic/tap/kibana-full</span><br><span class="line">kibana</span><br></pre></td></tr></table></figure>

<h4 id="Spring-Boot配置"><a href="#Spring-Boot配置" class="headerlink" title="Spring Boot配置"></a>Spring Boot配置</h4><p>Maven添加Logstash依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.logstash.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在Resources目录下添加<code>logback-spring.xml</code>配置文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;include resource=<span class="string">&quot;org/springframework/boot/logging/logback/base.xml&quot;</span> /&gt;</span><br><span class="line">    &lt;appender name=<span class="string">&quot;LOGSTASH&quot;</span> class=<span class="string">&quot;net.logstash.logback.appender.LogstashTcpSocketAppender&quot;</span>&gt;</span><br><span class="line">    	&lt;!-- 配置输出地址 --&gt;</span><br><span class="line">        &lt;destination&gt;127.0.0.1:4560&lt;/destination&gt;</span><br><span class="line">        &lt;!-- 日志输出编码 --&gt;</span><br><span class="line">        &lt;encoder charset=<span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">                class=<span class="string">&quot;net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder&quot;</span>&gt;</span><br><span class="line">            &lt;providers&gt;</span><br><span class="line">                &lt;timestamp&gt;</span><br><span class="line">                    &lt;timeZone&gt;UTC&lt;/timeZone&gt;</span><br><span class="line">                &lt;/timestamp&gt;</span><br><span class="line">                &lt;pattern&gt;</span><br><span class="line">                    &lt;pattern&gt;</span><br><span class="line">                        &#123;</span><br><span class="line">                        <span class="string">&quot;logLevel&quot;</span>: <span class="string">&quot;%level&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;serviceName&quot;</span>: <span class="string">&quot;<span class="variable">$&#123;springAppName:-&#125;</span>&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;pid&quot;</span>: <span class="string">&quot;<span class="variable">$&#123;PID:-&#125;</span>&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;thread&quot;</span>: <span class="string">&quot;%thread&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;class&quot;</span>: <span class="string">&quot;%logger&#123;40&#125;&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;rest&quot;</span>: <span class="string">&quot;%message&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &lt;/pattern&gt;</span><br><span class="line">                &lt;/pattern&gt;</span><br><span class="line">            &lt;/providers&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line">    &lt;root level=<span class="string">&quot;INFO&quot;</span>&gt;</span><br><span class="line">        &lt;appender-ref ref=<span class="string">&quot;LOGSTASH&quot;</span> /&gt;</span><br><span class="line">        &lt;appender-ref ref=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span><br><span class="line">    &lt;/root&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>
<p>配置Logstash，创建一个<code>logstash-sample.conf</code>文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    mode =&gt; &quot;server&quot;</span><br><span class="line">    host =&gt; &quot;0.0.0.0&quot;</span><br><span class="line">    port =&gt; 4560</span><br><span class="line">    codec =&gt; json</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output&#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">     hosts =&gt; [&quot;http://localhost:9200&quot;] # Elasticsearch 地址</span><br><span class="line">     index =&gt; &quot;spring_cms-%&#123;+YYYY.MM.dd&#125;&quot; # 这里我用spring_cms，可以替换为自己的。需要注意ES关于索引的命名规范</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用配置文件重启Logstash服务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">logstash  -f logstash-sample.conf</span><br></pre></td></tr></table></figure>

<p>最后在项目中输出一段测试日志</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.info(<span class="string">&quot;Hello，ELK&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>最后在Kibana创建索引就应该能看到日志了。</p>
<h4 id="额外工具"><a href="#额外工具" class="headerlink" title="额外工具"></a>额外工具</h4><p>一开始发现Kibana中没有数据，猜测Elasticsearch没有收到数据，最后用到了<a href="https://github.com/mobz/elasticsearch-head">ElasticSearch head</a>这个可以查看Elasticsearch存储的工具，具体安装可以参考Github的说明。</p>
<p>运行这个工具遇到问题，发现ElasticSearch连接不上，原来是跨域访问的问题，使用brew安装ElasticSearch后会有如下目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Data:    /usr/local/var/lib/elasticsearch/elasticsearch_xxxx/ # xxxx此处是你自己的电脑名</span><br><span class="line">Logs:    /usr/local/var/log/elasticsearch/elasticsearch_xxxx.log # xxxx此处是你自己的电脑名</span><br><span class="line">Plugins: /usr/local/var/elasticsearch/plugins/</span><br><span class="line">Config:  /usr/local/etc/elasticsearch/</span><br></pre></td></tr></table></figure>

<p>编辑配置文件<code>nano /usr/local/etc/elasticsearch/elasticsearch.yml</code>，添加如下配置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure>
<p>最后就可以正常访问了。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>使用ELK访问日志确实很方便，实际开发中可能会使用云服务商提供ELK服务。</p>
]]></content>
  </entry>
  <entry>
    <title>Spring Boot使用Elasticsearch</title>
    <url>/2021/04/26/2021-04-26-springboot-elasticsearch/</url>
    <content><![CDATA[<p>主要是想把Elasticsearch整合到当前的系统中，用来搜索文章。</p>
<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p><em>Elasticsearch 7.12.0</em><br><em>Logstash 7.12.0</em><br><em>Mysql 8.0</em>  </p>
<h4 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h4><p>把Elasticsearch整合到现有系统意味需要把当前要搜索的数据添加到Elasticsearch里面，这就有个数据同步问题。因为是测试工程使用的是Logstash的全量数据同步。Logstash的新版本已经包含了Jdbc的插件，所以不需要安装。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  jdbc &#123;</span><br><span class="line">      # myslq驱动，可以官网下载，我用的是Maven依赖已经下载的Jar文件</span><br><span class="line">      jdbc_driver_library =&gt; &quot;&quot;</span><br><span class="line">      # Mysql驱动类全类名，注意mysql8.x以上需要加cj</span><br><span class="line">      jdbc_driver_class =&gt; &quot;com.mysql.cj.jdbc.Driver&quot;</span><br><span class="line">      # mysql连接url</span><br><span class="line">      jdbc_connection_string =&gt; &quot;&quot;</span><br><span class="line">      # mysql 用户名</span><br><span class="line">      jdbc_user =&gt; &quot;&quot;</span><br><span class="line">      # mysql 密码</span><br><span class="line">      jdbc_password =&gt; &quot;&quot;</span><br><span class="line">      # 设置定时任务，多久执行一次查询，默认一分钟，需要无延迟可使用schedule =&gt; &quot;* * * * * *&quot;</span><br><span class="line">      schedule =&gt; &quot;* * * * *&quot;</span><br><span class="line">      # 清空上次的sql_last_value记录</span><br><span class="line">      clean_run =&gt; true</span><br><span class="line">      # 要执行的sql（同步）语句，替换成你自己的sql</span><br><span class="line">      statement =&gt; &quot;SELECT * FROM t_article&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">   elasticsearch &#123;</span><br><span class="line">      # es主机和端口</span><br><span class="line">      hosts =&gt; [&quot;127.0.0.1:9200&quot;]</span><br><span class="line">      # 同步数据在ES的索引名称，替换为你自己的。</span><br><span class="line">      index =&gt; &quot;my-cms&quot;</span><br><span class="line">      # es文档的id，表示使用mysql表的id</span><br><span class="line">      document_id =&gt; &quot;%&#123;id&#125;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>生产环境的数据同步可以参考<a href="https://help.aliyun.com/document_detail/146038.html?spm=a2c4g.11186623.6.784.8fe41c61aTodOu">阿里云Elasticsearch</a></p>
<p>参考:<br><a href="https://www.elastic.co/guide/en/logstash/current/plugins-inputs-jdbc.html">Jdbc input plugin</a></p>
<h4 id="Spring-Boot配置"><a href="#Spring-Boot配置" class="headerlink" title="Spring Boot配置"></a>Spring Boot配置</h4><p>添加Maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加Elasticsearch客户端配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableElasticsearchRepositories(basePackages = &quot;io.pratik.elasticsearch.repositories&quot;)</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123; &quot;io.pratik.elasticsearch&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ElasticsearchClientConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractElasticsearchConfiguration</span> &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="keyword">public</span> RestHighLevelClient <span class="title function_">elasticsearchClient</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// 配置连接信息</span></span><br><span class="line">		<span class="keyword">final</span> <span class="type">ClientConfiguration</span> <span class="variable">clientConfiguration</span> <span class="operator">=</span> ClientConfiguration.builder().connectedTo(<span class="string">&quot;localhost:9200&quot;</span>)</span><br><span class="line">				.build();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> RestClients.create(clientConfiguration).rest();</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个很重要，不添加的话无法使用<span class="doctag">@Filed</span>注解</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> EntityMapper <span class="title function_">entityMapper</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ElasticsearchEntityMapper</span> <span class="variable">entityMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ElasticsearchEntityMapper</span>(</span><br><span class="line">                elasticsearchMappingContext(), <span class="keyword">new</span> <span class="title class_">DefaultConversionService</span>()</span><br><span class="line">        );</span><br><span class="line">        entityMapper.setConversions(elasticsearchCustomConversions());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> entityMapper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试文章类，必须要加<code>type=&#39;_doc&#39;</code>，不然无法使用。另外遇到的问题是我数据库的日期用的是<code>Date</code>话，一直提示解析错误，最后使用<code>LocalDateTime</code>后就好了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Document(indexName = &quot;my-cms&quot;, type = &quot;_doc&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EsArticle</span> &#123;</span><br><span class="line">	<span class="meta">@Id</span> <span class="comment">// org.springframework.data.annotation.Id</span></span><br><span class="line">	<span class="keyword">private</span> Integer id; <span class="comment">// 文章ID</span></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Field(type = FieldType.Text, analyzer = &quot;ik_max_word&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String title; <span class="comment">// 文章标题</span></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Field(name = &quot;content&quot;, type = FieldType.Text, analyzer = &quot;ik_max_word&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String articleContent; <span class="comment">// 文章正文内容</span></span><br><span class="line"></span><br><span class="line">	<span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">	<span class="meta">@Field(name = &quot;create_time&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> LocalDateTime createTime; <span class="comment">// 文章创建时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建<code>Repository</code>类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ElasticArticleRepository</span> <span class="keyword">extends</span> <span class="title class_">ElasticsearchRepository</span>&lt;EsArticle, Integer&gt; &#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生成<code>Controller</code>，使用<em>Postman</em>测试接口是否正常工作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/article&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SearchController</span> &#123; </span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticArticleRepository elasticRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/search&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;EsArticle&gt; <span class="title function_">handleSearchRequest</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam</span> Map&lt;String, Object&gt; requestParam)</span> &#123;</span><br><span class="line">        <span class="type">BoolQueryBuilder</span> <span class="variable">queryBuilder</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line">        <span class="comment">// 构造ES查询条件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">keyword</span> <span class="operator">=</span> (String) requestParam.get(<span class="string">&quot;keyword&quot;</span>);</span><br><span class="line">        queryBuilder.should(QueryBuilders.matchPhraseQuery(<span class="string">&quot;title&quot;</span>, keyword))</span><br><span class="line">                .should(QueryBuilders.matchPhraseQuery(<span class="string">&quot;content&quot;</span>, keyword));</span><br><span class="line"> </span><br><span class="line">        <span class="type">StopWatch</span> <span class="variable">watch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">        watch.start(); <span class="comment">// 开始计时</span></span><br><span class="line"> </span><br><span class="line">        Page&lt;EsArticle&gt; articles = (Page&lt;EsArticle&gt;)</span><br><span class="line">                elasticRepository.search(queryBuilder);  <span class="comment">// 检索数据</span></span><br><span class="line"> </span><br><span class="line">        watch.stop();  <span class="comment">// 结束计时</span></span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;数据检索耗时：%s ms&quot;</span>,</span><br><span class="line">                watch.getTotalTimeMillis()));</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> articles.getContent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>谈谈冥想</title>
    <url>/2021/04/26/2021-04-26-talk-about-meditatio/</url>
    <content><![CDATA[<p>坚持冥想已经有六七年了，略有点经验与大家分享下，一家之言，只供参考。</p>
<h4 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h4><p>冥想多长时间比较好？我目前是30分钟，之前一段时间都是1个小时，改成30分钟是因为后来找的工作太远，个人建议不低于30分钟为好。</p>
<p>什么时间冥想比较好？我是早上冥想了，下午很少冥想。首先早上精神比较好，不容易发困，下午冥想的时候往往劳累一天状态不是很好。早上冥想是因为时间比较好安排，只要你起的早，时间都是可以挪出来的。</p>
<h4 id="姿势"><a href="#姿势" class="headerlink" title="姿势"></a>姿势</h4><p>首推双盘，其次单盘，最不好散盘。能单盘不要散盘，能双盘不要单盘。单盘基本上大家都可以，双盘如果身体不够瘦或者腿实在太硬，还是有点难度的。不过双盘只是时间问题了，我单盘五年一直双盘不上，基本上都已经放弃对双盘的想法，不过五年后的某天我居然可以双盘了，所以现在觉得双盘这个只是时间的问题，可能每个人不太一样，不过就是不要太主观的设置一个时间点，顺其自然就好，功夫到了自然盘的上。</p>
<p>双盘和单盘冥想有什么差别，进入状态后其实差别不大，不过双盘确实比较稳。双盘比较难，很大程度是因为在一开始不熟练的情况下，疼痛会干扰到无法安心坐下去。双盘我目前采用先盘左腿，再盘右腿的吉祥坐，另外手印也采用右手放在左手掌的方式，目前自我感觉这样的姿势可以很好的安心双盘。</p>
<p>调身，总的来说身体瘦一点，下午少吃点，对于盘腿还是有帮助的。我断食21天时，双盘完全不是问题，所以还是不要自己太胖。</p>
<h4 id="观呼吸"><a href="#观呼吸" class="headerlink" title="观呼吸"></a>观呼吸</h4><p>干坐着，心可能会更乱，一般人都会觉得坐不了多久，自己就想不坐了。我早期接触的时候，也是不得其法，一开始就那样坐着，时间比较短。后来去了禅寺的禅堂坐了几次香（打坐），下午香时间最长一个半小时，当时还是散盘，到最后腿巨痛，虽然坚持了下来，后来问一个坐的比较好的小姑娘，原来她在用数呼吸，我也学着使用这个方式。数呼吸，一呼一吸算一下，从1到10，重复，实际上比较难，你会发现你的心会莫名的飞出个念头，打乱数呼吸的节奏。不过你只要持续的数，专注了，我当时觉得时间一下子变短了，腿也不痛了，所以数呼吸对于摄心还是很有效果了。结果一数就是到现在了，关于数呼吸详细的内容可以参阅南传佛教的典籍《清静道论》。</p>
<h4 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h4><p>不管什么原因让你开始冥想，但不要对冥想有一个心理期许，放长远一点，用余生去练习，每个阶段你能收获什么取决于你走的有多远，而多远不是你主观可以预判的。虎头蛇尾的冥想我也见过几个，其实冥想对我而言更多获得了一种内心的平静，而我觉得这就够了。但很多人，不是这样想的，期许太多，最终没有能坚持下来。坚持冥想，全身心的投入到工作，让冥想成为一种习惯，不要太热衷，也不要太懈怠。</p>
<h4 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h4><p>最好的依旧是坚持练习，少看书，偶尔看一点就可以了，多了反而是障碍。偏方法的推荐《清静道论》或者南传佛教相关的书籍，不过《清静道论》是根本。心态类的推荐《禅者的初心》，心态要对，这很关键。</p>
<h4 id="如何开始？"><a href="#如何开始？" class="headerlink" title="如何开始？"></a>如何开始？</h4><p>去禅寺的禅堂学习冥想是我走过的路，正规的禅寺有一套很完备的机制，让你短时间内可以上路。不过很多人在禅寺的时候可以冥想，但出了禅寺就不行了，总是找各种理由。禅寺只是开始的地方，冥想之路才刚开始。</p>
]]></content>
  </entry>
  <entry>
    <title>Octopress升级</title>
    <url>/2021/05/02/2021-05-02-octopress-upgrade/</url>
    <content><![CDATA[<p>升级其他软件的时候居然把Ruby版本升级到了3.0，而Octopress依赖的Jekyll的版本是2.0，对Ruby版本有限制，新版本用不了。本来想换个静态博客的框架来着，想着自己好歹也是全栈工程师，自己升级下吧。</p>
<p>Octopress其实是基于Jekyll的定制静态博客框架，生成静态内容主要依赖于Jekyll了。看了下Jekyll已经到4.0了，干脆直接升级到4.0了。不过发现一些问题，4.0后放弃了对RDiscount、Pygments的支持，默认的Markdown解析用的是Kramdown。Octopress分别使用了RDiscount、Pygments，所以这块只能弃用了，改用Kramdown。</p>
<p>升级后发现代码高亮有点问题，4.0因为弃用了Pygments，所以只能使用默认的Rouge。Octopress自己实现了一个代码高亮的样式，但是有兼容问题，最后直接弃用。使用Rouge生成Github的样式，最后修改了下，最终变成现在的样子，总之还是不太喜欢之前的暗背景的样式。</p>
<p>生成文章方面，因为Jekyll的一些变更，遇到三个问题，首先是文章列表是生序排序的，修改了下也好了。其次发现首页没有文章，主要是没有安装jekyll-paginate的缘故。最后就是生成的文章没有时间，Octopress自定义了一个时间格式的钩子，但是没有起作用，最后直接使用原生的方式解决了。</p>
<p>博客预览使用<code>rake preview</code>会报错，最后直接在Public目录下起了个Python的Web服务器，这个并不影响使用。 </p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>现在还在用Octopress人确实不多了，多半都是不更新的僵尸博客了。其实这些静态博客解决方案原理大同小异的，之前有人吐槽Octopress生成博客文章慢，实际上主要是Jekyll慢了，不过现在都4.0了，目前我觉得速度还是能接受的。</p>
<p>既然Octopress作者都不维护了，想着后续问题修复的差不多了，把修改的版本放出了，也算是尽一份力吧。</p>
<p>参考:<br><a href="https://jekyllrb.com/news/2019/08/20/jekyll-4-0-0-released/">Jekyll 4.0.0 Released</a></p>
]]></content>
  </entry>
  <entry>
    <title>关于RSS的思考</title>
    <url>/2021/05/04/2021-05-04-thinking-about-rss/</url>
    <content><![CDATA[<h4 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h4><p>17年的时候为了练习Swift，也想验证下自己对于产品方面的想法，当时流行的应用都是通过爬虫抓取内容网站的数据，清洗数据后再通过推荐引擎展示给用户，当时我们公司也做的是这类应用，只不过后来没有成功。作为练手的业余项目，我并没有打算也做类似的项目，那会我主要做iOS客户端，对于服务端也不是很在行，而且当时这类应用有个问题是，你需要搜集大量的内容网站，可这一定是用户喜欢的吗？当时想关于用户喜欢什么样的内容让用户自己去找吧，而我只提供一个工具，最后选定了RSS阅读器。在App Store上找了一些RSS应用调研，很多应用是国外人开发的，交互上不太符合国人的习惯，另外不少应用需要注册后才能使用，当然有些还是付费的。觉得还是有改进的空间的，目标是开发一款简单的应用，首先不需要登录注册之类的，用户添加自己的RSS源，然后拉取数据，展示详情，最后这是一款免费的应用。很快这款应用就被开发出来上线了，过了段时间我看了下数据，有不少用户评价，之前的应用用户很少评价，我一直觉得用户能评价应用很难，至少我自己都很少评价了。用户多半是通过搜索下载的，这让我想到了长尾效应，即使如此小众的应用，总有它的用户群体。</p>
<h4 id="瓶颈"><a href="#瓶颈" class="headerlink" title="瓶颈"></a>瓶颈</h4><p>经过一年多的更新，应用基本上算是稳定了，18年底后就没有再更新过了，一方面工作有些变化，之前公司的新闻类应用已经不再运营了。而我也做了一年多的Unity游戏应用，iOS开发实际上很少了，之后离开了原来的公司。短暂的停留后，开始到现在的公司做服务器方面的开发，iOS的开发者账号也在到期后没有再续，一方面我想试下，如果账号不续费，应用还在商店吗？当然最主要的是，工作太忙iOS已经很久都不弄了，对于RSS阅读器应用，也没有更好的想法。最后每年花着钱，却没有一分的收入，这可能对于做一款免费应用者或多或少的有点失落吧，毕竟需要生活。苹果账号没有续费后，应用结果就被下架了。大概一年的时间，我没有再想关于苹果开发的事。</p>
<h4 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h4><p>21年四月份的时候，我又把苹果账号给续费了，在做企业应用的一年里，发现相比行业的复杂性，个人应用似乎更能好把握些吧。另外作为一个软件开发者，很大程度是依赖于工作的，工作上我们可以沉迷于技术的细节，但从宏观上来看，至少这么些年做的应用都是商业上的不成功吧，当然作为开发者很难去左右这个结果。而作为App Store的独立开发者可以很大程度上让自己在整个从产品的构想到设计，开发，到最后的营销及运营，都能有很大的锻炼。对于开发人员而言，App Store依旧施展自己创意和想法的最好平台。</p>
<p>于是我决定继续RSS阅读器的开发，iOS 13启用夜间模式后，之前的应用确实一些问题，新版本主要是适配夜间模式，之前有用户也提到是否可以开发夜间模式的显示，不过一直没有启动。因为界面比较少很快也就适配完了，内容显示那块我也学习到了如何使用CSS适配夜间模式。</p>
<p>另外做了一个决定新版本将只支持iOS 13以上的版本，夜间模式和Swift UI都只能在iOS 13以上的版本使用，只想专注在功能的开发上，而不是兼容上。我自己的iPhone 6s都已经升级到iOS 14了，所以这个决定也是有一定的依据的。</p>
<h4 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h4><p>关于RSS阅读器，我依旧没有更好的想法，实际上在新版本中我又去掉了几个已经失效的RSS源，而有些RSS源已经很久没有更新了。我一度想再找一些不错的源，可发现真的很难，很多都是好几年前的帖子，所以RSS阅读器的前景并不乐观，这是一块正在极速萎缩的市场，而很多开发者估计会放弃，更不可能成为一款公司的产品存在。难怪早在2012的时候谷歌就关闭了RSS阅读应用Google Reader。</p>
]]></content>
  </entry>
  <entry>
    <title>初试WebAssembly</title>
    <url>/2021/06/02/2021-06-02-first-try-webassembly/</url>
    <content><![CDATA[<p>听闻WebAssembly已经有些年了，不过一直没有跑个例子尝试下。主要是使用Rust来编译生成WebAssembly的目标文件，虽然可以使用C&#x2F;C++，但想想我的Rust学习一直进展不大，不知道用在哪里，刚好Rust对WebAssembly支持也是比较详细。</p>
<h4 id="Rust问题"><a href="#Rust问题" class="headerlink" title="Rust问题"></a>Rust问题</h4><p>安装wasm-pack时提示没有安装rustup，虽然我已经哟给Brew安装了rust，最后安装rustup后就好了。</p>
<p>执行cargo install cargo-generate时，加载Crates非常慢，最后使用国内的镜像后顺利完成，这是国内镜像的配置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[source.crates-io]</span><br><span class="line">registry = &quot;https://github.com/rust-lang/crates.io-index&quot;</span><br><span class="line"># 指定镜像</span><br><span class="line">replace-with = &#x27;sjtu&#x27;</span><br><span class="line"></span><br><span class="line"># 清华大学</span><br><span class="line">[source.tuna]</span><br><span class="line">registry = &quot;https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git&quot;</span><br><span class="line"></span><br><span class="line"># 中国科学技术大学</span><br><span class="line">[source.ustc]</span><br><span class="line">registry = &quot;git://mirrors.ustc.edu.cn/crates.io-index&quot;</span><br><span class="line"></span><br><span class="line"># 上海交通大学</span><br><span class="line">[source.sjtu]</span><br><span class="line">registry = &quot;https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index&quot;</span><br><span class="line"></span><br><span class="line"># rustcc社区</span><br><span class="line">[source.rustcc]</span><br><span class="line">registry = &quot;https://code.aliyun.com/rustcc/crates.io-index.git&quot;</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>我在iOS的Safari试了下，也可以。虽然之前也有其他语言编译为JS的做法，所以主要解决的是如何构建大型web应用的工程问题，现在ES6的普及，好像这类方案渐渐的也不怎么提了。其他语言编译成WebAssembly的做法，主要是为解决性能的问题，把一些跟性能有关系使用WebAssembly，另外WebAssembly可以解决原来JS的老是暴露的问题。理论上其他语言都可以编译WebAssembly，但是主流的还是C&#x2F;C++、Go、Rust之类的编译为WebAssembly的方式了，不过Web开发我不是全职的那种，有需要了就写写。感觉一般Web开发者也不大会用到，有性能要求的应用可能会用到，但估计写WebAssembly估计也是领域专业的人员。</p>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://rustwasm.github.io/docs/book/introduction.html">Rust 🦀 and WebAssembly 🕸</a> ，例子主要按这个来跑的。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/WebAssembly">WebAssembly</a> Mozilla开发者网站关于WebAssembly的介绍，比较详细。</p>
]]></content>
  </entry>
  <entry>
    <title>学习GTK</title>
    <url>/2021/06/02/2021-06-02-learning-gtk/</url>
    <content><![CDATA[<p>GTK之前有看过，还专门购买了一本关于GTK的书籍，那是主要是为了学习C的面向对象实现。现在又看GTK是因为准备购买PinePhone，主要看中了PinePhone可以运行多个Linux发行版本。现在无论是iOS还是Android都不能自由的使用喜欢的语言。作为一个曾经的iOS开发者，iOS的运行速度还真的没得说。Android因为使用Java缘故，总还是没有办法更快似乎，所以一直想着整一台Linux手机自己定制UI，不过找一台Linux手机实在是太难了，主要是目前手机都是这些公司定制的硬件，所以驱动是个大问题。</p>
<p>为什么选择GTK呢？我也看了下QT，之前也简单的使用了下，确实非常适合开发UI程序，不过授权方面还是有点问题，GTK没有这个问题。另外无论C&#x2F;C++对我来说都不是太大的问题，所以还是用GTK了。</p>
<p>考虑到主要是用来开发Linux的，所以直接在Ubuntu下跑个例子看下。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdnoreturn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdatomic.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gtk/gtk.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glib/gprintf.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> var</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> var __auto_type</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">PrintMsg</span><span class="params">(GtkWidget *widget, gpointer window)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span>(window != <span class="literal">NULL</span>)</span><br><span class="line">		g_printf(<span class="string">&quot;Button clicked\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	var dialog = gtk_message_dialog_new(GTK_WINDOW(window), GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT, GTK_MESSAGE_INFO, GTK_BUTTONS_OK, <span class="string">u8&quot;按钮已被按下！&quot;</span>);</span><br><span class="line">	gtk_window_set_title(GTK_WINDOW(dialog), <span class="string">u8&quot;请注意&quot;</span>);</span><br><span class="line"></span><br><span class="line">	gtk_dialog_run(GTK_DIALOG(dialog));</span><br><span class="line">	gtk_widget_destroy(dialog);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">	gtk_init(&amp;argc, &amp;argv);</span><br><span class="line">	var window = gtk_window_new(GTK_WINDOW_TOPLEVEL);</span><br><span class="line">	gtk_window_set_title(GTK_WINDOW(window), <span class="string">&quot;GTK Test&quot;</span>);</span><br><span class="line">	gtk_window_set_default_size(GTK_WINDOW(window), <span class="number">640</span>, <span class="number">480</span>);</span><br><span class="line">	gtk_window_set_position(GTK_WINDOW(window), GTK_WIN_POS_CENTER);</span><br><span class="line">	gtk_container_set_border_width(GTK_CONTAINER(window), <span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">	var button = gtk_button_new_with_label(<span class="string">&quot;Button&quot;</span>);</span><br><span class="line">	gtk_widget_set_halign(button, GTK_ALIGN_START);</span><br><span class="line">	gtk_widget_set_valign(button, GTK_ALIGN_START);</span><br><span class="line">	gtk_widget_set_tooltip_text(button, <span class="string">&quot;This is a button widget&quot;</span>);</span><br><span class="line">	g_signal_connect(button, <span class="string">&quot;clicked&quot;</span>, G_CALLBACK(PrintMsg), window); </span><br><span class="line">	gtk_container_add(GTK_CONTAINER(window), button);</span><br><span class="line">	gtk_widget_show_all(window);</span><br><span class="line">	g_signal_connect(window, <span class="string">&quot;destroy&quot;</span>, G_CALLBACK(gtk_main_quit), <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">static_assert</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) == <span class="number">4</span>, <span class="string">&quot;Not compatible architecture!&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Will enter GTK runloop...&quot;</span>);</span><br><span class="line">	gtk_main();</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Program terminated!&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/include/pango-1.0/pango/pango-coverage.h:28:10: fatal error: &#x27;hb.h&#x27; file not found</span><br></pre></td></tr></table></figure>
<p>解决方案运行<code>pkgconf --cflags harfbuzz</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/bin/ld: cannot find -lBlocksRuntime</span><br></pre></td></tr></table></figure>
<p>解决方案运行<code>sudo apt-get install libblocksruntime-dev</code></p>
<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">clang main.c -std=gnu11 -fblocks -lBlocksRuntime -I/usr/include/glib-2.0/ -I/usr/include/atk-1.0/ -I/usr/include/gdk-pixbuf-2.0/ -I/usr/include/cairo/ -I/usr/include/pango-1.0/ -I/usr/lib/x86_64-linux-gnu/glib-2.0/include/ -I/usr/include/gtk-3.0/ -I /usr/include/harfbuzz/ -L/usr/lib/x86_64-linux-gnu/ -lgtk-3 -lgobject-2.0 -lpangocairo-1.0 -lgio-2.0 -latk-1.0 -lgdk-3 -lglib-2.0    -o gtk-test</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>GTK开发确实比较麻烦，后续还的配置个好的IDE环境，不过想想要求的OC开发，其实对于C还是蛮亲切的。其实一旦涉及真实项目，更多都是对框架的学习了，先挖个坑。</p>
]]></content>
  </entry>
  <entry>
    <title>《详谈：左晖》读后感</title>
    <url>/2021/06/17/2021-06-17-talk-in-detail-zuohui/</url>
    <content><![CDATA[<p>左晖这个人要不是最近因为去世，我估计也不太知道是谁。首次听到链家，那会觉得是一家新起来的互联网的网站，感觉好像很是风口，因为挖了不少技术的牛人过去。自己那会打算买房时也专门下载了链家的APP，不过感觉那上面的房子好像偏贵。而贝壳呢？好像那会广告打的比较凶。近一两年发现，发现附近多了好多叫德佑的房产中介，最近跟一位卖房的中介聊天时才发现德佑跟贝壳的关系。作为技术人我非常好奇他是如何实现传统行业加互联网的逆袭的？因为我最近两年一直在传统企业做相关的系统，但是成效很低，所以非常想一睹左晖的思路。</p>
<p>《详谈左晖》是本不到180页的32开小册子，我大概用了2个多小时读完了此书。主要是17年和20年对左晖的访谈内容。左晖虽然从事的是传统行业，实际上他是计算机专业毕业，只不过人家没有做技术，首先做过保险，后来因为政策的缘故，改做卖房中介，链家其实很早了，2001年就创建了，虽然早期也有网站，但实际主要做线下了，链家实际是一家有着IT基因的公司，这点很关键。另一家公司就是京东，一开始是摆柜台，后来借助互联网，终成巨头。左晖一直强调传统行业在基础方面的薄弱，主要体现在战略、组织、信息化、IT方面。个人深有体会，传统的中小企业重业务，流程上比较灵活，信息化还停留在表格的阶段。</p>
<h4 id="从0到1"><a href="#从0到1" class="headerlink" title="从0到1"></a>从0到1</h4><p>左晖认为线上从0到1比较难，从1到N则相对简单。而线下则是从0到1相对简单，但是从1到N则比较难。刚好传统公司和互联网公司都待过，虽然都是些不出名的一般公司。传统公司看重的是业务，而业务很大程度跟业务员有关系，往往是一个业务模式换个打法，所以很难形成标准化的东西，或者说根本就无法形成，因为这类公司是以盈利为第一目的，所以很少长期考虑，有什么做什么，缺乏标准化的输出，这也是做大比较难的原因。而线上公司一开始就是想着一个大目标去的，所以能不能验证商业模式的成功很关键，不是线下这种有一笔业务就算一笔的事，线上的一般会比较强调标准化，而商业模式的验证则比较难，也就是所谓的从0到1。一单验证模式可行，那么规模就容易上。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>传统行业的互联化一定要紧密建立在业务环节，并且要能够利用数字以及互联网来优化或者抽象化一些细节流程，这样才能有所作为，当然也很容易变成信息化与流程的脱节问题，关键是在于落实。</p>
]]></content>
  </entry>
  <entry>
    <title>学习Zookeeper的使用</title>
    <url>/2021/06/22/2021-06-22-learn-zookeeper/</url>
    <content><![CDATA[<p>ZooKeeper没有直接用过，所以想研究下，本来读《ZooKeeper：分布式过程协同技术详解》，感觉还是很模糊，虽然大概明白分布式会需要这样一个东西，现在使用的Spring微服务中Eureka跟ZooKeeper有相似的地方。纸上得来终归浅，所以觉得跑一些实际的例子。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>我的环境是Mac，使用Brew安装。</p>
<h4 id="可视化界面"><a href="#可视化界面" class="headerlink" title="可视化界面"></a>可视化界面</h4><p>ZooKeeper自带的zkCli命令行工具，其实也能用。也有可视化的界面工具<a href="https://github.com/DeemOpen/zkui">ZKUI</a>，最后使用的ZKUI。</p>
<h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>使用的Java跑的例子，有点类似数据的增删改查了，当然也有监听。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">	<span class="comment">// 连接地址及端口号</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SERVER_HOST</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1:2181&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 会话超时时间</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SESSION_TIME_OUT</span> <span class="operator">=</span> <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="comment">// 参数一：服务端地址及端口号</span></span><br><span class="line">		<span class="comment">// 参数二：超时时间</span></span><br><span class="line">		<span class="comment">// 参数三：监听器</span></span><br><span class="line">		<span class="type">ZooKeeper</span> <span class="variable">zooKeeper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>(SERVER_HOST, SESSION_TIME_OUT, <span class="keyword">new</span> <span class="title class_">Watcher</span>() &#123;</span><br><span class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(WatchedEvent event)</span> &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">				<span class="comment">// 获取事件的状态</span></span><br><span class="line">				Event.<span class="type">KeeperState</span> <span class="variable">state</span> <span class="operator">=</span> event.getState();</span><br><span class="line">				<span class="comment">// 判断是否是连接事件</span></span><br><span class="line">				<span class="keyword">if</span> (Event.KeeperState.SyncConnected == state) &#123;</span><br><span class="line">					Event.<span class="type">EventType</span> <span class="variable">type</span> <span class="operator">=</span> event.getType();</span><br><span class="line">					<span class="keyword">if</span> (Event.EventType.None == type) &#123;</span><br><span class="line">						System.out.println(<span class="string">&quot;zk客户端已连接...&quot;</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		zooKeeper.create(<span class="string">&quot;/go&quot;</span>, <span class="string">&quot;Hello World&quot;</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">		System.out.println(<span class="string">&quot;新增ZNode成功&quot;</span>);</span><br><span class="line">		zooKeeper.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>更高级的可以使用Curator，出了基本的客户端功能外，还提供了锁、选举、屏障、缓存、持久化节点、队列这样的功能。</p>
<p>参考：<br><a href="https://zhuanlan.zhihu.com/p/158986527">ZooKeeper入门，看这篇就够了！</a></p>
<h4 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h4><p>目前的书籍不多，在省图找到了这本《ZooKeeper：分布式过程协同技术详解》，此书不太适合一点经验都没有的人阅读，<br>相对来说偏实战了。此书还在读，目前来看结构清晰，推荐。吐槽下《ZooKeeper：Distributed Process Coordination》的中文版翻译为《ZooKeeper：分布式过程协同技术详解》，把“Process”翻译为“过程”确实没有“进程”或者“程序”好。ZooKeeper官方的说明是一种协调分布式服务的应用程序，这个其实很贴合意思。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>我还是习惯了从代码理解原理，这么跑下来，至少从代码的角度是理解了。初看有点简单，不就是一些节点数据么，但这样也很容易陷入技术细节，所以还是要看几个应用场景的实际例子，从整体上理解。</p>
<p>参考：</p>
<p><a href="https://blog.csdn.net/liyiming2017/article/details/83035157?spm=1001.2014.3001.5501">原创ZooKeeper入门实战教程</a>，这个博主系列文章非常不错，浅显明了。</p>
<p><a href="https://www.cnblogs.com/centos2017/p/8119190.html">Zookeeper 应用实例</a>，入门级的例子。</p>
]]></content>
  </entry>
  <entry>
    <title>开源仓储系统Jeewms使用指南</title>
    <url>/2021/07/02/2021-07-02-jeewms-user-guide/</url>
    <content><![CDATA[<p>最近找一款开源仓储系统，最好使用Java开发，发现<a href="https://gitee.com/erzhongxmu/jeewms">Jeewms</a>还不错，也有演示Demo。Gitee上大概有3.2K的Star，Github虽然也放了一个，但我看好像没有什么人关注。</p>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>主要遇到的坑是JDK版本一定要是Java 8，我本地因为安装最新的Eclispe时安装了Java 11，结果编译后报各种错，一直没有跑起来，主要是Java 11去掉了某些库。最后设置JAVA_HOME为Java 8后就好了。</p>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>这个项目在数据库的设计上字段名称上有些使用英文命名，业务部分的字段是拼音命名，好在不是简写的，另外也有个数据库设计文件可以参考，字段上也有注释，对于习惯了使用英文命名的人来说可能会想着修改，但是还是有难度的，不建议重构。</p>
<p>也使了用视图，知道这个东西，但实际项目中并没有使用过，如果没有用过的需要注意下。</p>
<p>也使用了触发器的东西，也需要注意下，如果是直接拿项目里面的sql文件还原的话问题不大，但如果是重新导出sql的时候一定要注意，触发器这些设置也要一并导出，像我使用的MySQL Workbench默认是没有勾选的，而我也没有太注意是否使用了触发器，结果本地好着了，正式服务器却发现有问题，一查看是一个字段没有更新的缘故，习惯性的在代码里面查找哪里有修改，结果没有发现，查看二进制日志后，想到应该是触发器的问题，果然是通过触发器更新的，而服务器上的问题是因为导出的sql没有勾选触发器的缘故。</p>
<h3 id="架构方面"><a href="#架构方面" class="headerlink" title="架构方面"></a>架构方面</h3><p>这个使用Tomcat+Spring MVC，并不是现在流行的SpringBoot，所以对于只接触过SpringBoot的人需要注意下。操作数据方面使用的是Hibernat，反正没有用过，只使用过Mybatis，感觉还是需要学习下的。视图方面使用的是JSP，之前只使用Thymeleaf。</p>
<h3 id="业务规则"><a href="#业务规则" class="headerlink" title="业务规则"></a>业务规则</h3><p>这块并没有详细的文档说明，如果没有做个仓储系统的，需要修改一些东西还是会有点摸不着头绪，需要好好的厘清下。最好还是找一些仓储方面的资料对照着理解项目。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>整个项目时可用的，但要重构架构的话可能比较有难度，因为并不是最新的技术，不是很适合拿来学习，如果不了解之前的这类项目的开发技术的话，倒也是一种参考。</p>
]]></content>
  </entry>
  <entry>
    <title>MySQL实践</title>
    <url>/2021/08/13/2021-08-13-mysql-practice/</url>
    <content><![CDATA[<p>记录一些实际工作中MySQL的使用问题和新的。</p>
<h4 id="给新增字段设置为NULL的问题"><a href="#给新增字段设置为NULL的问题" class="headerlink" title="给新增字段设置为NULL的问题"></a>给新增字段设置为NULL的问题</h4><p>字段不为NULL，原来的表新增一个字段，但这个字段又是不能为空，如果设置字段不为NULL，因为之前的是空，所以会报错。</p>
]]></content>
  </entry>
  <entry>
    <title>学习JNI的使用</title>
    <url>/2021/09/07/2021-09-07-learn-jni/</url>
    <content><![CDATA[<p>JNI（Java Native Interface）意为Java本地接口，虽然使用Java有段时间了，但对这个并不太了解。这个是基于网上老外的一篇文章的总结，环境是<strong>Mac OS</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldJNI</span> &#123;</span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;native&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HelloWorldJNI</span>().sayHello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Declare a native method sayHello() that receives no arguments and returns void</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用命令生成头文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">javac -h . HelloWorldJNI.java</span><br></pre></td></tr></table></figure>

<p>生成如下的<code>com_jasper_ji_maven_test_HelloWorldJNI.h</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="comment">/* Header for class com_jasper_ji_maven_test_HelloWorldJNI */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _Included_com_jasper_ji_maven_test_HelloWorldJNI</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _Included_com_jasper_ji_maven_test_HelloWorldJNI</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     com_jasper_ji_maven_test_HelloWorldJNI</span></span><br><span class="line"><span class="comment"> * Method:    sayHello</span></span><br><span class="line"><span class="comment"> * Signature: ()V</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="type">void</span> JNICALL <span class="title">Java_com_jasper_ji_maven_test_HelloWorldJNI_sayHello</span></span></span><br><span class="line"><span class="function">  <span class="params">(JNIEnv *, jobject)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>我们再创建一个同名cpp文件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;com_jasper_ji_maven_test_HelloWorldJNI.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     com_jasper_ji_maven_test_HelloWorldJNI</span></span><br><span class="line"><span class="comment"> * Method:    sayHello</span></span><br><span class="line"><span class="comment"> * Signature: ()V</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> JNICALL <span class="title">Java_com_jasper_ji_maven_test_HelloWorldJNI_sayHello</span> <span class="params">(JNIEnv *env, jobject obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello from C++ !!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译文件，生成<code>com_jasper_ji_maven_test_HelloWorldJNI.o</code>的文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">g++ -c -fPIC -I<span class="variable">$&#123;JAVA_HOME&#125;</span>/include -I<span class="variable">$&#123;JAVA_HOME&#125;</span>/include/darwin com_jasper_ji_maven_test_HelloWorldJNI.cpp -o com_jasper_ji_maven_test_HelloWorldJNI.o</span><br></pre></td></tr></table></figure>

<p>生成动态库</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">g++ -dynamiclib -o libnative.dylib com_jasper_ji_maven_test_HelloWorldJNI.o -lc</span><br></pre></td></tr></table></figure>

<p>运行Java，这里需要注意的是<code>-Djava.library.path</code>路径我是把<code>libnative.dylib</code>这个文件路径放在com的根目录下的，也就是当前目录。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -<span class="built_in">cp</span> . -Djava.library.path=. com.jasper.ji.maven.test.HelloWorldJNI</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>平时不太写C&#x2F;C++的代码，所以有点生，不过之前对C的研究还是起了不少的帮助。JNI虽然提供了调用其他语言的功能，但是这是比较麻烦的，不同的平台需要编译对应的库。早前在做安卓的时候，倒是有简单的运行过NDK的例子，不过那会并没有专门研究下JNI。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.baeldung.com/jni">Guide to JNI (Java Native Interface)</a></p>
]]></content>
  </entry>
  <entry>
    <title>学习Java字节码</title>
    <url>/2021/09/08/2021-09-08-learning-java-bytecode/</url>
    <content><![CDATA[<p>Java字节码只是简单的了解，感觉缺乏深入的了解，特写此篇记录下。</p>
<p>准备一个HelloWorld的测试类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译生成HelloWorld.class文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">javac HelloWorld.java</span><br></pre></td></tr></table></figure>

<p>我们使用javap命令来查看class文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">javap -v HelloWorld.class</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Classfile /Users/jasperji/eclipse-workspace/maventest/src/main/java/com/jasper/ji/maven/test/HelloWorld.class</span><br><span class="line">  Last modified 2021-9-8; size 452 bytes</span><br><span class="line">  MD5 checksum 1f346aeb85559b06180507b8838406dd</span><br><span class="line">  Compiled from <span class="string">&quot;HelloWorld.java&quot;</span></span><br><span class="line">public class com.jasper.ji.maven.test.HelloWorld</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 52</span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   <span class="comment">#1 = Methodref          #6.#15         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   <span class="comment">#2 = Fieldref           #16.#17        // java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">   <span class="comment">#3 = String             #18            // Hello, World!</span></span><br><span class="line">   <span class="comment">#4 = Methodref          #19.#20        // java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">   <span class="comment">#5 = Class              #21            // com/jasper/ji/maven/test/HelloWorld</span></span><br><span class="line">   <span class="comment">#6 = Class              #22            // java/lang/Object</span></span><br><span class="line">   <span class="comment">#7 = Utf8               &lt;init&gt;</span></span><br><span class="line">   <span class="comment">#8 = Utf8               ()V</span></span><br><span class="line">   <span class="comment">#9 = Utf8               Code</span></span><br><span class="line">  <span class="comment">#10 = Utf8               LineNumberTable</span></span><br><span class="line">  <span class="comment">#11 = Utf8               main</span></span><br><span class="line">  <span class="comment">#12 = Utf8               ([Ljava/lang/String;)V</span></span><br><span class="line">  <span class="comment">#13 = Utf8               SourceFile</span></span><br><span class="line">  <span class="comment">#14 = Utf8               HelloWorld.java</span></span><br><span class="line">  <span class="comment">#15 = NameAndType        #7:#8          // &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  <span class="comment">#16 = Class              #23            // java/lang/System</span></span><br><span class="line">  <span class="comment">#17 = NameAndType        #24:#25        // out:Ljava/io/PrintStream;</span></span><br><span class="line">  <span class="comment">#18 = Utf8               Hello, World!</span></span><br><span class="line">  <span class="comment">#19 = Class              #26            // java/io/PrintStream</span></span><br><span class="line">  <span class="comment">#20 = NameAndType        #27:#28        // println:(Ljava/lang/String;)V</span></span><br><span class="line">  <span class="comment">#21 = Utf8               com/jasper/ji/maven/test/HelloWorld</span></span><br><span class="line">  <span class="comment">#22 = Utf8               java/lang/Object</span></span><br><span class="line">  <span class="comment">#23 = Utf8               java/lang/System</span></span><br><span class="line">  <span class="comment">#24 = Utf8               out</span></span><br><span class="line">  <span class="comment">#25 = Utf8               Ljava/io/PrintStream;</span></span><br><span class="line">  <span class="comment">#26 = Utf8               java/io/PrintStream</span></span><br><span class="line">  <span class="comment">#27 = Utf8               println</span></span><br><span class="line">  <span class="comment">#28 = Utf8               (Ljava/lang/String;)V</span></span><br><span class="line">&#123;</span><br><span class="line">  public com.jasper.ji.maven.test.HelloWorld();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial <span class="comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         4: <span class="built_in">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 3: 0</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=1, args_size=1</span><br><span class="line">         0: getstatic     <span class="comment">#2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">         3: ldc           <span class="comment">#3                  // String Hello, World!</span></span><br><span class="line">         5: invokevirtual <span class="comment">#4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">         8: <span class="built_in">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 5: 0</span><br><span class="line">        line 6: 8</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">&quot;HelloWorld.java&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>另外也可以直接查看二进制，这里使用hexdump。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexdump HelloWorld.class</span><br></pre></td></tr></table></figure>

<p>不过感觉还是javap提供的这个比较人性化，更好的阅读。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>字节码作为一种中间形式，Java可以编译成字节码，Scala也可以编译成字节码，但是从语言层面他们又是不一样的。这个也让我重新再读了下《Java程序员修炼之道》这本书，原来对于书中第三部分JVM上的多语言编程，不是很感冒。但字节码并不是机器码，所以在理解某些问题时最终还是要落到汇编语言级别的。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://tech.meituan.com/2019/09/05/java-bytecode-enhancement.html">字节码增强技术探索</a></p>
]]></content>
  </entry>
  <entry>
    <title>Virtualbox CentOS 8扩容</title>
    <url>/2021/09/26/2021-09-26-virtualbox-centos-8-expansio/</url>
    <content><![CDATA[<p>本来想在虚拟机上安装TDengine试试，经过一番折腾后发现磁盘容量不足，当时创建虚拟机时选择的是8G，这就尴尬了，最后还是一番折腾后终于扩容成功。</p>
<h3 id="VirtualBox"><a href="#VirtualBox" class="headerlink" title="VirtualBox"></a>VirtualBox</h3><p>先关闭虚拟机，在虚拟机运行目录下执行。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">VBoxManage modifyhd /Users/jasperji/VirtualBox\ VMs/centos8/centos8.vdi --resize 15360 </span><br></pre></td></tr></table></figure>

<p>这里我把容量扩展为15G，记住路径中空格的问题。</p>
<h3 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h3><p>查看磁盘容量情况</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure>

<p>操作分区，选项n，创建新分区。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">fdisk /dev/sda</span><br></pre></td></tr></table></figure>

<p>创建PV（物理卷）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pvcreate /dev/sda3</span><br></pre></td></tr></table></figure>

<p>扩展到卷组，我们vgdisplay命令查看一下自己所在的卷组：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pvdisplay</span><br></pre></td></tr></table></figure>

<p>看到VG Name是cl，所以进一步扩展到卷组：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vgextend cl /dev/sda3</span><br></pre></td></tr></table></figure>

<p>扩展到逻辑分区，使用lvextend（logical volume extend逻辑卷扩展）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lvextend /dev/cl/root /dev/sda3</span><br></pre></td></tr></table></figure>

<p>我们df -h查看一下文件系统的磁盘空间占用情况：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure>

<p><em>这里我们发现磁盘没有按照预期的扩容，因为我们没有刷新逻辑分区的容量。</em></p>
<p>于是，刷新逻辑分区的容量，使用xfs_growfs（同步文件系统）命令，注意上面的Mounted on是挂载点，这里我们的挂载点就是根目录：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">xfs_growfs /</span><br></pre></td></tr></table></figure>

<p>最后就扩容成功了。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实之前阿里云正式服务器的时候，也记得有挂载过当时购买的云硬盘。不过时间久了，当时也没有记录一些东西，也就忘了。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/Luylic/article/details/107366701">CentOS8扩容</a><br><a href="https://juejin.cn/post/6844904003067707399">VirtualBox虚拟机硬盘扩容及LVM命令介绍</a><br><a href="https://www.cnblogs.com/cthon/p/9334828.html">VirtualBox文件系统已满–磁盘扩容</a></p>
]]></content>
  </entry>
  <entry>
    <title>养猫日记</title>
    <url>/2021/10/01/2021-10-01-cat-diary/</url>
    <content><![CDATA[<p>最近养了只NY11的金渐层妹妹，大概已经半个多月了，谈谈一些感受。</p>
<h4 id="猫毛和灰尘，戴森吸尘器"><a href="#猫毛和灰尘，戴森吸尘器" class="headerlink" title="猫毛和灰尘，戴森吸尘器"></a>猫毛和灰尘，戴森吸尘器</h4><p>猫毛无处不在，关键会有一些比较小的绒毛很容易飞在空气中，搞不好就回吸进去，所以也能理解有些人猫过敏。灰尘弥漫，猫经常会发疯似得满屋子狂奔，床底平时不太打扫得到，很容易被猫带出来，养猫后灰尘感觉弥漫在空气一样。面对这两个问题，我狠心买了个戴森吸尘器V10，首先这个确实可以把地板上散落的猫毛和灰尘以及一些杂质给收集起来，另外对于椅子上的猫毛也能清理，但还是有照顾不到的地方，总的来说解决一些问题。</p>
<h4 id="危险"><a href="#危险" class="headerlink" title="危险"></a>危险</h4><p>防止猫触发水龙头，一般的水龙不太会有问题，不过类似面盆之类的水龙头只需要简单的抬起和按下，这类水龙头会有隐患。</p>
<p>对于猫咪感兴趣但有危险的行为，一定要在发现的第一时间采取行动，猫是属于好奇心很重的那种。</p>
<h4 id="寄养"><a href="#寄养" class="headerlink" title="寄养"></a>寄养</h4><p>短暂的几天其实倒还好，但是如果出差之类的，在这个疫情大背景下，确实有万一被隔离的潜在风险，所以作为单身人士而言最好把猫寄养了。寄养确实也贵，有些是全包，有些要求自带猫粮或者猫粮和猫砂都需要带，另外有些会要求必须是打了疫苗的、绝育的等。所以找一家合适的家养猫的确实也不容易。</p>
<h4 id="公猫还是母猫？"><a href="#公猫还是母猫？" class="headerlink" title="公猫还是母猫？"></a>公猫还是母猫？</h4><p>我一开始以为公猫发情后会乱尿，所以选择了母猫。但实际上母猫也会乱尿，这是一位养母猫的朋友亲身经历。公猫会发腮，这会给颜值加分，如果比较看重颜值的话，还是要先考虑公猫。有人说母猫可以繁殖，所以价格会更贵一点，我没有发现，更多的是看颜值了。如果真的要繁育猫，首先也得找好的种公也是要花钱的，另外生下来能不能卖出去并卖上一个价也是一个问题，母猫绝育也比较麻烦，更有风险。</p>
<h4 id="病"><a href="#病" class="headerlink" title="病"></a>病</h4><p>猫不在多，而在于健康。最近发现猫开始呕吐，那天还蛮严重的，因为一直喂罐头的缘故，可能加了诱食剂，后来自己好了。</p>
<p>过年的时候，送去寄养结果就又呕吐了，最后专门到医院打针，后来想想环境的变动也会猫有一定的影响。</p>
<h4 id="疫苗"><a href="#疫苗" class="headerlink" title="疫苗"></a>疫苗</h4><p>关于疫苗，买猫的时候，老板说打了一针的疫苗，但也没有疫苗本，所以又重新从第一针开打。就像现在每天要扫码一样，疫苗也是你的猫咪在社会上流通的通行证，寄养也好、做绝育都需要有疫苗本。</p>
<p>目前我的猫已经打了三针了以及狂犬疫苗。</p>
<h4 id="配种"><a href="#配种" class="headerlink" title="配种"></a>配种</h4><p>去年底的时候，猫突然开始发情了，不过就是每隔2周会发情一次，刚开始还能接受，后来确实有点烦，今年4月底的时候差不多猫也有一岁了，于是我就考虑给配种下，一来至少2个月不会再发情了，而来也能收获下一窝可爱的小猫。借配的公猫在闲鱼上物色了好几个，最后选中了一个，第二天就把母猫送了过去，那边承诺配三次。可能我送过去的时候已经是发情第三天的时候，接回猫后没有多久猫又开始发情了，应该是没有配上。于是第一时间联系借配的，把猫又送了过去，直接放了一周，那人以为我不要猫了，这次似乎成功了，他也给我发了好几配猫的视频。后面的日子，猫咩确实没有再发情了，渐渐的开始没有之前那么好动，现在已经距离接回有一个多月了，猫的肚子明显变大了，也更加的不愿意动，饭量也比原来的大了很多，而且相当的能睡。预计6月底应该会生，期待一下。</p>
<p>我找的这个是专门配猫的，养了好几只公猫，其中有两只金渐层，一只是11色的，另一只是12色，11色的便宜800块钱，因为我的本身是11色，如果再配11色，大概率出的猫会有黑的可能性，所以选的12色，12色的1500，最后搞价到1400。因为小猫还没有出生，不能完全的判断这次的效果。另外配猫的时间点，不能过急，第一次完全是因为假期，而猫也开始发情了，急匆匆的找了一个，又急匆匆的送了过去，而那会已经是发情的第三天了，加上猫过去需要适应，所以第一次没有配成功也算合理，第二次就成功了，所以时间点上一定不能急，如果母猫已经快发情完了，那就等下一次。</p>
]]></content>
  </entry>
  <entry>
    <title>Spring Cloud Stream 实践</title>
    <url>/2022/02/23/2022-02-23-spring-cloud-stream-practices/</url>
    <content><![CDATA[<p>消息队列这个东西一直有关注，RabbitMQ相关的东西书籍也入手了，也跑过简单的例子，不过一直没有上。一开始使用的是Spring Boot集成RabbitMQ的方案，因为用的是Spring Cloud的微服务解决方案，发现Spring Cloud Stream这个东西，用这个的好处就是这是一个高层次的实现，可以支持RabbitMQ和Kafka，所以后续切换也方便。</p>
<h4 id="Source、Sink、Processor"><a href="#Source、Sink、Processor" class="headerlink" title="Source、Sink、Processor"></a>Source、Sink、Processor</h4><p>这三个是Spring Cloud Stream自带的，Source用来发送消息、Sink用来接收消息，Processor集成了二者。最初的构想是一个微服务生产消息，另一个微服务消费这些消息，我一开始用的是<code>@EnableBinding(value = &#123;Processor.class&#125;)</code>注解，这样话等于我要同时处理生产和消费的东西。如果只是实现我最初的构想的话，只需要绑定Source或者Sink其中一个就好。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>Spring Cloud Stream网上的资料并不多，一开始上手有点难。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.cnblogs.com/fengzheng/p/11576661.html">Spring Cloud 系列之 Spring Cloud Stream </a></p>
<p><a href="https://www.hangge.com/blog/cache/detail_2794.html">消息驱动微服务框架Spring Cloud Stream使用详解2（基本用法）</a><br>这个文章广告比较多</p>
]]></content>
  </entry>
  <entry>
    <title>清理Linux病毒</title>
    <url>/2022/03/17/2022-03-17-clean-up-linux-viru/</url>
    <content><![CDATA[<h4 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h4><p>Windows上中毒已经习以为常，但是Linux中毒，之前没有遇到过。之前写过一篇<a href="https://c2lang.com/blog/2021/11/12/remembering-a-gitlab-failure/">《记Gitlab一次故障》</a>，当时以为Gitlab服务器就好了，后来发现还是会时不时的就访问不了，CPU还是占的满满的，想着是不是要降低Gitlab的配置，最后把配置降低后，CPU还是满满的，我一度想换个Gitlab类似的东西，直到我发现即使把Gitlab停止后，依旧有两个Git的用户的程序把CPU占的满满的。其中一个叫kthreaddk的，隐约的感觉到好像中毒了，一搜发现这是一个挖矿的木马程序。</p>
<p>把进程Kill掉后，发现过一会又启动了。看来还是要深度清理了，参考<a href="https://blog.csdn.net/wzysz117/article/details/122662915">《挖矿木马kthreaddk清理》</a>这篇文章后，终于把这个木马清理了。主要是安装Gitlab时会创建一个git的用户，而木马程序就是这个用户下运行的，定时任务也是在这个用户下。遇到的主要问题是我不知道git用户的密码，不过这个可以用root账号来修改。</p>
<h4 id="修改Git用户密码"><a href="#修改Git用户密码" class="headerlink" title="修改Git用户密码"></a>修改Git用户密码</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo passwd git <span class="comment"># 这个是修改用户密码，用户密码密码无法查看，即使你是管理员。</span></span><br></pre></td></tr></table></figure>

<h4 id="清理木马"><a href="#清理木马" class="headerlink" title="清理木马"></a>清理木马</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">su git <span class="comment"># 切换到git用户</span></span><br><span class="line"></span><br><span class="line">crontab -l <span class="comment"># 查看定时任务</span></span><br><span class="line"></span><br><span class="line">sudo /etc/init.d/cron stop <span class="comment"># 停掉定时程序</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">kill</span> -9 进程ID 进程ID <span class="comment"># 这个木马会有两个进程</span></span><br><span class="line"></span><br><span class="line">crontab -r <span class="comment"># 移除定时任务</span></span><br><span class="line"></span><br><span class="line">sudo /etc/init.d/cron start <span class="comment"># 重启定时任务</span></span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>整个Gillab的故障中我一直没有想到中毒的问题，而上次出现故障时，我发现Gitlab账户多了一个管理员的用户，遂即就把这个用户给禁用了，这就已经是一个预兆了。通过这次事件，也算是给上了一课，之前也有使用top这个命令，但从来没有过深入的理解。另外开源的这些软件的漏洞的问题，也是值得关注的，搞不好就有被利用的可能性。</p>
]]></content>
  </entry>
  <entry>
    <title>记Gitlab一次故障</title>
    <url>/2021/11/12/2021-11-12-remembering-a-gitlab-failure/</url>
    <content><![CDATA[<p>Gitlab部署后一年多基本没出问题，最近一次提交突然失败，后台也登不上去了，显示502错误页面。用<code>top</code>命令确实发现CPU飙升，满负荷运行，怎么办呢？</p>
<h4 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h4><p>重启可能是最实用的方法吧，于是我第一步就先重启，刚一开始还能访问下，但很快就不行了，发现CUP还是很高。</p>
<h4 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h4><p>后来发现好像是Gitlab漏洞的问题，于是就像想着赶紧升级到最新的版本吧。一顿猛操作，就把版本升级到最新的版本了，但还是无法访问，CPU还是占用很高。</p>
<h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><p>使用<code>gitlab-ctl start</code>后并没有哪个是异常的，然后使用<code>gitlab-ctl status</code>，也是没有看出问题。最后决定查看日志吧，其实这个应该是最先想到的，可是每次都有点滞后。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/var/log/gitlab/gitlab-rails/production.log <span class="comment"># Gitlab日志目录</span></span><br><span class="line"></span><br><span class="line">gitlab-ctl <span class="built_in">tail</span> <span class="comment"># 也可以用这个查询</span></span><br></pre></td></tr></table></figure>

<p>发现是数据库连接的问题，最新版本和我原来的数据是不同的版本，无法直接升级。</p>
<h4 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h4><p>我之前安装的Gitlab是什么版本？原来也没有太注意。但这个很重要，我最后是通过备份文件的后缀知道我原来安装的版本的，我根据Postgres报错信息，定位到了原来的Postgres是11，但是发现Gitlab12和13版本，我先选择的12，是可以访问了，但是项目点进去后项目显示不存在。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /opt/gitlab/embedded/service/gitlab-rails/VERSION <span class="comment"># 比较靠谱</span></span><br><span class="line">网址/help <span class="comment"># 这个也可以查，但是网站502时不行。</span></span><br><span class="line">sudo gitlab-rake gitlab:<span class="built_in">env</span>:info <span class="comment"># 这个方法，我第一次使用的时候，因为有个报错所以也不行。</span></span><br></pre></td></tr></table></figure>

<h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><p>我已经有点想放弃了，干脆重装或者换个Gitlab类似的东西。可作为一个技术，还是决定再试下。网上说要恢复备份，好在Gitlab有一个默认备份，大概是7天备份一次，还好我最近一直没有提交过。我决定恢复备份，结果发现版本不对，备份的后缀有一个版本号，是13.0.4，而我装的是12。于是又下载重装了版本。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/var/opt/gitlab/backups <span class="comment"># 默认备份路径</span></span><br></pre></td></tr></table></figure>

<p>重装后实际上还不能访问，需要恢复备份。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:restore BACKUP=需要恢复的版本名称 <span class="comment"># _gitlab_backup.tar 之前的所有。</span></span><br></pre></td></tr></table></figure>

<p>最后成功运行。</p>
<h4 id="问题点"><a href="#问题点" class="headerlink" title="问题点"></a>问题点</h4><p>执行<code>gitlab-ctl reconfigure</code>报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PG::ConnectionBad: could not connect to server: No such file or directory</span><br><span class="line">Is the server running locally and accepting</span><br><span class="line">connections on Unix domain socket “/var/opt/gitlab/postgresql/.s.PGSQL.5432”?</span><br></pre></td></tr></table></figure>

<p>解决方案</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl stop <span class="comment"># 停止gitlab</span></span><br><span class="line">sudo <span class="built_in">chmod</span> 755 /var/opt/gitlab/postgresql</span><br><span class="line">sudo systemctl restart gitlab-runsvdir</span><br><span class="line">sudo gitlab-ctl reconfigure</span><br><span class="line">sudo gitlab-ctl restart</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>应该解决问题，而不是轻易的重装。</p>
<ol>
<li>出现故障不要轻易的跨版本升级，比如Postgres的版本就有点频繁，而Gitlab也好像喜欢用最新的版本。</li>
<li>一定要记住当前的版本</li>
<li>备份</li>
<li>出现问题先看日志</li>
<li>机器配置，我的机子是单核4G的理论上是可以的，CPU占用率在50%上下，内存占有率也是在50%左右，实际上是可以运行的。</li>
</ol>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://packages.gitlab.com/gitlab">Gitlab官方包中心</a><br><a href="https://www.cnblogs.com/jxd283465/p/11525629.html">gitlab安装、备份、恢复、升级、内存消耗问题</a></p>
]]></content>
  </entry>
  <entry>
    <title>乔布斯去世十周年</title>
    <url>/2021/10/06/2021-10-06-tenth-anniversary-of-steve-jobs-death/</url>
    <content><![CDATA[<h4 id="移动市场发展缓慢"><a href="#移动市场发展缓慢" class="headerlink" title="移动市场发展缓慢"></a>移动市场发展缓慢</h4><p>经过十年的发展，移动市场的机会似乎越来越少了。我也从iOS开发者，转做服务端开发了。iPhone是越来越贵了，我的6s已经扛过了第五个年头了。随着个人开发技能的提高，我现在反而喜欢纯粹的Linux手机。不过这类手机太少了，淘宝上购买的PinePhone自从6月中旬购买后，到现在也没有到货，只能寄希望于国庆后了。</p>
<p>移动设备的性能已经高过了需求，有些东西正在朝着另外一些方向转移，比如物联网。不过我观察了半天感觉这块市场太碎了，不好插手。</p>
<h4 id="乙川弘文"><a href="#乙川弘文" class="headerlink" title="乙川弘文"></a>乙川弘文</h4><p>十年间乔布斯相关的书籍出版不少，即使连给乔布斯做过寿司的老板也出书了，可是关于乙川弘文的书籍却没有出版，早期确实是没有的，不过后来有人根据他生前的录音整理了一本关于他的书籍《Kobun, Sesshin Talks》，后来16年出版后叫《Embracing Mind》。不过这么些年过去了，此书的中文版一直没有面世，我买过此书的英文版，大略的读了一遍，觉得这是一本跟《禅者的初心》不太一样的书籍，对于打坐修行的人来说是非常有参考价值，从去年开始我就利用机器翻译加人工校对的形式在整理此书，最近终于把剩余的给全部弄完了。已经放到了GitHub上《<a href="https://github.com/jasper2007111/kobun-sesshin-talks-zh">Kobun, Sesshin Talks</a>》，喜欢的可以去看看，欢迎共同完善。</p>
]]></content>
  </entry>
  <entry>
    <title>Gitlab升级</title>
    <url>/2022/03/24/2022-03-24-gitlab-upgrade/</url>
    <content><![CDATA[<p>我安装的是13.0.4的版本，20年安装的，当时也没有想到要升级，觉得小团队用。但是自从去年被病毒入侵后，在反反复复的杀病毒后，病毒还是不断的重来，严重的影响了开发。</p>
<p>Gitlab的升级不能直接跨版本升级，需要一步步的来。可以参考<a href="https://docs.gitlab.com/ee/update/index.html#upgrade-paths">官方升级路线</a>。我的版本是13.0.4，官方的路线<code>13.0.14 -&gt; 13.1.11 -&gt; 13.8.8 -&gt; 13.12.15 -&gt; 14.0.12 -&gt; latest 14.Y.Z</code>，我原来想着是不是需要先升级到13.0.14，按一般的管理，最后这个应该是布丁版本了，实际是直接升级13.1.11就可以了，装完后再安装13.8.8，以此类推。</p>
<p>Gitlab的各个版本的镜像地址<a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/">清华大学开源软件镜像站</a>，速度还是非常给力。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>对于Gitlab这类软件，还是要定期升级的，不然就版本的漏洞导致的瘫痪实在是划不来。</p>
]]></content>
  </entry>
  <entry>
    <title>博客迁移到Hexo</title>
    <url>/2022/03/28/blog-migration-to-hexo/</url>
    <content><![CDATA[<p>本站14年建立的，那会Octopress确实流行，好多的技术大拿都用，可惜当时只是建了个站，就没有写东西，后来想写东西了，发现大家都不用Octopress了，有人说慢，其实我的电脑上还行。一开始我也没有想着换，Octopress的问题是作者已经不更新了，所以就有一堆的升级的问题，总之对于程序员而言也无所谓，改改还是可以用的，就这样一直坚持到写这篇文章的晚上。</p>
<p>我比较在意代码高亮，上次就把Octopress的代码高亮给改了，不过不完美。其实博客很大程度是我的一些技术的记录了，想想这个，就一时兴起尝试的迁移吧。虽然静态博客框架很多，不过自己最近3年一直有写JS，另外Hexo确实很多人用。这次的迁移可以说相当的顺利。Hexo的文档非常不错，基本上照着来网站就好了。原来想着在Github再建一个项目，后来发现不需要，直接把我旧的网站一覆盖就可以了。</p>
<p>使用的主题是NexT，我比较喜欢简洁的，这个主题的文档也非常不错，很快就搞定了，看着焕然一新的博客，Octopress已成过去时了。</p>
]]></content>
  </entry>
  <entry>
    <title>尝试Rust</title>
    <url>/2022/04/10/try-rust/</url>
    <content><![CDATA[<p>最近在看WebAssembly的东西，觉得Rust写基于WebAssembly的Web应用好像是不错的选择。另外Rust这门语言，很早就听说的了，后来也买了《Rust权威指南》这本书，只是简单的翻了翻，并没有做过什么项目。于是就起了个备忘录的简单项目。</p>
<h4 id="Yew"><a href="#Yew" class="headerlink" title="Yew"></a>Yew</h4><p>有点类似React，用起来还是比较顺手了。目前版本迭代还是相当的快，我一开始用的0.19.0的版本，最后因为一个库的关系，直接选择了最新的版本，版本之间还时存在兼容问题。我打包后有2M，相比传统的还是比较大了，不过可能是是没有优化的结果。在代码里面写Html，主要的问题是格式化的问题，vscode里面一格式化代码后，html的代码就乱了。</p>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>Yew本身提供的文档还可以，有问题看看文档也能解决。主要的问题是wey_sys的一些库的使用，比如我想使用IndexedDB这个东西，其实JS版的文档很好看懂，Rust版的就有点不知所措，主要还是我对Rust了解不够，再加上这些库并没有特别全的文档，所以折腾半天。比如设置IndexedDB回调的问题，参数显示<code>js_sys::Function</code>，我想着那就构造个Function出来，结果翻遍文档没有看到如何构造的例子，最后解决方案是闭包转Function的方式，一开始也是报错，提示闭包已久被销毁了，后来发现官方的例子有点问题，最后修复了。</p>
<p>另外因为要在几个页面间共享一些数据，想着写个单例吧，发现不那么简单，找了个<code>lazy_static</code>这样库，提示<code>*mut u8` cannot be shared between threads safely</code>这样的错误，最终还是停了下来。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>Rust的学习曲线比较陡，主要是很多语法不同于传统的C体系，所以感觉原来的经验无法施展，而且沿着经验的思路反而会比较绕，发现还是得按Rust的方式解决问题。</p>
]]></content>
  </entry>
  <entry>
    <title>WebAssembly 遐想</title>
    <url>/2022/04/05/webAssembly-reverie/</url>
    <content><![CDATA[<p>上次去省图偶然看到了《WebAssembly 实战》一书，之前就有关注到，于是就借了回来，刚好趁清明假期看看。之前有写过一篇<a href="https://c2lang.com/2021/06/02/2021-06-02-first-try-webassembly/">《初试WebAssembly》</a>，本身Rust语言不熟，虽然我买了本《Rust权威指南》，但一直没有什么项目可以练手，基本上没有进展。《WebAssembly 实战》一书是基于C&#x2F;C++的，相对来说读起来障碍不大。实际我也跑了一个例子试了下，当然如果真拿C&#x2F;C++来写Web应用的话，估计会很奔溃了。接着我又看了好几个关于WebAssembly的视频演讲，发现有了新的想法。</p>
<p>推出WebAssembly这个东西主要是因为现有的优化已经无法满足性能的进一步提升了，语言肯定不能大改了，JS这么用的广。记得早些年使用Flash的时候，那会是在嵌入式上跑AS2，性能的问题真的是让我当时无语。后来又推出了AS3性能又大幅的提升，但是很长一段时间，我们公司的引擎没有升级，所以我基本上还是用AS2。虽然现在的Web开发没有像当年那样，毕竟开放的环境还是不一样。回到正题，如果单纯的写WebAssembly的话，好像也没有这个必要，而且据说和JS的调用开销不小，所以到底什么时候用，是个问题。反过来想要是哪天整个的Web可以大部分都用WebAssembly来写的话，那就好了，不过目前还不能直接操作Dom，这是一个很大的问题，理论和JS是相互调用的，我看到Rust有个web_sys的库，可以操作dom，不过我想应该也是自己实现的吧。目前看到几个Rust的例子，是直接用WebAssembly来写整个的Web应用的，比如Yew这个Rust的框架允许你构建基于WebAssembly的应用。另外微软的Blazor，允许使用C#来编写基于WebAssembly的单页应用。还有Go的Vugu。</p>
<p>所以如果和JS混着用，那么实际上是把WebAssembly作为一个计算密集型的一个解决方案吧，实际开发中大部分的Web应用都是些轻客户端，主要还是界面相关的操作了，其实大部分情况下很难想到用WebAssembly了，这也是我最早尝试时的感想。但是如果未来解决了类似调DOM的成本比较高的的问题，那么有没有可能Web语言变成Rust为主，为什么是Rust呢？首先WebAssembly本身没有垃圾回收，内存是手动处理了。Rust呢？标榜的是一个没有垃圾回收的安全语言，与C&#x2F;C++相比实际上是语言层面上处理内存管理的问题。这么一想Rust与WebAssembly真是绝配，当然其他的语言也可以编译成WebAssembly，但对于垃圾回收的语言，是比要实现一个垃圾回收的运行时环境，这样性能上就会有折扣。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>想来想去，最终落到Rust这个语言上了，或者说WebAssembly本身的设计这种在底层改变的东西无疑为未来提供了各种改变的可能性，即使不是Rust也许会是其他的语言。C&#x2F;C++用户可以让现有的库移植到Web上使用，另外Web应用一定是现在这样的轻客户端的类型吗？WebAssembly的引入确实提供另一种可能。另外一定要用JS来写Web应用吗？过去是没有办法，但是底层的改变让未来可以使用统一基于WebAssembly的语言来写Web成为了可能，而不像过去所有新的语言实际上都得编译成JS。基于WebAssembly的框架，有微软这样的大厂，也有基于Go的，某种程度这是一场大厂利好的事，但坏处是当有各种的语言可以写Web时，会不会有点分裂，毕竟只学一个JS，大家共用资源，而用不同的语言有学习成本。</p>
]]></content>
  </entry>
  <entry>
    <title>Python打包exe</title>
    <url>/2022/04/19/python-package-exe/</url>
    <content><![CDATA[<p>Python平时主要是处理数据用，在Mac上使用很方便，最近想把一个程序让下面人用，他们是Window环境，Python他们并不熟悉，所以直接把源文件丢过去，他们又得折腾一番。我就想到打包成exe，其实很早就有这样的想法，但一直没有做过。用的是PyInstaller这个库，还想着这么简单，结果一打包，发现并不是Window下的exe，原来是我理解的错误，以为可以直接打包成Window上执行的exe了，实际上PyInstaller只是在不同平台上将python打包成对应平台的应用了。难道我又得找台Windows，环境弄好，再打包一个？真麻烦，想着可以交叉编译吗？查了下PyInstaller以前好像可以，后来就去掉了。之前用过点Go语言，就是可以交叉编译的，一时间我尽有想用Go重写那个功能的想法，但是一对比还是Python方便。最后找了一个通过docker进行打包的方案<a href="https://github.com/cdrx/docker-pyinstaller">docker-pyinstaller</a></p>
<p>直接这个命令就可以打包了，具体可以参考文档。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -v <span class="string">&quot;<span class="subst">$(pwd)</span>:/src/&quot;</span> cdrx/pyinstaller-windows</span><br></pre></td></tr></table></figure>

<p>但是有个问题，打包出来的应用一执行，提示一个依赖的库，没有找到。不对啊，文档中明明说把依赖写在<code>requirements.txt</code>文件里，我也写了的。</p>
<p>文档中的这段话，看着没有其他的操作，也没有相关的示例代码。</p>
<blockquote>
<p>If the src folder has a requirements.txt file, the packages will be installed into the environment before PyInstaller runs.</p>
</blockquote>
<p>折腾了好几个小时，最后找到了一篇日文的文章，看完后豁然开朗，原来是写法的问题，我对docker的一些东西不够熟吧。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --<span class="built_in">rm</span> -v <span class="string">&quot;<span class="subst">$(pwd)</span>:/src/&quot;</span> cdrx/pyinstaller-windows -c \</span><br><span class="line">  <span class="string">&quot;pip install -r requirements.txt &amp;&amp; \</span></span><br><span class="line"><span class="string">  pyinstaller main.py --onedir --onefile --clean &amp;&amp; \</span></span><br><span class="line"><span class="string">  mv dist/main.exe main.exe &amp;&amp; \</span></span><br><span class="line"><span class="string">  rm -rf __pycache__/ build/ dist/ main.spec&quot;</span></span><br></pre></td></tr></table></figure>

<p>最后打包后的exe就没有依赖缺失的问题了。不过打包成exe后，我最终还是改了下python的代码，比如<code>os.path.dirname(__file__)</code>是无法使用了，另外打开文件时提示<code>UnicodeDecodeError: &#39;gbk&#39; codec can&#39;t decode byte</code>的错误，需要加<code>encoding=&#39;utf-8&#39;</code>。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://qiita.com/ryoheiszk/items/2ea26594d24304c721e2">Docker環境のPyInstallerでキレイにExe化する</a></p>
]]></content>
  </entry>
  <entry>
    <title>Rust写前端</title>
    <url>/2022/04/23/rust-writing-front-end/</url>
    <content><![CDATA[<p>尝试用Rust已经有点时间了，之前主要的问题是卡在IndexedDB的使用上，最后的代码是这样。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">spawn_local</span>(<span class="keyword">async</span> <span class="keyword">move</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> (tx, rx) = oneshot::channel::&lt;IdbDatabase&gt;();</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">window</span> = web_sys::<span class="title function_ invoke__">window</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">idb_factory</span> = window.<span class="title function_ invoke__">indexed_db</span>().<span class="title function_ invoke__">unwrap</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">open_request</span> = idb_factory</span><br><span class="line">            .<span class="title function_ invoke__">open_with_u32</span>(String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;todo&quot;</span>).<span class="title function_ invoke__">as_str</span>(), <span class="number">1</span>)</span><br><span class="line">            .<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">on_upgradeneeded</span> = Closure::<span class="title function_ invoke__">once</span>(<span class="keyword">move</span> |event: &amp;Event| &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">target</span> = event.<span class="title function_ invoke__">target</span>().<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Event should have a target; qed&quot;</span>);</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">req</span> = target</span><br><span class="line">                .dyn_ref::&lt;IdbRequest&gt;()</span><br><span class="line">                .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Event target is IdbRequest; qed&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> <span class="variable">result</span> = req</span><br><span class="line">                .<span class="title function_ invoke__">result</span>()</span><br><span class="line">                .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;IndexedDB.onsuccess should have a valid result; qed&quot;</span>);</span><br><span class="line">            <span class="built_in">assert!</span>(result.is_instance_of::&lt;IdbDatabase&gt;());</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">db</span> = IdbDatabase::<span class="title function_ invoke__">from</span>(result);</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">store</span>:IdbObjectStore = db.<span class="title function_ invoke__">create_object_store</span>(&amp;String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;user&quot;</span>)).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">_index</span> = store.<span class="title function_ invoke__">create_index_with_str</span>(&amp;String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;name&quot;</span>), &amp;String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;name&quot;</span>)).<span class="title function_ invoke__">expect</span>(<span class="string">&quot;create_index_with_str error&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        open_request.<span class="title function_ invoke__">set_onupgradeneeded</span>(<span class="title function_ invoke__">Some</span>(on_upgradeneeded.<span class="title function_ invoke__">as_ref</span>().<span class="title function_ invoke__">unchecked_ref</span>()));</span><br><span class="line">        on_upgradeneeded.<span class="title function_ invoke__">forget</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">on_success</span> = Closure::<span class="title function_ invoke__">once</span>(<span class="keyword">move</span> |event: &amp;Event| &#123;</span><br><span class="line">            <span class="comment">// Extract database handle from the event</span></span><br><span class="line">            <span class="keyword">let</span> <span class="variable">target</span> = event.<span class="title function_ invoke__">target</span>().<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Event should have a target; qed&quot;</span>);</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">req</span> = target</span><br><span class="line">                .dyn_ref::&lt;IdbRequest&gt;()</span><br><span class="line">                .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Event target is IdbRequest; qed&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> <span class="variable">result</span> = req</span><br><span class="line">                .<span class="title function_ invoke__">result</span>()</span><br><span class="line">                .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;IndexedDB.onsuccess should have a valid result; qed&quot;</span>);</span><br><span class="line">            <span class="built_in">assert!</span>(result.is_instance_of::&lt;IdbDatabase&gt;());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> <span class="variable">db</span> = IdbDatabase::<span class="title function_ invoke__">from</span>(result);</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">_</span> = tx.<span class="title function_ invoke__">send</span>(db);</span><br><span class="line">        &#125;);</span><br><span class="line">        open_request.<span class="title function_ invoke__">set_onsuccess</span>(<span class="title function_ invoke__">Some</span>(on_success.<span class="title function_ invoke__">as_ref</span>().<span class="title function_ invoke__">unchecked_ref</span>()));</span><br><span class="line">        on_success.<span class="title function_ invoke__">forget</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">db</span> = rx.<span class="keyword">await</span>.<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">transaction</span> = db.<span class="title function_ invoke__">transaction_with_str_and_mode</span>(&amp;String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;user&quot;</span>), IdbTransactionMode::Readwrite).<span class="title function_ invoke__">expect</span>(<span class="string">&quot;transaction_with_str error&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">store</span> = transaction.<span class="title function_ invoke__">object_store</span>(&amp;String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;user&quot;</span>)).<span class="title function_ invoke__">expect</span>(<span class="string">&quot;store error&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">name</span> = JsValue::<span class="title function_ invoke__">from_str</span>(_content_element.<span class="title function_ invoke__">value</span>().<span class="title function_ invoke__">as_str</span>());</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">add_request</span> = store.<span class="title function_ invoke__">add_with_key</span>(&amp;name, &amp;JsValue::<span class="title function_ invoke__">from</span>(<span class="string">&quot;name&quot;</span>)).<span class="title function_ invoke__">expect</span>(<span class="string">&quot;add error&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">on_add_error</span> = Closure::<span class="title function_ invoke__">once</span>(<span class="keyword">move</span> |event: &amp;Event| &#123;</span><br><span class="line">            console::<span class="title function_ invoke__">log_1</span>(&amp;String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;写入数据失败&quot;</span>).<span class="title function_ invoke__">into</span>());</span><br><span class="line">            console::<span class="title function_ invoke__">log_1</span>(&amp;event.<span class="title function_ invoke__">into</span>());</span><br><span class="line">        &#125;);</span><br><span class="line">        add_request.<span class="title function_ invoke__">set_onerror</span>(<span class="title function_ invoke__">Some</span>(on_add_error.<span class="title function_ invoke__">as_ref</span>().<span class="title function_ invoke__">unchecked_ref</span>()));</span><br><span class="line">        on_add_error.<span class="title function_ invoke__">forget</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">on_add_success</span> = Closure::<span class="title function_ invoke__">once</span>(<span class="keyword">move</span> |event: &amp;Event| &#123;</span><br><span class="line">            console::<span class="title function_ invoke__">log_1</span>(&amp;String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;写入数据成功&quot;</span>).<span class="title function_ invoke__">into</span>());</span><br><span class="line">        &#125;);</span><br><span class="line">        add_request.<span class="title function_ invoke__">set_onsuccess</span>(<span class="title function_ invoke__">Some</span>(on_add_success.<span class="title function_ invoke__">as_ref</span>().<span class="title function_ invoke__">unchecked_ref</span>()));</span><br><span class="line">        on_add_success.<span class="title function_ invoke__">forget</span>();</span><br><span class="line"></span><br><span class="line">        console::<span class="title function_ invoke__">log_1</span>(&amp;String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;do&quot;</span>).<span class="title function_ invoke__">into</span>());</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>
<p>因为IndexedDB连接成功是个异步事件，<code>db</code>    只能在成功事件中才能拿到，最初因为对IndexedDB的使用不熟悉，这玩意在很早以前看HTML5的时候就看到过，不过一直没有用过。我在成功事件中调用<code>create_object_store</code>，结果给报错了，实际上创建数据库只能在<code>onupgradeneeded</code>事件中处理。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">myDatabase</span> = MyDatabase::<span class="title function_ invoke__">new</span>();</span><br><span class="line">myDatabase.<span class="title function_ invoke__">add</span>(String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;jasper&quot;</span>, String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;name&quot;</span>)));</span><br></pre></td></tr></table></figure>

<p>早期的想法是把数据库的操作封装起来，但是连接是异步的，上面的<code>add</code>操作时数据库可能还没有连接成功，<code>db</code>等于为空。可能是之前做iOS的缘故，我一直想着数据库的操作应该是个单例，不过Rust的单例好像不那么简单，一直报错，所以这个想法就先放放了。</p>
<p>早期的时候甚至不知道如何用Rust设置回调，最后发现了这个库<a href="https://docs.rs/kvdb-web/latest/src/kvdb_web/indexed_db.rs.html">kvdb_web</a>，代码也是参考了<code>indexed_db.rs</code>中的方法。这个库并没有演示的例子，所以只是参考了他打开数据库的方法。里面有用到<code>futures::channel</code>，但是实际使用老是报错。后来我忘了Rust写前端，实际上是运行在Wasm虚拟机的环境下，Rust的多线程则是一般的操作系统的环境下了。实际上要在Wasm使用多线程，得用另外一种方式。实际上是用Rust的代码调用JS了，JS是单线程运行的。所以整个思路虽然是用Rust在写，但实际思想的话得跟着JS来走。我想在后面的代码中拿到<code>db</code>，有点类似JS中使用<code>await</code>的方式。最后用了两个库，<code>wasm-bindgen-futures</code>主要使用了<code>spawn_local</code>这个东西，另外还有<code>futures-channel</code>这个库。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">spawn_local</span>(<span class="keyword">async</span> &#123;</span><br><span class="line">	<span class="keyword">let</span> (tx, rx) = oneshot::channel::&lt;<span class="type">i32</span>&gt;();</span><br><span class="line">	<span class="comment">// 省略中间代码</span></span><br><span class="line">	<span class="keyword">let</span> <span class="variable">on_success</span> = Closure::<span class="title function_ invoke__">once</span>(<span class="keyword">move</span> |event: &amp;Event| &#123;</span><br><span class="line">                <span class="comment">// Extract database handle from the event</span></span><br><span class="line">                <span class="keyword">let</span> <span class="variable">target</span> = event.<span class="title function_ invoke__">target</span>().<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Event should have a target; qed&quot;</span>);</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">req</span> = target</span><br><span class="line">                    .dyn_ref::&lt;IdbRequest&gt;()</span><br><span class="line">                    .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Event target is IdbRequest; qed&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">let</span> <span class="variable">result</span> = req</span><br><span class="line">                    .<span class="title function_ invoke__">result</span>()</span><br><span class="line">                    .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;IndexedDB.onsuccess should have a valid result; qed&quot;</span>);</span><br><span class="line">                <span class="built_in">assert!</span>(result.is_instance_of::&lt;IdbDatabase&gt;());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">let</span> <span class="variable">db</span> = IdbDatabase::<span class="title function_ invoke__">from</span>(result);</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">_</span> = tx.<span class="title function_ invoke__">send</span>(db);</span><br><span class="line">        &#125;);</span><br><span class="line">    open_request.<span class="title function_ invoke__">set_onsuccess</span>(<span class="title function_ invoke__">Some</span>(on_success.<span class="title function_ invoke__">as_ref</span>().<span class="title function_ invoke__">unchecked_ref</span>()));</span><br><span class="line">    on_success.<span class="title function_ invoke__">forget</span>();</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 等于这块回一直阻塞，直到拿个值。</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">db</span> = rx.<span class="keyword">await</span>.<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="comment">// 省略剩余代码</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><code>futures-channel</code>这个库的用法跟Rust自带那个有点类似，不过只用这个是可以工作的。后面的问题基本上是<code>IndexedDB</code>的用法问题，最后终于可以把数据成功插入了，虽然再次插入数据时会有写入失败的问题，不过这个已经是后面的事了。</p>
<p>当我费了很多周折，成功写入时，也就是写这篇文章时候，突然间发现可以直接用下面的方式写，如果只是要写入数据的话。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">window</span> = web_sys::<span class="title function_ invoke__">window</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"><span class="keyword">let</span> <span class="variable">idb_factory</span> = window.<span class="title function_ invoke__">indexed_db</span>().<span class="title function_ invoke__">unwrap</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">open_request</span> = idb_factory</span><br><span class="line">    .<span class="title function_ invoke__">open_with_u32</span>(String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;todo&quot;</span>).<span class="title function_ invoke__">as_str</span>(), <span class="number">1</span>)</span><br><span class="line">    .<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">on_upgradeneeded</span> = Closure::<span class="title function_ invoke__">once</span>(<span class="keyword">move</span> |event: &amp;Event| &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">target</span> = event.<span class="title function_ invoke__">target</span>().<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Event should have a target; qed&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">req</span> = target</span><br><span class="line">        .dyn_ref::&lt;IdbRequest&gt;()</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Event target is IdbRequest; qed&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">result</span> = req</span><br><span class="line">        .<span class="title function_ invoke__">result</span>()</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;IndexedDB.onsuccess should have a valid result; qed&quot;</span>);</span><br><span class="line">    <span class="built_in">assert!</span>(result.is_instance_of::&lt;IdbDatabase&gt;());</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">db</span> = IdbDatabase::<span class="title function_ invoke__">from</span>(result);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">store</span>: IdbObjectStore = db.<span class="title function_ invoke__">create_object_store</span>(&amp;String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;user&quot;</span>)).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">_index</span> = store</span><br><span class="line">        .<span class="title function_ invoke__">create_index_with_str</span>(&amp;String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;name&quot;</span>), &amp;String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;create_index_with_str error&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">open_request.<span class="title function_ invoke__">set_onupgradeneeded</span>(<span class="title function_ invoke__">Some</span>(on_upgradeneeded.<span class="title function_ invoke__">as_ref</span>().<span class="title function_ invoke__">unchecked_ref</span>()));</span><br><span class="line">on_upgradeneeded.<span class="title function_ invoke__">forget</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">on_success</span> = Closure::<span class="title function_ invoke__">once</span>(<span class="keyword">move</span> |event: &amp;Event| &#123;</span><br><span class="line">    <span class="comment">// Extract database handle from the event</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">target</span> = event.<span class="title function_ invoke__">target</span>().<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Event should have a target; qed&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">req</span> = target</span><br><span class="line">        .dyn_ref::&lt;IdbRequest&gt;()</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Event target is IdbRequest; qed&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">result</span> = req</span><br><span class="line">        .<span class="title function_ invoke__">result</span>()</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;IndexedDB.onsuccess should have a valid result; qed&quot;</span>);</span><br><span class="line">    <span class="built_in">assert!</span>(result.is_instance_of::&lt;IdbDatabase&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">db</span> = IdbDatabase::<span class="title function_ invoke__">from</span>(result);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">transaction</span> = db</span><br><span class="line">        .<span class="title function_ invoke__">transaction_with_str_and_mode</span>(&amp;String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;user&quot;</span>), IdbTransactionMode::Readwrite)</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;transaction_with_str error&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">store</span> = transaction</span><br><span class="line">        .<span class="title function_ invoke__">object_store</span>(&amp;String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;user&quot;</span>))</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;store error&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">name</span> = JsValue::<span class="title function_ invoke__">from_str</span>(_content_element.<span class="title function_ invoke__">value</span>().<span class="title function_ invoke__">as_str</span>());</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">add_request</span> = store</span><br><span class="line">        .<span class="title function_ invoke__">add_with_key</span>(&amp;name, &amp;JsValue::<span class="title function_ invoke__">from</span>(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;add error&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">on_add_error</span> = Closure::<span class="title function_ invoke__">once</span>(<span class="keyword">move</span> |event: &amp;Event| &#123;</span><br><span class="line">        console::<span class="title function_ invoke__">log_1</span>(&amp;String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;写入数据失败&quot;</span>).<span class="title function_ invoke__">into</span>());</span><br><span class="line">        console::<span class="title function_ invoke__">log_1</span>(&amp;event.<span class="title function_ invoke__">into</span>());</span><br><span class="line">    &#125;);</span><br><span class="line">    add_request.<span class="title function_ invoke__">set_onerror</span>(<span class="title function_ invoke__">Some</span>(on_add_error.<span class="title function_ invoke__">as_ref</span>().<span class="title function_ invoke__">unchecked_ref</span>()));</span><br><span class="line">    on_add_error.<span class="title function_ invoke__">forget</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">on_add_success</span> = Closure::<span class="title function_ invoke__">once</span>(<span class="keyword">move</span> |event: &amp;Event| &#123;</span><br><span class="line">        console::<span class="title function_ invoke__">log_1</span>(&amp;String::<span class="title function_ invoke__">from</span>(<span class="string">&quot;写入数据成功&quot;</span>).<span class="title function_ invoke__">into</span>());</span><br><span class="line">    &#125;);</span><br><span class="line">    add_request.<span class="title function_ invoke__">set_onsuccess</span>(<span class="title function_ invoke__">Some</span>(on_add_success.<span class="title function_ invoke__">as_ref</span>().<span class="title function_ invoke__">unchecked_ref</span>()));</span><br><span class="line">    on_add_success.<span class="title function_ invoke__">forget</span>();</span><br><span class="line">&#125;);</span><br><span class="line">open_request.<span class="title function_ invoke__">set_onsuccess</span>(<span class="title function_ invoke__">Some</span>(on_success.<span class="title function_ invoke__">as_ref</span>().<span class="title function_ invoke__">unchecked_ref</span>()));</span><br><span class="line">on_success.<span class="title function_ invoke__">forget</span>();</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>至此算是把<code>IndexedDB</code>的问题解决了，如果想把操作封装起来，那么可以用前面的方式。只是简单的操作的话，后面的代码也是可以的。到目前为止，基本上还没有写网页的东西，<code>Yew</code>的东西，也就只是搭了个架子时有用到，并没有深入的使用。后面得需要好好的深入下，<code>Yew</code>这个框架跟传统的还不太一样，用<code>trunk serve</code>启动后，实际会有一个<code>WebSocket</code>在前后端之间通讯。</p>
<p>再谈谈Rust学习的东西，实际上《Rust权威指南》这本书我只是看了个大概，而目前的实验项目中并没有使用Rust去写很多逻辑的代码，更多的是调用。用Rust写前端这个方式，起步会比一般的难点，主要还是牵涉的东西不只是Rust的问题，还有Wasm以及JS相关的东西，最重要的还是要明白他的运行环境是浏览器中Wasm虚拟机。不过后续如果有大量成熟的库，可以解决这些基础问题的话，只写网页的话，难度会小些。</p>
<p>虽然项目整体进展不大，也走了一些弯路，不过却也让我思考到了更多的东西。现在感觉Rust是未来全栈程序员必备的语言，这门语言是非常考验你是不是一个合格的程序员，因为他既有很底层的东西，比如内存概念，也有很现代的语法，但前提是你需要都懂，对于那些不是科班出身又没有好好学习计算机相关的东西人来说，这个确实有难度。</p>
]]></content>
  </entry>
  <entry>
    <title>用Rust和Yew写一个记事本</title>
    <url>/2022/05/02/write-a-notepad-with-rust-and-yew/</url>
    <content><![CDATA[<p>记事本这个小应用完全是为了学习Rust而产生的应用，今年4月6号创建了这个项目，主要是用业余时间弄下，刚好五一假期，我也就加把劲，算是弄出一个基本功能的东西。本来想写那些遇到的问题，可一旦动笔却不知道如何写起来，问题已经都解决了，新的问题依旧在路上。于是直接把项目上传到Github了，<a href="https://github.com/jasper2007111/yew-notepad">yew-notepad</a>，有兴趣的可以自己拉下来看看，或许有点用。</p>
<p>目前用Rust写前端的资料很少，Yew资料更少，遇到问题基本上是反复的看官方的文档以及例子为主，很多时候总想抛开这些去寻找，但最后发现还是得认真的看文档和例子。另外就是看书吧，程序类的书籍我一般喜欢看纸质书，之前买的《Rust权威指南》，结合项目中遇到的问题期间又翻了翻，蛮有收获的。昨天又去省图借了《Rust程序设计》（Programming Rust），英文书名跟前者很像，出版也早一些，所以《Rust权威指南》为什么不是《Rust 程序设计语言》，估计是害怕读者搞混乱吧。这两本书各有千秋吧，我是拿来互补的。《Programming Rust》貌似已经出了第二版，我估计会考虑买本。</p>
<h4 id="在线书籍"><a href="#在线书籍" class="headerlink" title="在线书籍"></a>在线书籍</h4><p><a href="https://rustwiki.org/zh-CN/book/">Rust 程序设计语言</a>，其实就是我买的那本《Rust权威指南》，我觉得在线版的译名更合适。</p>
<p><a href="https://rustwiki.org/zh-CN/rust-by-example/index.html">通过例子学 Rust 中文版</a></p>
]]></content>
  </entry>
  <entry>
    <title>LG Nexus 5X 设置</title>
    <url>/2022/05/13/lg-nexus-5x-settings/</url>
    <content><![CDATA[<p>18年的时候为了开发出海的应用，专门购买了一台二手的LG Nexus 5X，图的就是有谷歌服务，最近又有用到开发，发现一些问题，都是众所周知的原因了，好在都一一解决了，提前是要先安装<code>adb</code>，通过<code>adb</code>来设置。</p>
<h4 id="连接WIFI成功后，提示无法访问互联网"><a href="#连接WIFI成功后，提示无法访问互联网" class="headerlink" title="连接WIFI成功后，提示无法访问互联网"></a>连接WIFI成功后，提示无法访问互联网</h4><p>实际上是可以访问网络，当然谷歌是访问不了的，网上搜索了下，主要是替换验证的网址了，以下方法亲测可用。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">adb shell settings put global captive_portal_detection_enabled 1</span><br><span class="line">adb shell settings put global captive_portal_mode 1</span><br><span class="line">adb shell settings put global captive_portal_use_https 0</span><br><span class="line">adb shell settings put global captive_portal_server connect.rom.miui.com</span><br><span class="line">adb shell settings put global captive_portal_http_url http://connect.rom.miui.com/generate_204</span><br><span class="line">adb shell settings put global captive_portal_https_url https://connect.rom.miui.com/generate_204</span><br></pre></td></tr></table></figure>

<h4 id="无法使用互联网时间"><a href="#无法使用互联网时间" class="headerlink" title="无法使用互联网时间"></a>无法使用互联网时间</h4><p>同样的也是无法谷歌提供的时间服务， 我用的阿里的NTP服务。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">adb shell settings put global ntp_server ntp.aliyun.com</span><br></pre></td></tr></table></figure>

<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://juejin.cn/post/6984621205202403364">开发者必备手机nexus 5x 开发环境预备</a></p>
<p><a href="https://www.v2ex.com/t/639339">Android 系统时间不对有遇到的吗？</a></p>
]]></content>
  </entry>
  <entry>
    <title>记一次adb无法连接的问题</title>
    <url>/2022/06/30/adb-cannot-connect/</url>
    <content><![CDATA[<p>同事的之前是用Mac本开发的，后来换成了小米的本，发现无法用真机和模拟器调试，执行<code>adb devices</code> 命令后直接卡死。网上搜索很多，多是说端口被占用的问题，但是试了好多次，发现端口没有被占用。当时也没有细想，后来冷静下来发现还是得从原理上来寻找问题的根源，于是一大早就把谷歌官网关于adb的文档重新看了下，原来只是使用，并没有深入的去理解原理。adb分为服务端和客户端，端口一般是5037，连接不上的问题实际上网络连接的问题。第一个想到的是防火墙，结果发现不是，后来觉得是不是代理软件的问题，于是就把代理软件关闭了，发现也没有解决问题。后来搜索发现了这篇文章<a href="https://www.cnblogs.com/russinovich/p/12250168.html">如何解决adb卡死，命令不返回的问题</a>，于是从微软官网下载了<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/process-explorer">Process Explorer</a>，发现果然是代理软件的问题，虽然之前虽然有关闭代理软件，因为adb连接的时候会默认加入代理，因为代理无法连接，所有adb的连接就一直不响应。</p>
<p>其实过去几年因为代理而产生的问题也是不少，但每次的还是会中招。另外发现现在的网络确实很厉害，很多问题只要一搜索大都能解决问题，而面对的这个问题的时候，我也陷入了这样的思维，不停的搜索，完全丧失了自己思考的能力。实际上当一个问题搜索很多遍后，依旧没有解，那么多半是一些只有在自己电脑上遇到的特殊问题。</p>
<p>Process Explorer，这个软件真的非常棒，主要还是免费提供的，直接从微软官网下载，我第一次从其他地方下载，没有发现问题而且显示患有问题，应该是一个老版本，后来从官网下载的就没有问题。因为一直使用Mac对于Win的使用经验还是停留在很多年前，发现要深度玩转Win。<a href="https://docs.microsoft.com/zh-cn/sysinternals/">Sysinternals 套件</a>真是宝藏库。</p>
]]></content>
  </entry>
  <entry>
    <title>学习CodePush Server的使用</title>
    <url>/2022/07/01/study-code-push-server/</url>
    <content><![CDATA[<h4 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h4><p>早些时候有使用React Native开发了第一版的App，后来又用Flutter重新开发了。Flutter的开发和用户体验确实比RN要好，我们的App其实一直没有使用，用的是小程序，功能的频繁变更，如果是App的话，可能用户手机上依旧安装的是老的版本，当然也可以通过版本控制来让用强制更新，从而可以避免老版本的问题。另外就是热更新，RN的最大优势就是热更新吧，如果不考虑热更新我肯定还是Flutter优先，RN的热更新主要以微软的CodePush，刚出来的时候免费的，目前已经变成AppCenter，需要付费了。另外React Native 中文网的Pushy，不过没有用过。后来偶然发现<a href="https://github.com/lisong/code-push-server">code-push-server</a>这个开源的项目，最近才想到应该试下这个方案。</p>
<h4 id="CodePush-Server"><a href="#CodePush-Server" class="headerlink" title="CodePush Server"></a>CodePush Server</h4><p>这个项目的初衷是因为微软的CodePush在国内太慢了，另外官方的CodePush Server是没有开源的，只有<a href="https://github.com/microsoft/react-native-code-push">React Native CodePush</a>是开源的。理论上是可以通过React Native CodePush 反推出CodePush Server逻辑的，但是不知道CodePush Server的这个项目是怎么来的，不过能用就好。</p>
<p>不过这个项目在3年前就已经停止更新了，另外React Native CodePush则一直在更新，所以实际会有不少的问题。我用的是Docker搭建的CodePush Server服务，这个很简陋没有什么管理的界面，都是用React Native CodePush命令行来管理的。</p>
<h5 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h5><p><code>package.json</code>中的依赖：<code>&quot;react-native-code-push&quot;: &quot;~5.6.0&quot;</code>，一定要使用小版本，因为<code>5.7</code>以上的版本就会报错。</p>
<h5 id="屏蔽自动生成"><a href="#屏蔽自动生成" class="headerlink" title="屏蔽自动生成"></a>屏蔽自动生成</h5><p><code>react-native-code-push</code>插件会自动在<code>/android/app/build/generated/rncli/src/main/java/com/facebook/react/PackageList.java</code>文件中生成<code>CodePush</code>的类型，但是如果使用CodePush Server的话，就需要手动的更改CodePush的Server路径，而不是微软的，需要的项目下生成<code>react-native-config.js</code>，屏蔽自动生成。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">dependencies</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;react-native-code-push&#x27;</span>: &#123;</span><br><span class="line">            <span class="attr">platforms</span>: &#123;</span><br><span class="line">                <span class="attr">android</span>: <span class="literal">null</span>, <span class="comment">// disable Android platform, other platforms will still autolink</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="Gradle-配置"><a href="#Gradle-配置" class="headerlink" title="Gradle 配置"></a>Gradle 配置</h5><p>需要变更<code>app/build.gradle</code></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">from:</span> <span class="string">&quot;../../node_modules/react-native/react.gradle&quot;</span></span><br><span class="line">apply <span class="attr">from:</span> <span class="string">&quot;../../node_modules/react-native-code-push/android/codepush.gradle&quot;</span> <span class="comment">// 新增此段</span></span><br></pre></td></tr></table></figure>

<h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><p>热更新是分平台，所以需要创建对应的安卓以及iOS的。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">code-push release-react [应用名称]-android android -d Production <span class="comment"># 打包生产版本</span></span><br></pre></td></tr></table></figure>

<p>运行程序，注意热更新也是分为测试和生产版本的。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">react-native run-android --variant=release  <span class="comment"># 生成release版本，默认是Debug版本</span></span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>整个算是跑通了，从业务角度来看，热更新确实很棒。但实际情况就是如果不是大厂，那只能自己搭建CodePush Serser的服务了，不过考虑到这个开源的项目以及很久没人在维护了，所以实际上留下一个巨大坑，后续维护的难度还是有的。</p>
]]></content>
  </entry>
  <entry>
    <title>《苹果上的缺口：我与史蒂夫·乔布斯的生活回忆录》读书笔记</title>
    <url>/2022/06/09/the-bite-in-the-apple-reading-notes/</url>
    <content><![CDATA[<p>《苹果上的缺口：我与史蒂夫·乔布斯的生活回忆录》（The Bite in the Apple: A Memoir of My Life with Steve Jobs），很早之前听说乔布斯第一任，也是乔布斯第一个孩子的母亲，女友克里斯安·布伦南（ChrisannBrennan）写了一本《The Bite in the Apple》的书，我英语太菜，后来发现居然被翻译成中文版了，也是第一时间就购买了，与乔布斯有关的书很多，甚至连乔布斯经常光顾的餐厅的厨师都出书了，此书有点被忽视，人们大都了解成功后的乔布斯，虽然《乔布斯传》也曾描写创建苹果之前的乔布斯的一些事，不过还是有点不够细致，而此书刚好是一种补充。</p>
]]></content>
  </entry>
  <entry>
    <title>Docker安装Gitlab</title>
    <url>/2022/07/19/docker-install-gitlab/</url>
    <content><![CDATA[<h4 id="无法启动问题"><a href="#无法启动问题" class="headerlink" title="无法启动问题"></a>无法启动问题</h4><p>安装的教程主要参考<a href="https://docs.gitlab.com/ee/install/docker.html">官方文档</a>，主要记录下安装遇到的问题，首先因为域名没有下来，使用的是IP，另外端口也是自定义的。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo docker run --detach \</span><br><span class="line">  --publish 47.xxx.xxx.xx:8929:80 \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --restart always \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/config:/etc/gitlab \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/logs:/var/log/gitlab \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/data:/var/opt/gitlab \</span><br><span class="line">  --shm-size 256m \</span><br><span class="line">  gitlab/gitlab-ce:15.1.2-ce.0</span><br></pre></td></tr></table></figure>
<p>这个命令会提示<code>bind: cannot assign requested address</code>，所以就只改端口。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo docker run --detach \</span><br><span class="line">  --publish 8929:80 \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --restart always \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/config:/etc/gitlab \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/logs:/var/log/gitlab \</span><br><span class="line">  --volume <span class="variable">$GITLAB_HOME</span>/data:/var/opt/gitlab \</span><br><span class="line">  --shm-size 256m \</span><br><span class="line">  gitlab/gitlab-ce:15.1.2-ce.0</span><br></pre></td></tr></table></figure>
<p>IP在gitlab.rb配置中修改</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">external_url <span class="string">&#x27;http://47.xxx.xxx.xx&#x27;</span> <span class="comment"># 注意不需要加端口</span></span><br></pre></td></tr></table></figure>

<p>修改完毕后，我就直接执行Docker命令重启了，访问网页直接显示502的界面，然后CPU暴涨，直接卡死，只能控制台重启机器。我以为是机器配置的问题，毕竟是2核4G的，于是我又换了一个低一点的版本13，试了下，发现依旧卡死。最后参考这篇文章<a href="https://blog.csdn.net/shylcok/article/details/117562635">docker 搭建gitlab后，出现502的处理方案之一</a>。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> gitlab gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>

<p>Dcoker启动后先不要访问网页，等一会CPU降下去后再执行这个命令。</p>
<h4 id="初始化密码问题"><a href="#初始化密码问题" class="headerlink" title="初始化密码问题"></a>初始化密码问题</h4><p>之前安装的是13，密码在第一次访问时会显示重置密码的网页，但是安装的15，发现没有这个重置密码的，只有一个登录，原来从14开始初始密码放置在<code>/etc/gitlab/initial_root_password</code>，找到后直接登录后再重置。</p>
<p>安装Gitlab也算有好多次了，之前主要是原生的安装并没有用过Docker，另外吐槽下这玩意，动不动就CPU爆满，真的不是很友好。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://blog.csdn.net/timonium/article/details/119451755">Linux初装gitlab初始默认密码</a></p>
]]></content>
  </entry>
  <entry>
    <title>如净和尚语录</title>
    <url>/2021/05/27/2021-05-27-monk-rujing-quotes/</url>
    <content><![CDATA[<h4 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h4><p>没有去天童寺之前我就在网上阅读了《如净和尚语录》，后来就想着有没有纸质版的，刚好去天童寺的时候，我请了一本，是线装繁体竖排本，发现很多字不知道读音，有点阅读困难，另外携带也不太方便，因为是16开的。后来在孔夫子网上淘到了一本应该自己印刷的带拼音的简体版本，而且还是32开的。那段时间经常拿着在地铁上读，确实让我读进去了一些内容，不过不足的是发现里面居然缺少了大概两页的内容，另外有些无法打出来的字体直接用问号显示。于是就有想自己编辑一本带拼音的繁体版本，虽然不到一百页的内容，实际整理的时间也差不多有半个月时间，前后又反复的阅读修正了一些错误。当时想着再印刷出来，不过实际上到现在也没有印刷出来，这个版本的PDF非常适合在手机上阅读，所以也觉得没有必要印刷出来了。</p>
<p>《如净和尚语录》注音版我在Github上建了个项目，并把PDF文件放在了方面，有兴趣的可以拉下来读读。<a href="https://github.com/jasper2007111/tiantong-rujing">项目地址</a></p>
<h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>后来那本32开的小册子在去年去郑州出差的时候，走的太急，落在了场子里面，希望有缘人能得到。我自己整理的这个PDF注音版本现在也经常在手机偶尔看看。</p>
]]></content>
  </entry>
  <entry>
    <title>天童如净禅师研究</title>
    <url>/2022/09/16/study-of-zen-master-tiantong-rujing/</url>
    <content><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>早前为了了解如净禅师，整理过《如净和尚语录》的简体拼音版，当然有段时间也试图寻找更多关于禅师的资料，不过都不成体系。后来得益于<a href="https://cbetaonline.cn/zh">CBETA Online</a>系统提供的线上众多禅师的语录资料，才有以下的研究。</p>
<h3 id="何时入住天童寺"><a href="#何时入住天童寺" class="headerlink" title="何时入住天童寺"></a>何时入住天童寺</h3><p>如净禅师是什么时间入住天童寺的呢？单从如净禅师在天童寺上堂的记录来看不好推断，后来发现如净禅师离开净慈寺后石田法薰禅师作为继任，如净禅师住天童寺上堂语录中有提到“浙翁遗书至”，而石田法薰净慈寺上堂语录中也有“浙翁遗书至”。</p>
<h4 id="浙翁遗书"><a href="#浙翁遗书" class="headerlink" title="浙翁遗书"></a>浙翁遗书</h4><blockquote>
<p>浙翁遗书至。上堂。八月十八钱塘潮。浙翁声价泼天高。尽教四海弄潮手。彻底穷渊辊一遭。重拣择不辞劳。要透龙门继凤毛。忽然收卷还源去。万古曹溪风怒号。</p>
</blockquote>
<p>出自《如净和尚语录·明州天童景德寺语录》</p>
<blockquote>
<p>浙翁遗书至。上堂。千五百人善知识。不念吾宗正岑寂。五峰趯倒浪翻空。大地山河俱失色。金风体露。叶落归根。只堪惆怅不堪陈。</p>
</blockquote>
<p>出自《石田法薰禅师语录·临安府净慈报恩光孝禅寺语录》</p>
<p>因为之前浙翁禅师曾经在天童寺主持过，如净禅师语录中小佛事章节有一篇《为浙翁入祖堂》。</p>
<blockquote>
<p><strong>为浙翁入祖堂</strong></p>
<p>昔从太白凌霄去。今自凌霄太白来。不堕去来生死路。  </p>
<p>展真云：看堂堂面目笑咍咍。且道，笑向阿谁？</p>
<p>以真指祖云：大家元是主中主，惯入驴胎与马胎。</p>
<p>出自《如净和尚语录·明州天童景德寺语录》</p>
</blockquote>
<p>石田法薰在入住净慈寺之前是在建康府太平兴国禅寺，在《建康府太平兴国禅寺语录》中明确的写到“<strong>师于嘉定十六年四月二日入院</strong>”，发现石田法薰在太平兴国禅寺的上堂语录，最后有明确时间的是嘉定十七年端午，再一转就是已经在净慈寺了，我一开始根据如净禅师关于浙翁遗书至，明确写道是八月份，所以一开始推断石田法薰禅师是嘉定十七年入住的净慈寺，但最后根据石田禅师语录中行状。</p>
<blockquote>
<p>庙堂精选择。乃以师补处。宝庆元。有  旨迁南山净慈。端平二。复有  旨。迁北山灵隐。两山居各十年。</p>
<p>出自《石田法薰禅师语录·行状》</p>
</blockquote>
<p>确定了石田法薰禅师入住净慈寺的时间后，再根据石田法薰在净慈寺的语录判断收到浙翁遗书的时间是宝庆元年的八月份。再看如净禅师收到浙翁遗书的时间，基本在天童寺语录的后面，根据天童寺上堂语录推断，最后推断如净禅师是在<strong>嘉定十七年下半年</strong>去的天童寺。</p>
<p>PS：浙翁禅师，全称浙翁如琰（yǎn），确实圆寂于宝庆元年，所以如净禅师是在宝庆元年的前一年，即嘉定十七年下半年入天童基本无误。</p>
<blockquote>
<p>派和尚遗书至。上堂。万派朝宗一派收。扬清激浊几经秋。忽然到底都干却。露柱灯笼笑不休。且道。笑箇什么。下座同诣灵凡。羞法供养。</p>
<p>出自《如净和尚语录·再住净慈禅寺语录》</p>
</blockquote>
<p>原来没有注意，实际这个派和尚就是无际了派了，正是因为无际了派禅师推荐，如净禅师才入驻天童寺。</p>
<h3 id="何时圆寂"><a href="#何时圆寂" class="headerlink" title="何时圆寂"></a>何时圆寂</h3><p>发现时住阿育王寺的无准师范收到了如净禅师的遗书。</p>
<blockquote>
<p>前住天童净和尚遗书至。上堂。太白峰前收阵脚。鉴湖归唱村田乐。无端调转入新丰。谁知错处非常错。直得洞水逆流。乳峰倒卓。石女攒眉。木人泪落。此曲如今谁共闻。越山无际天无垠。</p>
<p>出自《无准师范禅师语录·住庆元府阿育王山广利禅寺语录》</p>
</blockquote>
<p>这个记录在《无准师范禅师语录·住庆元府阿育王山广利禅寺语录》的前段，是刚入住没有多久就收到的，所以我一直觉得只要知道无准师范是什么时间入住的阿育王寺就可以推出如净禅师圆寂的年份了，后来在《径山无准和尚入内引对升座语录》找到了相关的线索。</p>
<blockquote>
<p>绍定六年七月十五日。  </p>
<p>皇帝御修政殿引见师领本寺僧众山寿毕。提举都知太尉张延庆引见祝皇帝寿。 </p>
<p>师捧香云。根同天地。秀发山川。薰霭宝炉。瑞腾沙界。恭为祝延皇帝陛下圣躳万岁。万岁。万万岁。指七金山为寿山。巍巍不动。以四大海为福海。渺渺无穷。长居北极之尊。永作中天之主。金枝玉叶。育秀腾芳。八表归仁。万邦入贡。 </p>
<p>都知太尉云。请长老敷演。  </p>
<p>乃奏云(臣)僧(师范)。一介庸衲。生于西蜀。浪游湖海。今四十年。于道无闻。每切自愧。夙生何幸。两蒙<br>睿旨。扫洒庆元育王。而至双径。自去年八月领职。与四方衲子朝夕禅诵。仰报 圣恩。</p>
<p>出自《径山无准和尚入内引对升座语录》</p>
</blockquote>
<p>这个是无准师范在入住径山寺后的第二年受到了皇家的召见，召见时间是绍定六年七月十五，而且提到他是去年八月到的径山寺，也就是绍定五年八月，大部分的语录里面都会记录比如中秋，端午之类的节日。根据无准师范在阿育王山广利禅寺的语录反复推断发现，收到如净禅师遗书是宝庆三年，时间应该是宝庆三年七月十四到九月九日之间，大概可以推断如净禅师应该是这个时段圆寂的。</p>
<h3 id="语录"><a href="#语录" class="headerlink" title="语录"></a>语录</h3><p>现存的两本语录《如净和尚语录》、《天童山景德寺如净禅师续语录》。《如净和尚语录》应该是刊行版本，在后世资料都引用的是这个版本里面的内容。《天童山景德寺如净禅师续语录》有人认为是后人伪造，所以暂且不论。这里主要研究下语录发行的几个时间点，按时间顺序排序。</p>
<blockquote>
<p>狮子吼无畏说。百兽闻之皆脑裂。天衣举似箇中人。迈古超今离途辙。</p>
<p>绍定戊子中秋　天衣住山比丘文蔚谨跋</p>
</blockquote>
<p>绍定戊子即绍定元年，也就是宝庆三年的下一年，因为宝庆只有三年。</p>
<blockquote>
<p>净禅师得无师句。用逸格机。娄至德已前。青叶髻之后。突出无面目底。糙暴生狞。通身是眼。要看是录。予保。渠未梦见此老脚跟下汗臭气在。</p>
<p>绍定改元开炉日　灵隐高原祖泉敬跋</p>
</blockquote>
<p>绍定改元即绍定元年，根据宋代的《禅苑清规》记载开炉日为农历十月一日，闭炉为农历二月一日，大概就是类似现代的烧暖气吧，所以就是绍定元年十月一日的时候，灵隐寺的高原祖泉题写了跋。</p>
<blockquote>
<p>绍定二禩岁在己丑桐柏散吏吕潇　敬书</p>
</blockquote>
<p>这个是如净禅师语录序的题款，实际即绍定二年，虽然没有写几月几日，但应该是在同年的六月初伏之前。</p>
<blockquote>
<p>岁次己丑六月初伏日。小师广宗募刻板。临安府灵隐景德禅寺住持祖泉挍勘焉。</p>
</blockquote>
<p>这个是绍定二年，也是己丑年，六月初伏日刻板的。</p>
<h4 id="灵隐高原"><a href="#灵隐高原" class="headerlink" title="灵隐高原"></a>灵隐高原</h4><p>语录作跋的是高原禅师，虽不清楚禅师与如净禅师的关系，但也可见一般。实际上这确实是一位了不起的禅师，在当时也是很有威望的。</p>
<p>高原禅师与无准禅师的关系又非同一般，曾经住梨洲的时候，无准禅师也是一块同行的。后来高原禅师圆寂后无准禅师也收到了讣音，可见关系之一般。</p>
<blockquote>
<p>灵隐高原和尚讣音至。上堂。来无所从。南高峰。北高峰。去无所至。东㵎水。西㵎水。幻泡忽灭。证得乌龟成白鳖。清风未已。须信高原元不死。既不死。且道在什么处。拈起拄杖云。见么。见么。卓一下。云。认着依前不相似。</p>
<p>出自《无准师范禅师语录·住庆元府阿育王山广利禅寺语录》</p>
</blockquote>
<p>《率庵梵琮禅师语录》中有一个偈语，是送高原从台州去灵隐的。</p>
<blockquote>
<p>寄台州瑞岩高原禅师住灵隐</p>
<p>水出在高原。源深到冷泉。饮者秃却舌。嗅者鼻孔穿。口鼻两俱丧。妙用绝正偏。侧耳与招手。听猿同呼猿。藤萝影里石磊磊。双㵎合流波涟涟。南来北来脚下过。欲知冷暖待驴年。</p>
</blockquote>
<p>如净禅师在建康府清凉寺后的下一个住锡的就是台州瑞岩，推测应该是接的高原禅师位置，再大胆的猜想一下，或许就是高原禅师的推荐了。</p>
<p>《北磵居简禅师语录·常州顯慶禪寺語錄》写到收到了高原禅师的訃音，可见关系一般，而这位禅师晚年入住了净慈寺。</p>
<blockquote>
<p>高原和尚讣至。上堂。二月十一。人从北山来。报高原死也。似者般僧。只患多不患少。哑。更覔一箇。如星中月。砂里金。簸土扬尘无处寻。</p>
</blockquote>
<p>《西岩了慧禅师语录·行状》中写道西岩了慧禅师早年跟随过高原禅师。</p>
<blockquote>
<p>十九薙发。灯授以般舟念佛三昧。非其志也。辤往成都讲席。习性宗经论。俄叹曰。义学岂究竟法哉。染指足矣。去谒坏庵照于昭觉。一见心许法器。趣其南询。乃束包出三峡。由湖湘而至江浙。见浙翁琰于径山。闻高原泉孤硬径直。往依之。同枯寂甘如饴。泉迁台之瑞岩。令师与俱。泉问。山河大地。是有是无。拟开口。即喝出。以偈呈。即曰没交涉。偶侍次。令书龙门三自省。白杨示众语。泉阅之笑曰。写字与做言何尽得。争奈没交涉何。师愤悱莫伸。泉曰。吾方便娄矣。汝自不顾。盖缘法不在此。其往见雪窦乎。时主雪窦席者。佛鉴无准范也。</p>
</blockquote>
<p>“孤硬径直”或许就是对这位禅师最好的表述吧，不知道当时有没有语录还是后来遗失的缘故，只有个别零散的一些语录夹杂在其他资料里面，而且在如净禅师圆寂后绍定二年二月份的时候高原禅师也圆寂了，而绍定元年的十月一日的时候禅师才为《如净和尚语录》作了跋。</p>
<h3 id="生平"><a href="#生平" class="headerlink" title="生平"></a>生平</h3><p>解决了入住天童寺的时间以及圆寂的时间，就可以大体推断下禅师的生平了。</p>
<blockquote>
<p>师于嘉定三年十月初五日。于华藏褒忠禅寺。受请入寺。</p>
<p>出自《如净和尚语录·住建康府清凉寺语录》</p>
</blockquote>
<p>从嘉定三年到宝庆三年，出世主持丛林十八年时间。</p>
<blockquote>
<p>师六坐道场未禀承众或是请师云待我涅槃堂里拈出果临终拈香云  </p>
<p>如净行脚四十余年。首到乳峰。失脚堕于陷穽。此香今不免。拈出钝置我前住雪窦足庵大和尚。</p>
<p>并书辞世颂云。</p>
<p>六十六年罪犯。弥天打箇𨁝跳。活陷黄泉。咦。从来生死不相干。</p>
<p>出自《如净和尚语录·偈颂》</p>
</blockquote>
<p>根据禅师圆寂时六十六岁，即宝庆三年的时候，根据古人过年即增一岁，推断禅师出生于绍兴三十二年即1162年，四十九岁的时候入住清凉寺，开始了主持生涯。但不太确定如净禅师在华藏褒忠禅寺具体是什么职务，应该不是主持了，搜索了下华藏褒忠禅寺基本没有相关的资料，大致推测是现在无锡华藏寺。</p>
<p>如净禅师大概什么时间跟随的雪窦足庵呢？宋人楼钥的《攻愧集》有一篇《雪窦足庵禅师塔铭》，根据塔铭的记载足庵禅师是绍熙二年圆寂的，在雪窦山八年时间，即淳熙十一年至绍熙二年，淳熙十一年的时候如净禅师是二十三岁，到绍熙二年如净禅师是三十岁，所以如净禅师跟随足庵禅师的大致时间段也在这个范围。大致推算从三十岁开始到四十九岁，十八年间应该是在各大丛林参学时间。</p>
<p>通过研究当时禅师的语录，发现围绕着当时南宋首都临安的这些有名的寺院大都是临济宗在主持，而且各个主持之间还有着密切的联系，比如无准师范和石田法薰，都是破庵的门人，无准师范系在后面的日子基本上占据丛林大部。如净禅师在离开足庵禅师后的十八年间，在各大丛林的参学，也让他结识如临济宗的如松原、高原等禅师，这是这段时间的参学，使得禅师的禅风有了兼容五家之风，禅师生前一直不说自己的师承，不太清楚具体的原因，或许也有难言之隐，毕竟在当时的五山中都是临济宗的。另外或许在参学了不同宗派后，禅师本身并不认可宗派的做法，所谓自成一体，八面受敌。</p>
<blockquote>
<p>颀然豪爽。丛林号曰淨长。礼真歇塔偈云。歇尽真空透活机。儿孙相继命如丝。而今倒指空肠断。杜宇血啼花上枝。示众云。心念纷飞。如何措手。赵州狗子佛性无。只今无字铁扫帚。扫处纷飞多。纷飞多处扫。转扫转多。扫不得处𢬵命扫。昼夜竪起嵴梁。勇勐切莫放倒。忽然扫破太虗空。千差尽豁通。宗趣可知矣。有问。瑞世嗣谁。曰。如淨。问。道号谓何。曰。淨长。后于太白山感疾。退席。下涅槃堂。始大哭为鑑足庵烧香。入寂时。侍者告以法堂宝盖镜堕于座上。曰。镜枯禅至矣。如其言。</p>
<p>《枯崖漫录·庆元府天童如净禅师》</p>
</blockquote>
<p>临终大哭，这在一般禅师中很少见，作为足庵门下，足庵的老师大休宗珏也曾入住过天童寺，而大休宗珏的师父<strong>真歇清了</strong>和<strong>宏智正觉</strong>禅师同出<strong>丹霞子淳</strong>门下，所以对于当时的曹洞宗而言天童寺有着不一样的情节，再加上禅师“颀然豪爽”的性格，本可以在天童有所作为，可惜因病而止。</p>
<h4 id="如净禅师圆寂后的天童寺主持"><a href="#如净禅师圆寂后的天童寺主持" class="headerlink" title="如净禅师圆寂后的天童寺主持"></a>如净禅师圆寂后的天童寺主持</h4><p>如净禅师之后是的天童寺的主持，但是都不太准确，但都是临济宗的，以下是后面几年的主持：  </p>
<p><strong>枯禅镜</strong>，这个是根据《枯崖漫录》关于如净禅师的记载得出的。  </p>
<p><strong>痴绝道冲</strong>，嘉熈三年己亥十月初三日入驻，於淳祐甲辰即淳祐四年七月十四日去灵隐禅寺入驻。四年多时间。</p>
<p>淳祐五年至淳祐十二年，七年多时间主持未知。  </p>
<p><strong>西岩了慧</strong>，淳佑十二年十一月十五日入驻，居五年。  </p>
<h3 id="其他资料中的如净禅师"><a href="#其他资料中的如净禅师" class="headerlink" title="其他资料中的如净禅师"></a>其他资料中的如净禅师</h3><h4 id="南宋"><a href="#南宋" class="headerlink" title="南宋"></a>南宋</h4><p>目前我能找到的对如净禅师墨迹的题跋，这两位禅师都是南宋时期的也，离如净禅师圆寂后的时间不是很长，那会还是有禅师的墨迹留世，当然现在我们已经无法看到这些墨迹了。</p>
<p>《无文道灿禅师语录·䟦天童净和尚寿无量墨迹》，这位禅师是南宋宝佑之后，可见那会如净禅师禅师的墨迹还是有留世的。</p>
<blockquote>
<p>䟦天童净和尚寿无量墨迹</p>
<p>无量拳头能杀而不能活。天童拳头能活而不能杀。闲云亲中二老之毒。山河大地草木丛林至今忍痛未已也。虗空霹未尝不殷然天地间。雅维那于展卷处忽然轰入髑髅。政恐不及掩耳。</p>
</blockquote>
<p>实际后来发现无文道灿禅师还为如净禅师起棺</p>
<blockquote>
<p>南庵主起棺</p>
<p>见了天童便跺跟。佛来有口不能吞。莓苔绿遍门前路。坐看春风四十年。无禅道可论。无佛法可传。拾薪樵子无可寻之迹。衔花飞鸟无可见之缘。折脚铛中烂煑乾坤清气。长柄杓内舀干沧海根源。了生死去来之如幻。观涅槃寂灭之现前。回首鉴湖青山未老。笑携藜杖白首言蔙。这箇又是某人可见之踪迹。设若放阔步于藕丝孔中。入正定于微尘影里。诸人又向什处与此老相见。阎浮树在海南边。</p>
</blockquote>
<p>禅师与如净禅师曾有交集，时间在如净禅师住健康府清凉寺。</p>
<blockquote>
<p>璨禅客至上堂。金刚宝剑入红炉，煆出杨岐三脚驴。</p>
<p>出自《如净和尚语录·住建康府清凉寺语录》</p>
</blockquote>
<p>《希叟绍昙禅师广录·䟦天童净和尚墨迹。诸老䟦后》，这位禅师是南宋淳佑年间人。</p>
<blockquote>
<p>䟦天童净和尚墨迹。诸老䟦后</p>
<p>太白死句中有活句。诸老活句中有死句。死活向上有事在。拟议寻思。吴元济不待夜入蔡州城。已被擒捉了也。具透关眼者。切忌扫雪求迹。年月日。</p>
</blockquote>
<p>《虚堂和尚语录·行状》可以得知，禅师当时有去过净慈，当时正是如净禅师主持。</p>
<blockquote>
<p>道过金山。掩室和尚。一见甚器重。</p>
</blockquote>
<p>这里提到虚堂禅师有见过掩室和尚，而如净禅师在首次入住净慈寺语录中有记录到这位禅师。</p>
<blockquote>
<p>谢掩室和尚。上堂。掩室摩竭国。老胡豁开顶门。杜口毗耶城。净名败缺话柄。提上古两端公案。发今朝一段威光。所以宾主历然。江湖有在。还知么。不是诗人不献诗。春风吹作鹧鸪词。</p>
<p>出自《如净和尚语录·临安府净慈禅寺语录》</p>
</blockquote>
<p>这位掩室和尚即掩室善开禅师，松源崇岳禅师的法嗣。如净禅师也曾在松源崇岳处参学。掩室和尚当时在金山，所以再联系到虚堂禅师行状中的“净和尚”应该就是当时的如净禅师。</p>
<blockquote>
<p>由是回浙到净慈。见净和尚。净问云。尔还知所生父母通身红烂。在荆棘林中么。师云。好事不在匆忙。净随后打一拳。师展两手云。且缓缓。</p>
<p>出自《虚堂和尚语录》</p>
</blockquote>
<h4 id="元代"><a href="#元代" class="headerlink" title="元代"></a>元代</h4><p>月江正印是元代一位禅师，曾经在元顺帝元统元年入住阿育王寺，而且归在佛祖赞章节中，可见对于禅师的认可。</p>
<blockquote>
<p>天童净和尚</p>
<p>两头白牯眉毛竖。三面狸奴鼻孔凹。一只皮靴能剔脱。月明金凤宿龙巢。</p>
<p>出自《月江正印禅师语录·佛祖赞·天童净和尚》</p>
</blockquote>
<h4 id="明清以后"><a href="#明清以后" class="headerlink" title="明清以后"></a>明清以后</h4><p>如净禅师虽然也曾两次入住净慈寺，但是清代编撰的《净慈寺志》却没有关于如净禅师的记录，同样是清代的《天童寺志》直接把禅师归入到元代。这些都说明元代之后，如净禅师逐渐被人们遗忘，或许当时的资料也是不全。</p>
<h3 id="如净与道元"><a href="#如净与道元" class="headerlink" title="如净与道元"></a>如净与道元</h3><p>按道元的记载他是宝庆元年五月一日见的如净禅师，这时如净禅师在天童寺已经半年多了，到宝庆三年如净禅师圆寂，实际上道元禅师跟如净禅师学法也就两年时间。看起来时间不长，但或许在参学的过程中道元禅师其实已有自己的答案，只是需要一个验证而已，刚好在对的时间遇到了如净禅师。</p>
<h4 id="只管打坐"><a href="#只管打坐" class="headerlink" title="只管打坐"></a>只管打坐</h4><p>道元创建日本的曹洞宗，提倡直观打坐，不参话头，但如净禅师语录看不出如净禅师有这样的观点，实际上反而可以看出当时也是参公案的。</p>
<blockquote>
<p>上堂。心念分飞。如何措手。赵州狗子佛性无。只箇无字铁扫帚。扫处纷飞多。纷飞多处扫。转扫转多。扫不得处拼命扫。昼夜竖起脊梁。勇猛切莫放倒。忽然扫破太虚空。万别千差尽豁通。</p>
<p>出自《如净和尚语录·明州天童景德寺语录》</p>
</blockquote>
<p>再看元代智彻禅师《禅宗决疑集·禅林静虑门》一节。</p>
<blockquote>
<p>此举丛林纲纪坐禅寂静一节。古来佛法兴隆丛林茂盛。天龙协佑施主归崇。受用现成常住丰厚。处处安禅着众。人人慕道精修。或三五百之多僧。或一二千之众士。东西两序执事营为。内外一如铺心若地。箇箇如因识果。人人见道明心。三德六味总无亏。四事七珍皆具足。所以僧堂中学般若菩萨。十指不点水。百事不干怀。粥饭之余专心在道。上根利器者。不离单位坐究一乘。昼夜惺惺端持正观。后来各人有大发明成大法器收因结果。向丛林中为大宗匠。开大炉鞴煆炼学人。做工夫处。先举上床一种。威仪事在精诚。须要跏趺端坐。眼端鼻鼻端脐。牙关紧咬拳头紧捏。待喘息已定。举箇话头。僧问赵州。狗子还有佛性也无。州云无。不用动口动舌。默默参究以悟为期。此是丛林中坐禅仪式样子。众所共知。</p>
</blockquote>
<p>打坐时，参赵州狗子佛性无这一公案，是当时禅门普遍的一种方式，所以如净禅师也并没有出其左右。</p>
<p>但是在北宋的《禅苑清规·坐禅仪》中，并没有参公案的方式，所以道元更多的应该是吸收这个比较多一点。</p>
<blockquote>
<p>尽学般若菩萨。先当起大悲心。发弘誓愿。精修三昧。誓度众生。不为一身独求解脱尔。乃放舍诸像。休息万事。身心一如。动静无间。量其饮食不多不少。调其睡眠不节不恣。欲坐禅时。于闲静处厚敷坐物。宽系衣带。令威仪齐整。然后结跏趺坐。先以右足安左䏶上。左足安右䏶上。或半跏趺坐亦可。但以左足压右足而已。次以右手安左手上。左掌安右掌上。以两手大拇指面相拄。徐徐举身前欠。复左右摇振。乃正身端坐。不得左倾右侧前躬后仰。令腰脊头项骨节相拄状如浮屠。又不得耸身太过。令人气急不安。要令耳与肩对。鼻与脐对。舌拄上腭唇齿相着。目须微开免致昏睡。若得禅定。其力最胜。古有习定高僧坐常开目。向法云圆通禅师亦诃人闭目坐禅。以谓黑山鬼窟。盖有深旨。达者知焉。身相既定。气息既调。然后宽放脐腹。一切善恶都莫思量。念起即觉。觉之即失。久久忘缘。自成一片。此坐禅之要术也。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>《启示录2：打造优秀的产品团队》读后感</title>
    <url>/2022/08/20/empowered-ordinary-people-extraordinary-products/</url>
    <content><![CDATA[<p>因为之前看过《启示录：打造用户喜爱的产品》，看到这本时，我当时想着是否要入手，看了下目录似乎跟《启示录》不一样，但当时并入手，后来看一些豆瓣的评价，与前作相比评分不高，主要是集中在章节多，内容不够深入，所以更不想入手了。最近的一些事让意识到产品的重要性，于是在京东的试读上，看了点开头，提到了坎贝尔这个人，这个其实硅谷很有名的被誉为硅谷教练的人物，之前在《乔布斯传》中有，但我没有想到坎贝尔对于谷歌、脸书这样的公司也是影响，这个是后话，总之我入手《启示录2：打造优秀的产品团队》这本书，不到300页的，大部分在上班路上的地铁上看到，最后这点在家看完了。</p>
<h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><p>先说说这个书名吧，《启示录：打造用户喜爱的产品》，原书名是《Empowered:  Ordinary People, Extraordinary Products》，如果直译的应该是《赋能：普通人，非凡产品》，但可能是为了凑前作《启示录》的热度，起了这么一个名字。</p>
<p>书中倡导自主型团队，我感觉的这是一种过于理想的团队，或许这应该是创业团队的理想状态。大家志同道合，相互贡献自己的知识，为一个共同的产品愿景努力。有书中的团队，也让想到过去或者现在所在团队的一些问题。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><h5 id="面向老板型团队"><a href="#面向老板型团队" class="headerlink" title="面向老板型团队"></a>面向老板型团队</h5><p>几年前我所在的一个公司就是这样现状，老板很有钱，决定超着互联网的方向玩一把，当时正值移动应用兴起的2014年，大家都在做APP，当时的开发团队其实比较全，客户端有iOS、安卓，服务端、前端、测试。我当时负责iOS，安卓的人当时比我们iOS多些。现在回想起来，那会技术团队人员配置最全，设计团队只是按项目配的人并没有设计负责人，所有人向当时的一位类似项目经理的人汇报。现在回想起来，当时是没有产品经理的，如果真的要找一位，那可能就是并不是常来但总是不断提需求的老板吧。后来的一些项目也设置过产品的岗位，但这名产品是项目经理转过来的，并不专业，完全是他们设计他们的，我们拿到了就得开发，而我们觉得这个功能有问题，那会总感觉我们想把产品做好，但总是做不好的怪圈。</p>
<p>这样的现象，我把称为面向老板型团队，当时没有产品经理是一个最大问题，老板自己想着如何开发产品，然后将这种需求直接给开发团队，并没有转换成合理的产品需求，如果老板比较强势的话，即使大家觉得有问题，在一次次沟通无效后，最终在变成了妥协，而后的团队的一些人就转变成面向老板的倾向，不再关心产品本身，最终这样的团队注定成功不了，事实也是这样。</p>
<h5 id="面向业务型团队"><a href="#面向业务型团队" class="headerlink" title="面向业务型团队"></a>面向业务型团队</h5><p>后来我去了一家传统公司，当时招技术，本想着技术可以对这个业务有一定的赋能。但慢慢的发现陷入了书里提到的功能性团队的境地，而我更愿意称为面向业务型团队。传统公司的问题可能更严重，尤其是中小型的，这类企业的大都是通过贷款来做业务，所以每一分钱都需要有产出，所以这类公司很难在产品上有预先的投入，所以我们技术这边往往是平时不太忙，一旦有新的业务来了，我们就得立马开发业务相对应的功能，这几乎注定每次都是草草开始，只能先做一些功能让业务先用。后来我渐渐发现除了技术团队的投入不足外，我们最大问题就是没有产品，没有产品愿景，有的只是不停变化的业务。</p>
]]></content>
  </entry>
  <entry>
    <title>Python简单Http服务器</title>
    <url>/2022/09/20/python-http-server/</url>
    <content><![CDATA[<p>Python自带Http服务器，我一般是在共享文件时使用，直接在需要共享的目录下运行命令即可启动服务，不过有时候传输不是很稳定，重启一下就好了。</p>
<h3 id="Python2-版本"><a href="#Python2-版本" class="headerlink" title="Python2 版本"></a>Python2 版本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer <span class="number">8080</span></span><br></pre></td></tr></table></figure>

<h3 id="Python3-版本"><a href="#Python3-版本" class="headerlink" title="Python3 版本"></a>Python3 版本</h3><p>之前主要用Python 2.7的版本，随着2.7的终结加上macOS 12.3已经彻底移除了python 2.x的版本，只能使用3的版本了，Python 3的这个Http服务器命令似乎更简单一些。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 -m http.server <span class="number">8001</span></span><br></pre></td></tr></table></figure>

<h3 id="跨域配置"><a href="#跨域配置" class="headerlink" title="跨域配置"></a>跨域配置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># Python 3</span></span><br><span class="line">    <span class="keyword">from</span> http.server <span class="keyword">import</span> HTTPServer, SimpleHTTPRequestHandler, test <span class="keyword">as</span> test_orig</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span> (*args):</span><br><span class="line">        test_orig(*args, port=<span class="built_in">int</span>(sys.argv[<span class="number">1</span>]) <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="number">8000</span>)</span><br><span class="line"><span class="keyword">except</span> ImportError: <span class="comment"># Python 2</span></span><br><span class="line">    <span class="keyword">from</span> BaseHTTPServer <span class="keyword">import</span> HTTPServer, test</span><br><span class="line">    <span class="keyword">from</span> SimpleHTTPServer <span class="keyword">import</span> SimpleHTTPRequestHandler</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CORSRequestHandler</span> (<span class="title class_ inherited__">SimpleHTTPRequestHandler</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">end_headers</span> (self):</span><br><span class="line">        self.send_header(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">        SimpleHTTPRequestHandler.end_headers(self)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    test(CORSRequestHandler, HTTPServer)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>RabbitMQ实践</title>
    <url>/2022/10/12/rabbitmq-practices/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>目前使用Docker进行安装，<code>15672</code>是网页端访问口，<code>5672</code>是程序端访问接口。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d --name my-rabbit -p 15672:15672 -p 5672:5672 -e RABBITMQ_DEFAULT_USER=username -e RABBITMQ_DEFAULT_PASS=password rabbitmq:3.9-management</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个命令是后台运行，<code>username</code>以及<code>password</code>需要替换成你自己的。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="自动连接"><a href="#自动连接" class="headerlink" title="自动连接"></a>自动连接</h4><p>Spring Boot启动后会自动连接RabbitMQ，这个在测试环境下可以设置不自动连接。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">direct:</span></span><br><span class="line">        <span class="attr">auto-startup:</span> <span class="literal">false</span> <span class="comment"># 测试环境下屏蔽掉RabbitMQ的自动重连</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">auto-startup:</span> <span class="literal">false</span> <span class="comment"># 测试环境下屏蔽掉RabbitMQ的自动重连</span></span><br></pre></td></tr></table></figure>

<h4 id="自动创建队列"><a href="#自动创建队列" class="headerlink" title="自动创建队列"></a>自动创建队列</h4><p>如果监听了没有创建的队列会报异常错误，可以用注解的时候自动创建队列。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queuesToDeclare = @Queue(&quot;some-queue&quot;))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">someMethod</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// TODO Some Things</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="队列不消费"><a href="#队列不消费" class="headerlink" title="队列不消费"></a>队列不消费</h4><p>这个问题，偶然间我一不小心把RabbitMQ重启，当然没有消息，过了一会发现队列中的新数据并没有消费。最后重启了消费者的服务后，就正常了。所以这个问题，如果不及时发现的话，最终会导致队列出错的，在大项目的时候还是需要注意。</p>
]]></content>
  </entry>
  <entry>
    <title>Flex与Bison</title>
    <url>/2022/10/30/flex-and-bison/</url>
    <content><![CDATA[<p>最早是读了《Unix编程环境》，在书中有展示如何用Lex和Yacc制作一门编程语言，后来就买了《Lex与Yacc》，Flex、Bison分别是Lex、Yacc的现代版本，于是又买了《Flex与Bison》，《Flex与Bison》实际上是《Lex与Yacc》的续作，都是同样的作者。书虽然简单读了下，但里面的例子一直没有尝试的运行下。</p>
<h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><p>电脑：macOS Monterey，12.5</p>
<p>Flex版本2.6.4，Bison版本3.8.2。Mac下直接使用brew安装，安装完成后记得根据提示把环境配置下。</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">brew install flex 
brew install bison<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>GCC版本，我使用<code>gcc -v</code>命令后，实际出现的是clang的版本。</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">gcc -v
Apple clang version 14.0.0 (clang-1400.0.29.102)
Target: x86_64-apple-darwin21.6.0
Thread model: posix
InstalledDir: &#x2F;Applications&#x2F;Xcode.app&#x2F;Contents&#x2F;Developer&#x2F;Toolchains&#x2F;XcodeDefault.xctoolchain&#x2F;usr&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="WC例子"><a href="#WC例子" class="headerlink" title="WC例子"></a>WC例子</h3><p>书中第一个例子类似unix下wc的例子。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"> <span class="token operator">%</span><span class="token punctuation">&#123;</span>
 <span class="token keyword">int</span> chars <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
 <span class="token keyword">int</span> words <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
 <span class="token keyword">int</span> lines <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
 <span class="token operator">%</span><span class="token punctuation">&#125;</span>
 
<span class="token operator">%</span><span class="token operator">%</span>
 <span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span>Z<span class="token punctuation">]</span><span class="token operator">+</span>   <span class="token punctuation">&#123;</span> words<span class="token operator">++</span><span class="token punctuation">;</span> chars <span class="token operator">+=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>yytext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
 \n          <span class="token punctuation">&#123;</span> chars<span class="token operator">++</span><span class="token punctuation">;</span> lines<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
 <span class="token punctuation">.</span>           <span class="token punctuation">&#123;</span> chars<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token operator">%</span><span class="token operator">%</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> aggv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token function">yylex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%8d%8d%8d\n"</span><span class="token punctuation">,</span> lines<span class="token punctuation">,</span> words<span class="token punctuation">,</span> chars<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>书中的例子main函数都没有写返回值，编译的时候回报warn了，我都加了返回参数。</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">flex fb1-1.l # 上面的例子保存为l后缀的文件
gcc lex.yy.c -ll # 这一步会升a.out文件
.&#x2F;a.out # 执行文件，输入一些字符，以control+d结束后，便会输出结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>这里需要注意的是原书中<code>gcc lex.yy.cc -lfl</code>，结果一直报错。后来找到Mac应该使用<code>-ll</code>替代<code>-lfl</code>，参考Reddit上的这个问答：<a href="https://www.reddit.com/r/C_Programming/comments/wk914f/does_anyone_know_how_to_resolve_this_error_when/">Does anyone know how to resolve this error when compiling Flex and Bison?</a></p>
<h3 id="计算器例子"><a href="#计算器例子" class="headerlink" title="计算器例子"></a>计算器例子</h3><p>第二例子是一个计算器例子，结合了Flex和Bison</p>
<p><code>fb1-5.l</code>文件代码</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">%</span><span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">"fb1-5.tab.h"</span></span>
<span class="token operator">%</span><span class="token punctuation">&#125;</span>

<span class="token operator">%</span><span class="token operator">%</span>
<span class="token string">"+"</span>	<span class="token punctuation">&#123;</span> <span class="token keyword">return</span> ADD<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token string">"-"</span>	<span class="token punctuation">&#123;</span> <span class="token keyword">return</span> SUB<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token string">"*"</span>	<span class="token punctuation">&#123;</span> <span class="token keyword">return</span> MUL<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token string">"/"</span>	<span class="token punctuation">&#123;</span> <span class="token keyword">return</span> DIV<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token string">"|"</span>     <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> ABS<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token string">"("</span>     <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> OP<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token string">")"</span>     <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> CP<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span>	<span class="token punctuation">&#123;</span> yylval <span class="token operator">=</span> <span class="token function">atoll</span><span class="token punctuation">(</span>yytext<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> NUMBER<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

\n      <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> EOL<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token string">"//"</span><span class="token punctuation">.</span><span class="token operator">*</span>  
<span class="token punctuation">[</span> \t<span class="token punctuation">]</span>   <span class="token punctuation">&#123;</span> <span class="token comment">/* ignore white space */</span> <span class="token punctuation">&#125;</span>
<span class="token operator">%</span><span class="token operator">%</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>fb1-5.y</code>文件代码，需要注意的是书中的例子类似<code>factor default $$ = $1</code>，实际运行报错修改为<code>factor &#123; $$ = $1; &#125;</code>格式。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**/</span>
<span class="token operator">%</span><span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">void</span> <span class="token function">yyerror</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 新加</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 新加</span>
<span class="token keyword">int</span> <span class="token function">yylex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 新加</span>
<span class="token operator">%</span><span class="token punctuation">&#125;</span>

<span class="token operator">%</span>token NUMBER
<span class="token operator">%</span>token ADD SUB MUL DIV ABS
<span class="token operator">%</span>token OP CP
<span class="token operator">%</span>token EOL

<span class="token operator">%</span><span class="token operator">%</span>

calclist<span class="token operator">:</span> <span class="token comment">/* 空规则 */</span>
   <span class="token operator">|</span> calclist exp EOL <span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"= %d\n"</span><span class="token punctuation">,</span> $<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
   <span class="token punctuation">;</span>

exp<span class="token operator">:</span> factor <span class="token punctuation">&#123;</span> $$ <span class="token operator">=</span> $<span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
   <span class="token operator">|</span> exp ADD factor <span class="token punctuation">&#123;</span> $$ <span class="token operator">=</span> $<span class="token number">1</span> <span class="token operator">+</span> $<span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
   <span class="token operator">|</span> exp SUB factor <span class="token punctuation">&#123;</span> $$ <span class="token operator">=</span> $<span class="token number">1</span> <span class="token operator">-</span> $<span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
   <span class="token punctuation">;</span>

factor<span class="token operator">:</span> term <span class="token punctuation">&#123;</span> $$ <span class="token operator">=</span> $<span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
   <span class="token operator">|</span> factor MUL term <span class="token punctuation">&#123;</span> $$ <span class="token operator">=</span> $<span class="token number">1</span> <span class="token operator">*</span> $<span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
   <span class="token operator">|</span> factor DIV term <span class="token punctuation">&#123;</span> $$ <span class="token operator">=</span> $<span class="token number">1</span> <span class="token operator">/</span> $<span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
   <span class="token punctuation">;</span>

term<span class="token operator">:</span> NUMBER <span class="token punctuation">&#123;</span> $$ <span class="token operator">=</span> $<span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
   <span class="token operator">|</span> ABS term <span class="token punctuation">&#123;</span> $$ <span class="token operator">=</span> $<span class="token number">2</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token operator">?</span> $<span class="token number">2</span> <span class="token operator">:</span> <span class="token operator">-</span>$<span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
   <span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token operator">%</span>

<span class="token keyword">void</span> <span class="token function">yyerror</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"error: %s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">yyparse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>按一下顺序运行</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">bison -d fb1-5.y # 一定要加-d，加了以后会生成fb1-5.tab.h文件
flex fb1-5.l  # 生成lex.yy.c文件
gcc fb1-5.tab.c lex.yy.c -ll # 这个也跟原书的命令不太一样，生成a.out文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实还遇到一些跟c有关系的编译问题，比如<code>atoi</code>在<code>c99</code>下不可用，需要使用<code>atoll</code>。总的来说，问题不大，算是都运行起来了，毕竟原书是2009年出版的。最后难能可贵的是书中例子的ftp下载地址居然还可以用，<a href="ftp://ftp.iecc.com/pub/file/flexbison.zip">代码下载</a>。</p>
<p>书中也提到使用Flex和Bison，当然也可以手写。其实对于我这样的多年写代码的人，很多时候太关注实现了，往往失去了高层次的思考，使用Flex和Bison这样的工具是让你直接关注问题本身，比如语言的一些问题。</p>
]]></content>
  </entry>
  <entry>
    <title>Vsftpd实践</title>
    <url>/2022/10/17/vsftpd-practices/</url>
    <content><![CDATA[<p>我用的是docker安装的，创建一个ftp的目录，使用命令。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d -v 你自己的目录:/home/vsftpd \</span><br><span class="line">-p 20:20 -p 21:21 -p 21100-21110:21100-21110 \</span><br><span class="line">-e FTP_USER=用户名 -e FTP_PASS=密码 \</span><br><span class="line">-e PASV_ADDRESS=主机IP -e PASV_MIN_PORT=21100 -e PASV_MAX_PORT=21110 \</span><br><span class="line">--name vsftpd --restart=always fauria/vsftpd</span><br></pre></td></tr></table></figure>

<h3 id="连接慢"><a href="#连接慢" class="headerlink" title="连接慢"></a>连接慢</h3><p>感觉登录很慢，需要做下配置。</p>
<p>进入容器</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 你自己的容器的ID bash </span><br></pre></td></tr></table></figure>

<p>使用vi编辑配置文件，修改<code>reverse_lookup_enable</code>字段为<code>NO</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/vsftpd/vsftpd.conf </span><br></pre></td></tr></table></figure>

<p>保存配置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/vsftpd/vsftpd.conf</span><br></pre></td></tr></table></figure>

<p>删除里面全部的<code>nameserve</code>，同样保存。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/resolv.conf</span><br><span class="line"><span class="built_in">source</span> /etc/resolv.conf</span><br></pre></td></tr></table></figure>

<h3 id="无法下载"><a href="#无法下载" class="headerlink" title="无法下载"></a>无法下载</h3><p>可以显示目录单是却无法下载文件，测试文件很小，只有一两次偶然的情况下载成功了，搜索了半天发现都没有遇到跟我一样问题的。最后发现原来是没有正确设置防火墙端口的问题，使用的是阿里云，在安全组我只开通了<code>21100</code>这个端口，实际上应该是一个范围<code>21100-21110</code>，安全组的配置应该是<code>21100/21110</code>。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://hub.docker.com/r/fauria/vsftpd">fauria&#x2F;vsftpd</a></p>
]]></content>
  </entry>
  <entry>
    <title>MASM汇编语言学习笔记</title>
    <url>/2023/03/02/masm-assembly-language-study-notes/</url>
    <content><![CDATA[<h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><p>王爽的《汇编语言》第四版，如果没有写过汇编，最好从头开始读。我一开始就以为自己有高级语言的经历，选择性的看书，结果发现还是没有理解汇编语言的核心。</p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>我的电脑是Mac，用虚拟机安装了<code>windows xp</code>系统，使用<code>MASM 5.0</code>，下载的安装包里还有<code>LINK</code>程序。IDE使用RadAsm，这个编辑器的高亮功能不错，不过不支持自动补全。</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="栈的数据莫名其妙多了些无关的数据"><a href="#栈的数据莫名其妙多了些无关的数据" class="headerlink" title="栈的数据莫名其妙多了些无关的数据"></a>栈的数据莫名其妙多了些无关的数据</h4><pre class="line-numbers language-masm" data-language="masm"><code class="language-masm">assume cs:codesg,ss:stack

stack segment
    dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
stack ends

codesg segment
start:
    mov ax, stack
    mov ss, ax
    mov sp, 20h
    
    mov cx,10h
    mov bx,0
s:
    add bx, 1
    push bx
    
    loop s
    
    mov ax, 4c00h
    int 21h
codesg ends

end start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在<code>Debug</code>下我发现运行最后会报错，发现栈中多了一些数据，而且是我一旦设置栈段后，就会出现这些数据。我把书中的例子也试了下，发现也有这个问题，不过书中栈设置的比较大，所以运行不会出问题，而我这个刚好设置的就是我需要的数据大小。后来在<a href="http://www.asmedu.net/">汇编语言论坛</a>，找到相关问题，意思是<code>Debug</code>下会在栈中存储一些数据的缘故，所以栈的大小不能刚适合，这会有问题的。</p>
]]></content>
  </entry>
  <entry>
    <title>写一个Yew版的UI库</title>
    <url>/2023/07/10/write-a-yew-ui-library/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>去年的时候我就尝试用Yew写了一个记事本的应用，当时可以说是刚接触Yew，Rust也没写什么代码，好在那个应用在UI方面也比较简单。一年过去了，最近又开始折腾Yew这个框架，一开始只是想把网络请求以及图片显示等测试一下，后来觉得是不是可以写一个UI库试下，虽然也有几个在Yew推荐的UI库，但感觉审美不在一个线上。之前写系统后台管理端时，使用的是<strong>vue-element-admin</strong>这个框架，想着也写一个Yew版的吧，不过首先得把Element UI库给写出来，实际上Yew能不能大范围的使用还是跟类似Element UI这样的企业级库有关系。另一方面对于Yew，我也想通过写这个UI库，来进一步学习Yew这个框架，同时也可以练习Rust的使用。</p>
<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>这些组件的实现都是参考了<a href="https://github.com/ElemeFE/element">Element UI的源码</a>，样式部分基本原封不动的使用了Element UI的样式，Element UI是基于Vue的，现在等于把Vue换成了Yew，Javascript换成了Rust，实现逻辑上依旧使用Element UI的，但在具体实现上则是根据Yew框架和Rust的特点有所不同，尽可能在功能上保持跟Element UI一致。</p>
<h4 id="Button-按钮"><a href="#Button-按钮" class="headerlink" title="Button 按钮"></a>Button 按钮</h4><p>一开始我选择了Button这个最常用的组件，这个组件相对来说比较简单。</p>
<pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">
<span class="token keyword">use</span> <span class="token namespace">yew<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>

<span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">Msg</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">YewButton</span> <span class="token punctuation">&#123;</span>
    props<span class="token punctuation">:</span><span class="token class-name">YewButtonProps</span>
<span class="token punctuation">&#125;</span>

<span class="token attribute attr-name">#[derive(Clone, PartialEq, Properties)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">YewButtonProps</span> <span class="token punctuation">&#123;</span>
    <span class="token attribute attr-name">#[prop_or_default]</span>
    <span class="token keyword">pub</span> disabled<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>
    <span class="token attribute attr-name">#[prop_or_default]</span>
    <span class="token keyword">pub</span> style<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> title<span class="token punctuation">:</span> <span class="token class-name">AttrValue</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> on_clicked<span class="token punctuation">:</span> <span class="token class-name">Callback</span><span class="token operator">&lt;</span><span class="token class-name">MouseEvent</span><span class="token operator">></span><span class="token punctuation">,</span>
    <span class="token attribute attr-name">#[prop_or_default]</span>
    <span class="token keyword">pub</span> loading<span class="token punctuation">:</span><span class="token keyword">bool</span><span class="token punctuation">,</span>

    <span class="token attribute attr-name">#[prop_or_default]</span>
    <span class="token keyword">pub</span> plain<span class="token punctuation">:</span><span class="token keyword">bool</span><span class="token punctuation">,</span>
    
    <span class="token comment">// medium / small / mini</span>
    <span class="token attribute attr-name">#[prop_or_default]</span>
    <span class="token keyword">pub</span> size<span class="token punctuation">:</span><span class="token class-name">String</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">impl</span> <span class="token class-name">Component</span> <span class="token keyword">for</span> <span class="token class-name">YewButton</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Message</span> <span class="token operator">=</span> <span class="token class-name">Msg</span><span class="token punctuation">;</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Properties</span> <span class="token operator">=</span> <span class="token class-name">YewButtonProps</span><span class="token punctuation">;</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">create</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>
            props<span class="token punctuation">:</span>ctx<span class="token punctuation">.</span><span class="token function">props</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">></span><span class="token punctuation">,</span> msg<span class="token punctuation">:</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Message</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">bool</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">match</span> msg <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">view</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Html</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> title <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">props</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>title<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> disabled <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">props</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>disabled<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> style <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">props</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> loading <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">props</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>loading<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">let</span> onclick <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">props</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>on_clicked<span class="token punctuation">.</span><span class="token function">reform</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>event<span class="token punctuation">:</span> <span class="token class-name">MouseEvent</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>
            event<span class="token punctuation">.</span><span class="token function">stop_propagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            event<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    
        <span class="token keyword">let</span> <span class="token keyword">mut</span> classes <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        classes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"el-button"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token operator">!</span>style<span class="token punctuation">.</span><span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">let</span> ss <span class="token operator">=</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"el-button--&#123;&#125;"</span><span class="token punctuation">,</span> style<span class="token punctuation">)</span><span class="token punctuation">;</span>
            classes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> disabled <span class="token punctuation">&#123;</span>
            classes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"is-disabled"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>plain <span class="token punctuation">&#123;</span>
            classes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"is-plain"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// TODO 需要对字符串进行检查</span>
        <span class="token keyword">if</span> <span class="token operator">!</span><span class="token keyword">self</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>size<span class="token punctuation">.</span><span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            classes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"el-button--&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token macro property">html!</span> <span class="token punctuation">&#123;</span>
            <span class="token operator">&lt;</span>button class<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token macro property">classes!</span><span class="token punctuation">(</span>classes<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>onclick<span class="token punctuation">&#125;</span> disabled<span class="token operator">=</span><span class="token punctuation">&#123;</span>disabled<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token operator">></span>
            <span class="token punctuation">&#123;</span>title<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> loading <span class="token punctuation">&#123;</span>
                <span class="token operator">&lt;</span>i class<span class="token operator">=</span><span class="token string">"el-icon-loading"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>
            <span class="token punctuation">&#125;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个里面代码目前没有优化，基本上时当时写的样子，应该是没有完全实现所有Element UI版的按钮功能，但核心功能是可以用的。</p>
<h4 id="Rate-评分"><a href="#Rate-评分" class="headerlink" title="Rate 评分"></a>Rate 评分</h4><p>评分组件在以前iOS的时候也是自己写过，相对按钮组件，这个就相对复杂些了。主要问题是实现半星效果的功能时，发现Yew的鼠标事件不能穿透，一开始按照原版的实现来写，结果老是出错，后来才发现是这个不能穿透的问题。</p>
<pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">is_rate_disabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>allow_half <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> element<span class="token punctuation">:</span> <span class="token class-name">Element</span> <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">target_unchecked_into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> target <span class="token operator">=</span> <span class="token class-name">None</span><span class="token punctuation">;</span>
    <span class="token comment">// 这段代码原本是Element UI的实现，但是Yew的鼠标移动事件并不能穿透，所以这段代码弃用</span>
    <span class="token comment">// if element.class_list().contains("el-rate__item") &#123;</span>
    <span class="token comment">//     target = element.query_selector(".el-rate__icon").unwrap();</span>
    <span class="token comment">// &#125;</span>
    <span class="token comment">// if target.is_some()&amp;&amp; target.clone().unwrap().class_list().contains("el-rate__decimal") &#123;</span>
    <span class="token comment">//     target = target.clone().unwrap().parent_element();</span>
    <span class="token comment">// &#125; else if element.class_list().contains("el-rate__decimal") &#123;</span>
    <span class="token comment">//     target = element.parent_element();</span>
    <span class="token comment">// &#125;</span>
    <span class="token keyword">if</span> target<span class="token punctuation">.</span><span class="token function">is_none</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        target <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> target<span class="token punctuation">.</span><span class="token function">is_some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> offset_x <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">offset_x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> client_width <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">client_width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>pointer_at_left_half <span class="token operator">=</span> offset_x <span class="token operator">&lt;=</span> client_width<span class="token punctuation">;</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>current_value <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span>pointer_at_left_half <span class="token punctuation">&#123;</span>
            <span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">f64</span> <span class="token operator">-</span> <span class="token number">0.5</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">f64</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">self</span><span class="token punctuation">.</span>current_value <span class="token operator">=</span> <span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">f64</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">self</span><span class="token punctuation">.</span>hover_index <span class="token operator">=</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>原版的实现专门对穿透做了处理，既然不支持穿透实现反而简单了，这个应该是Yew自己的设置了。</p>
<h4 id="ColorPicker-颜色选择器"><a href="#ColorPicker-颜色选择器" class="headerlink" title="ColorPicker 颜色选择器"></a>ColorPicker 颜色选择器</h4><p>完成了评分组件后，想到找个再复杂一点的，于是选中了颜色选择器这个组件，一看这个组件是由好几子组件组成的，就是他了。颜色是个比较专业的东西，原版专门有个Color模块来处理，一开始我打算用Rust重写Color模块，不过鉴于Javascript的动态类型，一开始写一个Hsv转RGB的时候就卡住了，于是就找了一些第三方的库，先把功能拼凑出来，这也是颜色选择器中没有使用原版的实现的一部分。另一个遇到的问题是一些参数面板原版是支持滑动来操作的，但是我试了一下还是有问题。于是只支持了点击设置值的操作。</p>
<p>另一个遇到的大问题是原版支持输入颜色的操作，但是我的输入组件还没有写好，看了写源码，这个组件还需要单独去写。于是目前的功能不支持输入。</p>
<p>颜色处理，最后使用了csscolorparser这个库，把原来零散的库给替换了。</p>
<p>最后这个组件功能我觉得能用，支持十六进制颜色以及RGB和RGBA的形式，实际上csscolorparser这个库支持的很全。目前存在的问题，原版使用了Vue特有的transition标签，我一开始以为这是HTML的，后来才发现。原版弹框时会有动画，而且也会把弹出框定位到颜色按钮的下方适当位置。目前这本版本暂时没有这样的效果。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Yew这个框架，我也尝试的看了下源码，这非常有帮助，因为这是文档有时无法学习到的。基本的运行原理以及生命周期之类的都有了一定的认识。另外通过这三个组件的练习，跟Vue的实现一对比，发现Vue还是包装的更深，更对开发者友好。Yew基本的功能实现是没有问题的，只是有些类似上面提到的transition这样的，可能就需要自己实现。</p>
<p>Rust方面，一方面我看了一些源码，这些源码使用了更深层次的Rust功能，比如宏、范型。另一方面，Rust写前端，毕竟运行环境不是操作系统，所以有些库也是特定平台的。比如数学模块，我一开始想着使用Rust自带之类的标准库，但最后还是使用js-sys的Math模块，实际证明这个很好用。</p>
<p>下一步，目前只写了三组件，总共有90个组件，完全是冰山一角，工作量之巨大，只能慢慢来。目前来看用Rust写前端，只是一种实验性的东西，毕竟Javascript的应用面很广，小程序，移动端，Rust更广阔的应该还是在系统应用这个层级，但面对C&#x2F;C++这类系统级别的语言也是挑战，另外服务端又有各种语言占据。Rust的使用场景看似很广，但却不得不名对先占市场的问题，所以这也是我为什么要用Rust来写前端这个初衷，就是想用Rust。</p>
<p>最后有对Yew这个框架感兴趣的，可以关注下<a href="https://github.com/jasper2007111/yew-lab">yew-lab</a>这个项目，组件相关的代码都在里面。</p>
]]></content>
  </entry>
  <entry>
    <title>谈一谈Yew</title>
    <url>/2023/08/27/talk-about-yew/</url>
    <content><![CDATA[<p>距离上一篇<a href="https://c2lang.com/2023/07/10/write-a-yew-ui-library/">写一个Yew版的UI库</a>，已经一个多月了。一直在写Yew，有些认知已经变化了，总结一下。</p>
<h3 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h3><p>结构式组件（Struct components），我更喜欢叫它类组件，以下是一个计数器的例子。</p>
<pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">yew<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>

<span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">Msg</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Add</span><span class="token punctuation">,</span>
    <span class="token class-name">Sub</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">CounterPage</span> <span class="token punctuation">&#123;</span>
    counter<span class="token punctuation">:</span> <span class="token keyword">i32</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">impl</span> <span class="token class-name">Component</span> <span class="token keyword">for</span> <span class="token class-name">CounterPage</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Message</span> <span class="token operator">=</span> <span class="token class-name">Msg</span><span class="token punctuation">;</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Properties</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">create</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>
            counter<span class="token punctuation">:</span><span class="token number">0</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">fn</span> <span class="token function-definition function">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">></span><span class="token punctuation">,</span> msg<span class="token punctuation">:</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Message</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">bool</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">match</span> msg <span class="token punctuation">&#123;</span>
            <span class="token class-name">Msg</span><span class="token punctuation">::</span><span class="token class-name">Add</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
                <span class="token keyword">self</span><span class="token punctuation">.</span>counter <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token boolean">true</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token class-name">Msg</span><span class="token punctuation">::</span><span class="token class-name">Sub</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
                <span class="token keyword">self</span><span class="token punctuation">.</span>counter <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token boolean">true</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">view</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Html</span> <span class="token punctuation">&#123;</span>
        <span class="token macro property">html!</span> <span class="token punctuation">&#123;</span>
            <span class="token operator">&lt;</span>div<span class="token operator">></span>
                <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">&#123;</span> <span class="token string">"Counter测试"</span> <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
                <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token string">"counter: "</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token keyword">self</span><span class="token punctuation">.</span>counter<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
                <span class="token operator">&lt;</span>div<span class="token operator">></span>
	                <span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token punctuation">&#123;</span>ctx<span class="token punctuation">.</span><span class="token function">link</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">move</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span><span class="token class-name">Msg</span><span class="token punctuation">::</span><span class="token class-name">Add</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span> <span class="token string">"增加"</span> <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
	                <span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token punctuation">&#123;</span>ctx<span class="token punctuation">.</span><span class="token function">link</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">move</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span><span class="token class-name">Msg</span><span class="token punctuation">::</span><span class="token class-name">Sub</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span> <span class="token string">"减少"</span> <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这种形式的重点是生命周期，上面的例子只使用了最常用的<code>create</code>、<code>update</code>、<code>view</code>这三个方法。下面是所有的生命周期的方法：</p>
<pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">BaseComponent</span><span class="token punctuation">:</span> <span class="token class-name">Sized</span> <span class="token operator">+</span> <span class="token lifetime-annotation symbol">'static</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/// The Component's Message.</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Message</span><span class="token punctuation">:</span> <span class="token lifetime-annotation symbol">'static</span><span class="token punctuation">;</span>

    <span class="token comment">/// The Component's Properties.</span>
    <span class="token keyword">type</span> <span class="token type-definition class-name">Properties</span><span class="token punctuation">:</span> <span class="token class-name">Properties</span><span class="token punctuation">;</span>

    <span class="token comment">/// Creates a component.</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">create</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span><span class="token punctuation">;</span>

    <span class="token comment">/// Updates component's internal state.</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">></span><span class="token punctuation">,</span> msg<span class="token punctuation">:</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Message</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">bool</span><span class="token punctuation">;</span>

    <span class="token comment">/// React to changes of component properties.</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">changed</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">></span><span class="token punctuation">,</span> _old_props<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Properties</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">bool</span><span class="token punctuation">;</span>

    <span class="token comment">/// Returns a component layout to be rendered.</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">view</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">HtmlResult</span><span class="token punctuation">;</span>

    <span class="token comment">/// Notified after a layout is rendered.</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">rendered</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">></span><span class="token punctuation">,</span> first_render<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/// Notified before a component is destroyed.</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/// Prepares the server-side state.</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">prepare_state</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>不过Yew的类组件在状态更新方面跟React不一样。比如React：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 初始化状态</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 设置状态</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSatate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
	<span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Yew主要依赖于消息，每次要更新状态先发送消息，然后在<code>update</code>方法里面处理消息并决定视图是否需要重新渲染。</p>
<pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> ctx<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token operator">></span><span class="token punctuation">,</span> msg<span class="token punctuation">:</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Message</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">bool</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">match</span> msg <span class="token punctuation">&#123;</span>
            <span class="token class-name">Msg</span><span class="token punctuation">::</span><span class="token class-name">Add</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
                <span class="token keyword">self</span><span class="token punctuation">.</span>counter <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token boolean">true</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token class-name">Msg</span><span class="token punctuation">::</span><span class="token class-name">Sub</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
                <span class="token keyword">self</span><span class="token punctuation">.</span>counter <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token boolean">true</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这种模式实际上是受到了<a href="https://elm-lang.org/">Elm</a>这个语言的影响。这个是Elm官网上的<a href="https://elm-lang.org/examples/buttons">Button例子</a>。</p>
<pre class="line-numbers language-elm" data-language="elm"><code class="language-elm"><span class="token keyword">module</span> <span class="token constant">Main</span> <span class="token keyword">exposing</span> <span class="token punctuation">(</span><span class="token operator">..</span><span class="token punctuation">)</span>

<span class="token comment">-- Press buttons to increment and decrement a counter.</span>
<span class="token comment">--</span>
<span class="token comment">-- Read how it works:</span>
<span class="token comment">--   https://guide.elm-lang.org/architecture/buttons.html</span>
<span class="token comment">--</span>

<span class="token import-statement"><span class="token keyword">import</span> Browser</span>
<span class="token import-statement"><span class="token keyword">import</span> Html <span class="token keyword">exposing</span> </span><span class="token punctuation">(</span><span class="token constant">Html</span><span class="token punctuation">,</span> <span class="token hvariable">button</span><span class="token punctuation">,</span> <span class="token hvariable">div</span><span class="token punctuation">,</span> <span class="token hvariable">text</span><span class="token punctuation">)</span>
<span class="token import-statement"><span class="token keyword">import</span> Html.Events <span class="token keyword">exposing</span> </span><span class="token punctuation">(</span><span class="token hvariable">onClick</span><span class="token punctuation">)</span>

<span class="token comment">-- MAIN</span>
<span class="token hvariable">main</span> <span class="token operator">=</span>
  <span class="token hvariable">Browser.sandbox</span> <span class="token punctuation">&#123;</span> <span class="token hvariable">init</span> <span class="token operator">=</span> <span class="token hvariable">init</span><span class="token punctuation">,</span> <span class="token hvariable">update</span> <span class="token operator">=</span> <span class="token hvariable">update</span><span class="token punctuation">,</span> <span class="token hvariable">view</span> <span class="token operator">=</span> <span class="token hvariable">view</span> <span class="token punctuation">&#125;</span>

<span class="token comment">-- MODEL</span>
<span class="token keyword">type</span> <span class="token keyword">alias</span> <span class="token constant">Model</span> <span class="token operator">=</span> <span class="token constant">Int</span>

<span class="token hvariable">init</span> <span class="token operator">:</span> <span class="token constant">Model</span>
<span class="token hvariable">init</span> <span class="token operator">=</span>
  <span class="token number">0</span>

<span class="token comment">-- UPDATE</span>
<span class="token keyword">type</span> <span class="token constant">Msg</span>
  <span class="token operator">=</span> <span class="token constant">Increment</span>
  <span class="token operator">|</span> <span class="token constant">Decrement</span>

<span class="token hvariable">update</span> <span class="token operator">:</span> <span class="token constant">Msg</span> <span class="token operator">-></span> <span class="token constant">Model</span> <span class="token operator">-></span> <span class="token constant">Model</span>
<span class="token hvariable">update</span> <span class="token hvariable">msg</span> <span class="token hvariable">model</span> <span class="token operator">=</span>
  <span class="token keyword">case</span> <span class="token hvariable">msg</span> <span class="token keyword">of</span>
    <span class="token constant">Increment</span> <span class="token operator">-></span>
      <span class="token hvariable">model</span> <span class="token operator">+</span> <span class="token number">1</span>

    <span class="token constant">Decrement</span> <span class="token operator">-></span>
      <span class="token hvariable">model</span> <span class="token operator">-</span> <span class="token number">1</span>

<span class="token comment">-- VIEW</span>
<span class="token hvariable">view</span> <span class="token operator">:</span> <span class="token constant">Model</span> <span class="token operator">-></span> <span class="token constant">Html</span> <span class="token constant">Msg</span>
<span class="token hvariable">view</span> <span class="token hvariable">model</span> <span class="token operator">=</span>
  <span class="token hvariable">div</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span> <span class="token hvariable">button</span> <span class="token punctuation">[</span> <span class="token hvariable">onClick</span> <span class="token constant">Decrement</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token hvariable">text</span> <span class="token string">"-"</span> <span class="token punctuation">]</span>
    <span class="token punctuation">,</span> <span class="token hvariable">div</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token hvariable">text</span> <span class="token punctuation">(</span><span class="token hvariable">String.fromInt</span> <span class="token hvariable">model</span><span class="token punctuation">)</span> <span class="token punctuation">]</span>
    <span class="token punctuation">,</span> <span class="token hvariable">button</span> <span class="token punctuation">[</span> <span class="token hvariable">onClick</span> <span class="token constant">Increment</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token hvariable">text</span> <span class="token string">"+"</span> <span class="token punctuation">]</span>
    <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h3><p>这个受到React的函数式组件的启发，上面计数器的例子可以这样写：</p>
<pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[function_component]</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">CounterPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Html</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token function">use_state</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> add_callback <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> counter_clone <span class="token operator">=</span> counter<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Callback</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>
            counter_clone<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token operator">*</span>counter_clone<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> sub_callback <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> counter_clone <span class="token operator">=</span> counter<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Callback</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>
            counter_clone<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token operator">*</span>counter_clone<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token macro property">html!</span> <span class="token punctuation">&#123;</span>
     <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">&#123;</span> <span class="token string">"Counter测试"</span> <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
        <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token string">"counter: "</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">*</span>counter<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>div<span class="token operator">></span>
            <span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token punctuation">&#123;</span>add_callback<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span> <span class="token string">"增加"</span> <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
            <span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token punctuation">&#123;</span>sub_callback<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span> <span class="token string">"减少"</span> <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>从形式上这个会比类组件更加的简洁。Yew函数式组件是一种完整构建组件的方法，主要是依赖Hooks，比如上面的<code>use_state</code>，还有很多比如<code>use_node_ref</code>、<code>use_effect_with_deps</code>。如果你用过React的函数式组件，那么只要适当的参考下Yew的相关文档，很容易上手。不熟悉函数式组件的，建议阅读最新的React函数式文档，或者读一本书，比如我读的是《React学习手册第二版》。</p>
<h3 id="如何选择？"><a href="#如何选择？" class="headerlink" title="如何选择？"></a>如何选择？</h3><p>Yew的官方文档这样描述：</p>
<blockquote>
<p>You are currently reading about function components - the recommended way to write components when starting with Yew and when writing simple presentation logic.<br>There is a more advanced, but less accessible, way to write components - Struct components. They allow very detailed control, though you will not need that level of detail most of the time.</p>
<p><a href="https://yew.rs/docs/concepts/function-components">来源</a></p>
</blockquote>
<p>这给人感觉类组件更强大，我一开始使用类组件，但是后来因为用到了上下文消息的监听的问题，见这个例子<a href="https://github.com/yewstack/yew/tree/master/examples/contexts">contexts</a>，里面的发布消息，是用函数式组件写的，当时没有反应过来如何用类组件写发布消息，后来发现类组件也很简单，这是后话。后面我就有意开始使用函数式组件，发现用函数式组件似乎实现起来也问题不大，所以后面的组件又都是函数式组件写的。</p>
<p>函数式组件一开始我觉得，也有跟类组件类似的生命周期的东西，虽然在组织逻辑复杂的代码方面似乎没有类组件方便，后来我慢慢的使用类似过程式的方式，把一些相似的逻辑拆分到方法里面。如下：</p>
<pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[function_component]</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">YELTag</span><span class="token punctuation">(</span>props<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">YELTagProps</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Html</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> on_click <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> on_click <span class="token operator">=</span> props<span class="token punctuation">.</span>on_click<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Callback</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>
            on_click<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> on_click_clone <span class="token operator">=</span> on_click<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">html!</span> <span class="token punctuation">&#123;</span>
        <span class="token operator">&lt;</span>span
            class<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function">get_span_classes</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
            style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> props<span class="token punctuation">.</span>color<span class="token punctuation">.</span><span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"background-color: &#123;&#125;"</span><span class="token punctuation">,</span> props<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
            onclick<span class="token operator">=</span><span class="token punctuation">&#123;</span>on_click<span class="token punctuation">&#125;</span>
            <span class="token operator">></span>
                <span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
                <span class="token keyword">if</span> props<span class="token punctuation">.</span>closable <span class="token punctuation">&#123;</span>
                    <span class="token operator">&lt;</span>i class<span class="token operator">=</span><span class="token string">"el-tag__close el-icon-close"</span> onclick<span class="token operator">=</span><span class="token punctuation">&#123;</span> on_click_clone <span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>
                <span class="token punctuation">&#125;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">get_span_classes</span><span class="token punctuation">(</span>props<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">YELTagProps</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> span_classes <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token string">"el-tag"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">=</span> props<span class="token punctuation">.</span>tag_type<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        span_classes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"el-tag--&#123;&#125;"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span> props<span class="token punctuation">.</span>effect<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        span_classes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"el-tag--&#123;&#125;"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=</span> props<span class="token punctuation">.</span>size<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        span_classes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"el-tag--&#123;&#125;"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> props<span class="token punctuation">.</span>hit <span class="token punctuation">&#123;</span>
        span_classes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"is-hit"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    span_classes
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>把<code>class</code>单独通过<code>fn get_span_classes(props: &amp;YELTagProps) -&gt; Vec&lt;String&gt;</code>来处理，这样就可以避免函数组件内代码的膨胀。</p>
<p>但就在刚发布这篇文章后的第二天，我遇到了如下的问题。</p>
<pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[function_component]</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">YELInputNumber</span><span class="token punctuation">(</span>props<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">YELInputNumberProps</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Html</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> on_decrease <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> value <span class="token operator">=</span> props<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Callback</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token function">decrease</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// log!("v:", v);</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> on_increase <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token class-name">Callback</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token macro property">html!</span> <span class="token punctuation">&#123;</span>
        <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function">get_div_classes</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>
            <span class="token keyword">if</span> props<span class="token punctuation">.</span>controls <span class="token punctuation">&#123;</span>
                <span class="token operator">&lt;</span>span
                    class<span class="token operator">=</span><span class="token string">"el-input-number__decrease"</span>
                    role<span class="token operator">=</span><span class="token string">"button"</span>
                    onclick<span class="token operator">=</span><span class="token punctuation">&#123;</span>on_decrease<span class="token punctuation">&#125;</span>
                <span class="token operator">></span>
                <span class="token operator">&lt;</span>i class<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"el-icon-&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span> <span class="token function">get_controls_at_right</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token string">"arrow-down"</span>
                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                        <span class="token string">"minus"</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
                <span class="token operator">&lt;</span>span
                    class<span class="token operator">=</span><span class="token string">"el-input-number__increase"</span>
                    role<span class="token operator">=</span><span class="token string">"button"</span>
                    onclick<span class="token operator">=</span><span class="token punctuation">&#123;</span>on_increase<span class="token punctuation">&#125;</span>
                <span class="token operator">></span>
                <span class="token operator">&lt;</span>i class<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"el-icon-&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span> <span class="token function">get_controls_at_right</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token string">"arrow-down"</span>
                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                        <span class="token string">"plus"</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
            <span class="token punctuation">&#125;</span>
            <span class="token operator">&lt;</span><span class="token class-name">YELInput</span> value<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function">get_display_value</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">decrease</span><span class="token punctuation">(</span>props<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">YELInputNumberProps</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">f64</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> precision_factor <span class="token operator">=</span> <span class="token namespace">js_sys<span class="token punctuation">::</span></span><span class="token class-name">Math</span><span class="token punctuation">::</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token function">get_num_precision</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> num <span class="token operator">=</span> precision_factor <span class="token operator">*</span> val <span class="token operator">-</span> precision_factor <span class="token operator">*</span> props<span class="token punctuation">.</span>step <span class="token keyword">as</span> <span class="token keyword">f64</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">to_precision</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token class-name">None</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">to_precision</span><span class="token punctuation">(</span>props<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">YELInputNumberProps</span><span class="token punctuation">,</span> num<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> precision_option<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">f64</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> precision <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=</span> precision_option <span class="token punctuation">&#123;</span>
        p
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token function">get_num_precision</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">i32</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token namespace">js_sys<span class="token punctuation">::</span></span><span class="token class-name">Math</span><span class="token punctuation">::</span><span class="token function">round</span><span class="token punctuation">(</span>num <span class="token operator">*</span> <span class="token namespace">js_sys<span class="token punctuation">::</span></span><span class="token class-name">Math</span><span class="token punctuation">::</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">,</span> precision <span class="token keyword">as</span> <span class="token keyword">f64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token namespace">js_sys<span class="token punctuation">::</span></span><span class="token class-name">Math</span><span class="token punctuation">::</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">,</span> precision <span class="token keyword">as</span> <span class="token keyword">f64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">get_precision</span><span class="token punctuation">(</span>val<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">i32</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> value_string <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> dot_position <span class="token operator">=</span> value_string<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=</span> dot_position <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>value_string<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>p <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token number">0</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这段代码会报错，因为我在闭包中使用了props这个引用，这个引用不满足<code>&#39;Static</code>的这个要求。</p>
<pre class="line-numbers language-log" data-language="log"><code class="language-log"> <span class="token operator">|</span>   pub fn YELInputNumber<span class="token operator">(</span>props<span class="token operator">:</span> <span class="token operator">&amp;</span>YELInputNumberProps<span class="token operator">)</span> <span class="token operator">-</span><span class="token operator">></span> Html <span class="token operator">&#123;</span>
   <span class="token operator">|</span>                         <span class="token separator comment">-----</span>  <span class="token operator">-</span> let's call the lifetime of this reference `'<span class="token number">1</span>`
   <span class="token operator">|</span>                         <span class="token operator">|</span>
   <span class="token operator">|</span>                         `props` is a reference that is only valid in the function body
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">41</span> <span class="token operator">|</span> <span class="token operator">/</span>         Callback<span class="token operator">:</span><span class="token operator">:</span>from<span class="token operator">(</span>move <span class="token operator">|</span>e<span class="token operator">|</span> <span class="token operator">&#123;</span>
<span class="token number">42</span> <span class="token operator">|</span> <span class="token operator">|</span>             let v <span class="token operator">=</span> decrease<span class="token operator">(</span>props<span class="token punctuation">,</span> value<span class="token operator">)</span><span class="token operator">;</span>
<span class="token number">43</span> <span class="token operator">|</span> <span class="token operator">|</span>             <span class="token operator">/</span><span class="token operator">/</span> log<span class="token operator">!</span><span class="token operator">(</span><span class="token string">"v:"</span><span class="token punctuation">,</span> v<span class="token operator">)</span><span class="token operator">;</span>
<span class="token number">44</span> <span class="token operator">|</span> <span class="token operator">|</span>         <span class="token operator">&#125;</span><span class="token operator">)</span>
   <span class="token operator">|</span> <span class="token operator">|</span>          <span class="token operator">^</span>
   <span class="token operator">|</span> <span class="token operator">|</span>          <span class="token operator">|</span>
   <span class="token operator">|</span> <span class="token operator">|</span>__________`props` escapes the function body here
   <span class="token operator">|</span>            argument requires that `<span class="token string">'1` must outlive `'</span>static`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>出错的代码：</p>
<pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[function_component]</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">YELInputNumber</span><span class="token punctuation">(</span>props<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">YELInputNumberProps</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Html</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> on_decrease <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> value <span class="token operator">=</span> props<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Callback</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token function">decrease</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// log!("v:", v);</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这之前使用闭包都是复制了props的值，没想道这次因为使用了props引用本身却出错了。因为decrease这个方法会调用其他的方法，也需要props中的参数。这个错误似乎无法解决，props这个参数我无法修改成<code>&#39;Static</code>的，因为这个是Yew自己提供的。一种就是我彻底把所有后续用到的参数复制出来，通过decrease传给下面的调用，即使decrease本身不需要这些参数，但这样一来反而增加了复杂性。但如果改成类组件的话，就不存在上面的问题，每个类组件可以包含props属性，在实例方法中可以调用。</p>
<p>通过以上这个问题，打破了我原来觉得函数式组件是一种完备方法的结论，即使我努力去尝试适应，但函数式组件在复杂逻辑代码中有它的缺陷，这终究是Rust本身的决定，也是框架的问题。我相信JS版本没有这样的问题，所以React中函数式组件的可以大行其道有它的道理，但是在Yew中却受到语言特性的限制。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>类组件和函数式都可以使用，两者是不同思想，见上分析。虽然Yew的函数式组件看起来跟React的函数式组件很像，但还是有限制的，所以如果遇到问题，那么回到类组件的方式，至少可以解决问题。但为什么不直接使用类组件就得了，所以Yew团队也不知道怎么想的，创造了两种方式，但又不是很完美，反而增加了困扰，或许我根本不需要了解React。</p>
<h3 id="Vue-用户"><a href="#Vue-用户" class="headerlink" title="Vue 用户"></a>Vue 用户</h3><p>我就是Vue的用户，更准确的是应该Vue 2用户，Vue 3还没有来得及学习。Element UI 也是基于Vue2的组件库。一开始我觉得这只是JS和Rust的不同，很多时候我都是用Vue的思维在学习使用Yew这个框架，但渐渐发现Yew与Vue在设计思想上有很大不同，本质上这实际上是React与Vue的不同，尤其是React的函数式组件思想。</p>
<h3 id="Rust-vs-JavaScript"><a href="#Rust-vs-JavaScript" class="headerlink" title="Rust vs JavaScript"></a>Rust vs JavaScript</h3><h4 id="动态性"><a href="#动态性" class="headerlink" title="动态性"></a>动态性</h4><p>在写Table这个组件时，JS版的Table中使用很多动态获取的东西，这种方式对于Rust而言就无法做到，首先是数组，一般都是固定类型，所以这里需要使用范型，范型问题不大。动态性，我想到了反射这样的东西，官方提供反射功能很有限，是一种编译时的反射。后来也找到了一些第三方的库，不过最后发现还是要结合范型，并不能动态的判断类型，进行值的转换。</p>
<p>另外比如Element UI组件的属性有些同时支持Number、String、Function，我一开始想到用范型，但是在实际使用中还需要动态的判断类型，这个Rust无法做到，目前这类属性的实现还没有好的方法。</p>
<h4 id="确定性"><a href="#确定性" class="headerlink" title="确定性"></a>确定性</h4><p>使用Rust好处就是类型确定性，比如还是组件的属性，JS版使用的是字符串，这个实际上就有个验证的问题。但是如果用Rust写的话，可以直接使用枚举类型。</p>
<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>用Rust写前端，大部分问题实际上就跟你用C#或者Java写前端一样，只不过Rust对比后者而言少了更多的动态性，另外就是它的所有权法则，早期的时候，非常不习惯，顿不顿就被编译器暂停了。Rust项目编译慢，这个确实是个问题，我的电脑都是32G的8核的配置。</p>
<p>题外话：从前端的角度，TypeScript确实弥补了JavaScript在类型上的问题，这也是很多大项目转向了TypeScript。</p>
]]></content>
      <tags>
        <tag>yew</tag>
      </tags>
  </entry>
  <entry>
    <title>为Pinephone Pro交叉编译Rust应用程序</title>
    <url>/2023/11/12/cross-compile-rust-applications-for-the-pinephone-pro/</url>
    <content><![CDATA[<p>主要参考官方的这篇文章<a href="https://wiki.pine64.org/wiki/Cross-compiling#Installing_The_Toolchain">cross-compiling</a>，如果是没有动态库的简单Rust程序，基本没有问题。这里我主要使用GTK4的Rust绑定库<a href="https://github.com/gtk-rs/gtk4-rs">gtk4-rs</a>，来开发Pinephone Pro的应用程序，这有GTK相关的动态库依赖，所以导致问题比较麻烦。<strong>这里先说明一下我对GTK开发完全不熟，另外也对交叉编译不是很懂。</strong></p>
<p>主要是在Linux发行版Manjaro系统上编译的，理论上Ubuntu这些也应该可以的。<strong>交叉编译GTK的最大问题，主要是GTK相关动态库的问题。</strong>这里面需要了解一些编译链接以及动态库方面的知识，笔者一开始以为自己了解，结果被狠狠的上了一课。建议读一下《<a href="https://book.douban.com/subject/26414485/">高级C&#x2F;C++编译技术</a>》这本书，补充相关的知识。</p>
<h3 id="库的位置"><a href="#库的位置" class="headerlink" title="库的位置"></a>库的位置</h3><p>Pinephone Pro运行的程序属于ARM64的程序，交叉编译时需要安装<code>aarch64-linux-gnu</code>。</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo pacman -S aarch64-linux-gnu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>安装完成后，会在系统usr目录下生成<code>aarch64-linux-gnu</code>的目录，在编译时遇到找不到库时，我们就需要将找到的库放置在<code>/usr/aarch64-linux-gnu/lib/</code>下。这里可以使用ld的命令验证是否找到了链接库。</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo &#x2F;aarch64-linux-gnu&#x2F;bin&#x2F;ld -lgtk-4 --verbose <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>添加<code>--verbose</code>参数后可以打印出详细的查找路径，便于Debug，另外这个加上<code>sudo</code>，是因为这边不加的话，即使有库也无法找到，但是加上后就可以。</p>
<h3 id="如何查找库"><a href="#如何查找库" class="headerlink" title="如何查找库"></a>如何查找库</h3><p><strong>重点提示下缺失库，一定要找对应平台的库，比如这里我主要找aarch64的</strong>，一开始我使用<a href="https://archlinuxarm.org/packages">archlinuxarm</a>，查找我需要的库，但发现有些库也没有的，一种是自己编译对应版本的库。另一种就是从已安装的手机系统中找对应的库，因为我之前在PinePhone Pro上有编译成功过同样的程序，所以系统上自然也有了这些依赖库。可以使用ldd查看程序的依赖库。</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">ldd gtk-rs 

linux-vdso.so.1 (0x0000ffff806d8000)
libgobject-2.0.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;libgobject-2.0.so.0 (0x0000ffff80560000)
libgtk-4.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;libgtk-4.so.1 (0x0000ffff7fc00000)
libpango-1.0.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;libpango-1.0.so.0 (0x0000ffff7fb70000)
libgdk_pixbuf-2.0.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;libgdk_pixbuf-2.0.so.0 (0x0000ffff7fb10000)
libcairo-gobject.so.2 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;libcairo-gobject.so.2 (0x0000ffff7faf0000)
libcairo.so.2 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;libcairo.so.2 (0x0000ffff7f9a0000)
libgraphene-1.0.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;libgraphene-1.0.so.0 (0x0000ffff7f970000)
libgio-2.0.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;libgio-2.0.so.0 (0x0000ffff7f710000)
libglib-2.0.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;libglib-2.0.so.0 (0x0000ffff7f590000)
libgcc_s.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;libgcc_s.so.1 (0x0000ffff7f560000)
libc.so.6 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;libc.so.6 (0x0000ffff7f3a0000)
libffi.so.8 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;libffi.so.8 (0x0000ffff7f380000)
&#x2F;lib&#x2F;ld-linux-aarch64.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;ld-linux-aarch64.so.1 (0x0000ffff8069f000)
libgmodule-2.0.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;libgmodule-2.0.so.0 (0x0000ffff7f360000)
libpangocairo-1.0.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;libpangocairo-1.0.so.0 (0x0000ffff7f340000)
libharfbuzz.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;libharfbuzz.so.0 (0x0000ffff7f210000)
libfribidi.so.0 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;libfribidi.so.0 (0x0000ffff7f1e0000)
libfontconfig.so.1 &#x3D;&gt; &#x2F;usr&#x2F;lib&#x2F;libfontconfig.so.1 (0x0000ffff7f180000)
...
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里会显示详细的库以及库的位置，然后我们就可以使用scp工具把库从手机端拷贝到电脑上。<strong>记得换成你自己的IP</strong>，比如：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">scp manjaro@192.168.1.4:&#x2F;usr&#x2F;lib&#x2F;libicudata.so.72 .&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>解决了库的来源问题，还需要解决库的依赖问题，GTK库的依赖相当多，比如你找到了<code>lgtk-4</code>，结果接着给报另外一堆库找不到。这是因为<code>lgtk-4</code>本身又依赖了很多的动态库，这时我们可以使用readelf这个工具查看。</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo readelf -d libgtk-4.so

 标记        类型                         名称&#x2F;值
 0x0000000000000001 (NEEDED)             共享库：[libgmodule-2.0.so.0]
 0x0000000000000001 (NEEDED)             共享库：[libglib-2.0.so.0]
 0x0000000000000001 (NEEDED)             共享库：[libgobject-2.0.so.0]
 0x0000000000000001 (NEEDED)             共享库：[libgio-2.0.so.0]
 0x0000000000000001 (NEEDED)             共享库：[libpangocairo-1.0.so.0]
 0x0000000000000001 (NEEDED)             共享库：[libpango-1.0.so.0]
 0x0000000000000001 (NEEDED)             共享库：[libharfbuzz.so.0]
 0x0000000000000001 (NEEDED)             共享库：[libcairo.so.2]
 0x0000000000000001 (NEEDED)             共享库：[libfribidi.so.0]
 0x0000000000000001 (NEEDED)             共享库：[libcairo-gobject.so.2]
 0x0000000000000001 (NEEDED)             共享库：[libfontconfig.so.1]
 0x0000000000000001 (NEEDED)             共享库：[libgdk_pixbuf-2.0.so.0]
 0x0000000000000001 (NEEDED)             共享库：[libepoxy.so.0]
 0x0000000000000001 (NEEDED)             共享库：[libm.so.6]
 0x0000000000000001 (NEEDED)             共享库：[libgraphene-1.0.so.0]
 0x0000000000000001 (NEEDED)             共享库：[libXi.so.6]
 0x0000000000000001 (NEEDED)             共享库：[libX11.so.6]
 0x0000000000000001 (NEEDED)             共享库：[libpangoft2-1.0.so.0]
..
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后我们就从手机系统寻找对应的库，我的程序要主要依赖的是GTK，所以解决了库的问题后，程序就编译通过了，将编译好的成传输到手机后也可以顺利运行。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>目前看来交叉编译Pinephone Pro的程序的主要问题是动态库的问题，因为GTK库的庞大，导致问题也变得有点复杂。一开始我在Mac上编译，但因为没有经验的缘故，一时间把这个单一的动态库缺失的问题想的过于复杂了。甚至更换到Ubuntu上编译，但是也失败了，因为并没有认识到问题的根本，完全是瞎猫碰上死老鼠的心态。后来又换成在Manjaro上编译，这里说句题外话，Manjaro的桌面版也是头一次用，但是整个系统对于只是开发发需求的我而言比Ubuntu这种重型的要轻便很多，另外这个系统真的是开发者友好的系统，命令行是非常的人性化。因为库很多，在一次复制过程中直接把系统的依赖库给覆盖掉了，导致系统无法启动，只能重新安装Manjaro系统。</p>
<p>依赖库太多，直接把折腾到临晨3点才搞定。现在看来应该整理使用脚本把所有的库依赖给处理下，比手动的要快吧。想到了之前开发iOS其实也是交叉编译，只不过苹果提供的工具完全让我们忽略了这些复杂性，另外当时记得很少使用动态库，一般是以静态库的形式。</p>
]]></content>
  </entry>
  <entry>
    <title>PinePhone Pro 初体验</title>
    <url>/2023/11/12/pinephone-pro-first-experience/</url>
    <content><![CDATA[<p>为什么要购买一台Linux手机呢?安卓和iOS我都开发过，iOS稍微久一些。最早想到Linux手机是源于安卓和iOS这些平台都会限制开发语言，比如你想用Python开发个界面。很早的时候有在安卓手机上安装过Ubuntu，但那个界面完全是PC的桌面，体验比较差。最近直接触发我购买PinePhone Pro的理由是我想用GTK的Rust绑定来开发应用。</p>
<h3 id="购买"><a href="#购买" class="headerlink" title="购买"></a>购买</h3><p>淘宝上可以购买，但是价格有点偏贵，需要4500左右。直接购买，官网目前不支持直接发内地，这家公司是从香港发货的，所以可以找家转运公司，发货到香港，再转运到内地。费用除了399美金的机子，还有官网发出的运费，因为是到香港，这个大概十几美金，再加上转运费近200，最后花费3000多些，比在淘宝购买要便宜不少。时间上，大概一周多点时间，就可以收到货。</p>
<h3 id="包装"><a href="#包装" class="headerlink" title="包装"></a>包装</h3><p>手机的包装跟之前网上看的开箱视频一样，手机、贴膜、说明书（没有中文）、充电线（红色）。开机时需要将后盖打开，把电池接触膜给撕掉，这样就可以开机了。手机的外放音质感觉很干涩，确实不能iPhone之类的相比。因为没有多余手机卡，所以移动网络并没有测试。</p>
<h3 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h3><p>这台手机最大的特点就是刷机友好，我一开始并没有打算刷机，应该是对Arch Linux不熟悉的缘故，所以预装系统下软件一直无法更新也无法安装新软件，比如我喜欢的Rust，甚至我都不知道如何进行远程连接，实际上现在认为都是不熟悉导致的。</p>
<p>安装新系统主要参考官网的说明<a href="https://wiki.pine64.org/wiki/PinePhone_Pro#Installation_instructions">Installation instructions</a>，我选择使用内置卡安装系统，因为我的是Mac OS，所以在刷系统到eMMC有点不一样，主要参考<a href="https://build2be.com/content/install-image-pinephone.html">Install Image Pinephone</a>。系统刷到卡的速度有点慢，按照文档设置1M&#x2F;s，系统大概6G多，结果刷了1个多小时才结束。文档说如果使用外置卡的话，可以用另一种技术，那个能快很多，但是手头没有多余的卡，加上内置卡128G的容量，觉得暂时就这样。</p>
<h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><h3 id="Manjaro"><a href="#Manjaro" class="headerlink" title="Manjaro"></a>Manjaro</h3><h4 id="Plasma-Mobile"><a href="#Plasma-Mobile" class="headerlink" title="Plasma Mobile"></a>Plasma Mobile</h4><p>预装的Manjaro系统，桌面使用Plasma Mobile，可能是稍早些的系统版本，系统UI显示看起来不是很精细的感觉。Manjaro是基于Arch LInux构建的，使用Pacman来进行软件管理。因为平时只使用过CentOS和Ubuntu，所以一开始操作不是很顺利。系统自带的相机功能无法使用，系统支持横竖屏，但是也有小Bug，比如竖屏时有些应用会显示成横屏的，这时只需要把手机横过来，再竖屏就好了。</p>
<h4 id="Phosh"><a href="#Phosh" class="headerlink" title="Phosh"></a>Phosh</h4><p>首先给我感觉界面很漂亮，不像Plasma Mobile这个界面会感觉有毛刺一般。但是我不太喜欢Phosh切入后台的操作，我更喜欢Plasma Mobile的方式。在虚拟键盘方面，虽然Phosh的更漂亮，但是Control等相关键设计过于小，使用时候很容易误点到下方的按键。刷机后，发现相机可用了，但是成像有问题。另外软件升级后发现整个系统的软件启动变慢了，暂未找到原因。系统预装的是火狐浏览器，但是网页似乎无法分辨屏幕大小，所以还是PC版的布局在显示。这点Plasma Mobile上的Angelfish浏览器更好一些。</p>
<h3 id="Arch-Linux"><a href="#Arch-Linux" class="headerlink" title="Arch Linux"></a>Arch Linux</h3><p>Manjaro 虽然也是基于Arch Linux，但是Arch Linux还是跟Manjaro不太一样些，比入没有<code>pacman-mirrors</code>这个命令。</p>
<h4 id="Phosh-1"><a href="#Phosh-1" class="headerlink" title="Phosh"></a>Phosh</h4><p>Manjaro Phosh版使用了一段一点时间，发现自带的Firefox在播放音乐的时候很卡，尝试安装chromium试下，但是启动不了，网上有人说Arch Linux版可以，于是我安装了，但是依旧不行，不知道是不是跟我用Phosh有关系没有。更新了Firefox发现老报配置错误，无法使用。即使在没有更新之前，虽然可以使用，但貌似没有安装中文字体的缘故，中文显示不了。我尝试整体更新软件，虽然也设置了国内的源，但是依旧很慢。选择单独升级Phosh，结果重启后就是死循环了。为了不把电池耗尽，只能选择刷机了。</p>
<p>之前在网上转门调研<a href="https://www.reddit.com/r/PinePhoneOfficial/comments/t3wc53/best_distro_for_pinephone_pro/">Best distro for Pinephone Pro?</a>，里面Arch Linux不少人推荐。但目前来看，虽然感觉App启动比Manjaro Phosh版的快一些，但是不够完整，使用性太差了。</p>
<h4 id="Barebone"><a href="#Barebone" class="headerlink" title="Barebone"></a>Barebone</h4><p>没有图形界面？一直处于命令行的登录状态。</p>
<h3 id="Mobian"><a href="#Mobian" class="headerlink" title="Mobian"></a>Mobian</h3><p>Debian的移动版，整体感觉比较稳定，应用启动也比之前的快。</p>
<ul>
<li>Firefox，播放在线音乐不卡。</li>
<li>Chromium，可以安装启动，但是不支持虚拟键盘，所以等于无法使用。</li>
</ul>
<h3 id="LuneOS"><a href="#LuneOS" class="headerlink" title="LuneOS"></a>LuneOS</h3><p>这个是原来的Open webOS，安装后可以启动，但是很快就会进入死循环，界面确实延续了WebOS的风格，但是也发现相机之类的界面出现界面乱的问题，不过因为很快就死机了，所以基本也没有来得及体验。手机电池耗尽对于初次刷机的一定要注意，会让你误以为手机成可砖块。建议先不要刷这个系统，熟悉了再考虑。</p>
<h3 id="PostmarketOS"><a href="#PostmarketOS" class="headerlink" title="PostmarketOS"></a>PostmarketOS</h3><p>这个是基于Alpine Linux的，PS：有点头大，刷一次机学习一种新的发行版操纵。</p>
<h4 id="Gnome-Shell-Mobile"><a href="#Gnome-Shell-Mobile" class="headerlink" title="Gnome Shell Mobile"></a>Gnome Shell Mobile</h4><p>我安装的是这个，不过感觉很卡，应该不是使用了Gnome的缘故，因为远程连接也很卡，说明还是系统适配的问题。</p>
<h3 id="Ubuntu-Touch"><a href="#Ubuntu-Touch" class="headerlink" title="Ubuntu Touch"></a>Ubuntu Touch</h3><p>这个系统是目前最可用的系统，可能是早期是由Ubuntu主导的，而且还发过手机，后来他们放弃了，现在由社区在驱动。首先这个系统支持中文输入，另外整个交互也非常的流畅。</p>
<h3 id="Nemo-Mobile"><a href="#Nemo-Mobile" class="headerlink" title="Nemo Mobile"></a>Nemo Mobile</h3><p>这个系统是基于Sailfish OS的，但是无法正常启动一直处于光标闪烁中。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="虚拟键盘"><a href="#虚拟键盘" class="headerlink" title="虚拟键盘"></a>虚拟键盘</h3><h4 id="Phosh-2"><a href="#Phosh-2" class="headerlink" title="Phosh"></a>Phosh</h4><p>目前发现虚拟键盘不支持中文输入，键盘源上有一个Chinese选项，但打出来的依旧是英文。</p>
<h3 id="电池问题"><a href="#电池问题" class="headerlink" title="电池问题"></a>电池问题</h3><p>电池管理这块似乎确实存在问题，耗电确实比一般的手机要快，放了一晚上就没有电了，所以后台可能有一些程序在运行，而对于iOS系统后台有严格管理的，所以我一般关机。</p>
<p>一次系统升级后，我都关机了，第二天再启动时发现无法启动，充电也不行，然后我就准备刷机，试了几次都不行。以为成砖头了，网上看了半天，最后才发现原来是<a href="https://wiki.pine64.org/wiki/PinePhone_Pro#The_battery_is_fully_drained">电池耗尽问题(The battery is fully drained)</a>，一般手机电池耗尽了，重新充电就可以了，但是Pinephone Pro的好像有问题，稍微充电一开机，系统死循环，电量耗尽，然后就一直充不进去电，最后参考官方的文档终于启动了。</p>
<p>上面关于关机后都没有电的问题，后来发现是手机在充电时我关机的，拔掉USB后系统莫名的自动开机，而当时因为升级后出现了问题，直接无法开机，我也没有注意到，所以才有了关机后会耗电的认知。</p>
<h3 id="证书问题"><a href="#证书问题" class="headerlink" title="证书问题"></a>证书问题</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">signature from &quot;Arch Linux ARM Build System builder@archlinuxarm.org&quot; is unknown trust<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>安装软件时老是提示证书的问题，无法升级以及安装软件，最后<a href="https://github.com/manjaro-pinephone/phosh/issues/19">参考</a>了这篇文章，解决方式如下：</p>
<pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo rm -r &#x2F;etc&#x2F;pacman.d&#x2F;gnupg
sudo pacman-key --init
sudo pacman-key --populate
sudo pacman-key --refresh-keys
sudo pacman -Sc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="应用适配"><a href="#应用适配" class="headerlink" title="应用适配"></a>应用适配</h2><p>我安装了VLC播放器，界面完全是桌面的，显示分辨率看起来很低。但是可以使用，只不过界面显示不全了。这点看起来也有好处，那就这些应用可能只需要修改界面就可以了。自从升级这个后，第二天手机就启动不了，软件升级也是有风险。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个台手机显然不是一台备用机，很多问题对于没有经验的新手来说是致命的，比如电池耗尽问题，让我差点以为手机成砖头了。Linux看似稳定，但是也是潜藏危机，每次升级很可能让系统无法正常运行，而我在如何恢复这块经验不足，每次都是重新安装，如果在生产环境这可能是灾难性的，意味着资料的丢失。</p>
]]></content>
  </entry>
</search>
